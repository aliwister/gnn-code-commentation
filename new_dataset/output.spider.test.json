[
    {
        "init": [
            "How many singers are there in the database?",
            "Can you count the total number of singers listed?",
            "Please provide the total count of singers."
        ],
        "final": [
            "How many singers are there?",
            "Can you count the total number of singers?",
            "Please provide the total number of singers."
        ],
        "feedback": [
            "Clear and straightforward, but could mention 'in the database' is redundant.",
            "Accurate and clear. The phrase 'listed' adds context but is not necessary.",
            "Concise and accurate but could be more conversational by adding a 'please' or 'can you'."
        ],
        "query": "SELECT count(*) FROM singer",
        "original_utterance": "How many singers do we have?"
    },
    {
        "init": [
            "How many singers are there in the database?",
            "Can you provide the total number of singers?",
            "What is the count of the singers in the list?"
        ],
        "final": [
            "How many singers are there?",
            "Can you provide the total number of singers?",
            "What is the count of the singers?"
        ],
        "feedback": [
            "This variation is clear and accurately conveys the intention behind the SQL query. No changes needed.",
            "This variation is clear, but 'database' might be too technical for some users. Consider using simpler language.",
            "This is a clear and concise way to express the query. No changes needed."
        ],
        "query": "SELECT count(*) FROM singer",
        "original_utterance": "What is the total number of singers?"
    },
    {
        "init": [
            "Show me a list of singers with their names, countries, and ages, sorted by age from oldest to youngest.",
            "Can you provide the details of singers, including their names, countries, and ages, ordered by age in descending order?",
            "List all the singers along with their country and age, sorted decreasingly by age."
        ],
        "final": [
            "Show me a list of singers with their names, countries, and ages, sorted by age from oldest to youngest.",
            "Can you provide the details of singers, including their names, countries, and ages, ordered from oldest to youngest?",
            "List all the singers along with their country and age, sorted from oldest to youngest."
        ],
        "feedback": [
            "This variation is clear and accurately represents the intent of the SQL query. However, using 'sorted from oldest to youngest' makes it explicitly clear to non-technical users that it is sorted in descending age order.",
            "Clear and concise. However, the term 'descending order' might be too technical for some users. Rephrasing it to a more natural term might improve clarity.",
            "Accurate, but the phrase 'sorted decreasingly by age' could be simplified to enhance clarity for non-technical users."
        ],
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "original_utterance": "Show name, country, age for all singers ordered by age from the oldest to the youngest."
    },
    {
        "init": [
            "Can you list the singers sorted by their age in descending order?",
            "Show me the names, countries, and ages of singers from oldest to youngest.",
            "Display the singers' names, countries, and ages, organized by age from highest to lowest."
        ],
        "final": [
            "Can you list the singers by their age from oldest to youngest?",
            "Show me the names, countries, and ages of singers from oldest to youngest.",
            "Show the singers' names, countries, and ages, organized by age from highest to lowest."
        ],
        "feedback": [
            "The phrasing is generally good, but it could be more specific by mentioning the age sorting direction directly.",
            "This variation is clear and accurate, directly mentioning the key elements without SQL jargon.",
            "This variation is clear and concise, but it could sound more natural by avoiding the word 'display' and focusing on the action 'show'."
        ],
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "original_utterance": "What are the names, countries, and ages for every singer in descending order of age?"
    },
    {
        "init": [
            "What is the average, minimum, and maximum age of singers from France?",
            "Can you tell me the average, youngest, and oldest ages of singers hailing from France?",
            "Find the average, lowest, and highest ages of French singers."
        ],
        "final": [
            "What are the average, minimum, and maximum ages of singers from France?",
            "Can you tell me the average, youngest, and oldest ages of singers from France?",
            "Find the average, lowest, and highest ages of singers from France."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query. No changes needed in terms of accuracy, but it could be worded in a way to enhance readability.",
            "Good phrasing with 'youngest' and 'oldest,' making it clear. However, the term 'hailing from' is less formal and could be simplified for clarity.",
            "This variation effectively conveys the SQL query but could specify it is about singers to avoid ambiguity. Consider using 'ages of singers from France' for clarity."
        ],
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "original_utterance": "What is the average, minimum, and maximum age of all singers from France?"
    },
    {
        "init": [
            "What is the average, minimum, and maximum age of singers from France?",
            "Can you provide the average, youngest, and oldest age of singers in France?",
            "Find the average, minimum, and maximum ages of singers based in France."
        ],
        "final": [
            "What is the average, youngest, and oldest age of singers from France?",
            "Can you provide the average, youngest, and oldest age of singers from France?",
            "Find the average, youngest, and oldest ages of singers from France."
        ],
        "feedback": [
            "This variation is clear and succinct but using 'minimum' and 'maximum' might feel too technical.",
            "Good natural phrasing, 'youngest' and 'oldest' are more user-friendly than 'minimum' and 'maximum'. However, 'in France' could be more specific as 'from France'.",
            "Accurate, but the phrase 'based in France' is slightly less direct than 'from France'."
        ],
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "original_utterance": "What is the average, minimum, and maximum age for all French singers?"
    },
    {
        "init": [
            "Show me the song name and release year of the youngest singer.",
            "What is the name and release year of the song by the youngest singer?",
            "Find the song and its release year for the youngest singer."
        ],
        "final": [
            "Show me the song name and release year of the youngest singer.",
            "What is the name and release year of the song by the youngest singer?",
            "Find the song name and release year for the youngest singer."
        ],
        "feedback": [
            "Clear and concise, but specifying 'singer' could enhance clarity, e.g., 'of the youngest singer.'",
            "Very clear and aligns well with the SQL query, but avoid potential ambiguity around whether 'by' relates to performance or composition.",
            "Accurate but could be more specific by mentioning 'name' explicitly instead of just 'the song.'"
        ],
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "original_utterance": "Show the name and the release year of the song by the youngest singer."
    },
    {
        "init": [
            "Which is the oldest song released by a singer and what year was it released?",
            "Show me the earliest song along with its release year from the youngest singer.",
            "Find the song with its release year by the youngest artist."
        ],
        "final": [
            "What is the song by the youngest singer and in what year was it released?",
            "Show me the song with its release year from the youngest singer.",
            "Find the song with its release year by the youngest singer."
        ],
        "feedback": [
            "This variation incorrectly implies the query is about the oldest song. It should focus on the youngest singer.",
            "This phrasing is mostly accurate but could clarify that it is asking for the song from the singer who is youngest, not the earliest song.",
            "Accurate and concise, but it would benefit from explicitly mentioning it is about the youngest artist for clarity."
        ],
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "original_utterance": "What are the names and release years for all the songs of the youngest singer?"
    },
    {
        "init": [
            "Which countries have singers over the age of 20?",
            "List all distinct countries where the singers are older than 20.",
            "Find the unique countries of singers who are above 20 years old."
        ],
        "final": [
            "Which countries have singers over the age of 20?",
            "List all distinct countries where the singers are over 20 years old.",
            "Find the distinct countries of singers who are above 20 years old."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the query's intent. However, specifying 'age' more directly to the condition 'over the age of 20' would enhance clarity.",
            "Well phrased, it clearly includes 'distinct countries,' reflecting the SQL query's distinct condition. However, 'older than 20' could be simplified for more natural language flow.",
            "Accurate and precise, but the word 'unique' might sound somewhat technical. Using 'distinct' instead of 'unique' could make it feel more natural."
        ],
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "original_utterance": "What are all distinct countries where singers above age 20 are from?"
    },
    {
        "init": [
            "What are the countries of singers who are older than 20?",
            "Can you list the distinct countries of singers aged over 20?",
            "Show me the different countries that singers older than 20 come from."
        ],
        "final": [
            "What are the unique countries of singers who are older than 20?",
            "Can you list the distinct countries of singers aged over 20?",
            "Show me the different countries that singers older than 20 come from."
        ],
        "feedback": [
            "This variation is clear and accurately captures the SQL query's intent. However, it could be slightly more specific by emphasizing 'unique countries' instead of just 'countries'.",
            "Good phrasing with a focus on 'distinct' which properly translates the 'DISTINCT' keyword from SQL. It is clear and precise, with no need for major changes.",
            "This variation has a natural flow and clearly asks for unique countries. The word 'different' effectively conveys the DISTINCT function in SQL. Overall, it is accurate and well-phrased."
        ],
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "original_utterance": "What are  the different countries with singers above age 20?"
    },
    {
        "init": [
            "How many singers are there from each country?",
            "Can you provide the number of singers grouped by their country?",
            "Show me the count of singers based on their country of origin."
        ],
        "final": [
            "How many singers are there per country?",
            "Can you provide the number of singers per country?",
            "Show me the count of singers by country."
        ],
        "feedback": [
            "This variation is clear and accurate, but it can be made more specific by mentioning that the count is per country.",
            "Good phrasing, but 'grouped by' might sound technical. Using more natural language like 'per country' would enhance clarity.",
            "Accurate and concise, but 'based on their country of origin' is somewhat verbose. Simplifying it to 'by country' would improve fluency."
        ],
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "original_utterance": "Show all countries and the number of singers in each country."
    },
    {
        "init": [
            "How many singers are there from each country?",
            "List the number of singers grouped by their country of origin.",
            "Can you provide the count of singers for each country?"
        ],
        "final": [
            "How many singers are there from each country?",
            "List the number of singers by country.",
            "Can you provide the count of singers from each country?"
        ],
        "feedback": [
            "This variation is clear and logically correct. It accurately captures the intent of grouping and counting singers by country.",
            "Overall, this variation is good. The phrase 'grouped by their country of origin' may be a bit technical and could be simplified for better natural language flow.",
            "This variation is concise and correct. No changes needed, but it's worth noting that 'for each country' might be improved slightly for natural language clarity."
        ],
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "original_utterance": "How many singers are from each country?"
    },
    {
        "init": [
            "Which songs are performed by singers older than the average age?",
            "List the songs sung by singers whose age is above the average age.",
            "Show me the song names of singers who are older than the average."
        ],
        "final": [
            "Which songs are associated with singers older than the average age?",
            "List the songs sung by singers whose age is above the average age.",
            "Show me the song names of singers whose age is above the average."
        ],
        "feedback": [
            "This variation is clear and correct, but 'performed by' might be too specific, whereas the SQL query does not imply performance, just the association.",
            "Very clear and accurate. It maintains the original query's intent without introducing technical jargon.",
            "This is concise and to the point. However, the term 'show me' might be informal for some contexts. Additionally, 'singers who are older than the average' can be made clearer by specifying 'age.'"
        ],
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "original_utterance": "List all song names by singers above the average age."
    },
    {
        "init": [
            "Show me the names of songs by singers who are older than the average age.",
            "What are the songs performed by singers with an age above the average?",
            "List the song titles from singers who are older than the average age."
        ],
        "final": [
            "Show me the names of songs by singers who are older than the average age.",
            "What are the songs sung by singers with an age above the average?",
            "List the song names from singers who are older than the average age."
        ],
        "feedback": [
            "This variation is clear and contextually accurate. It captures the intent well without any ambiguities.",
            "Good phrasing, but it can be simplified for better clarity. Use 'sung by' instead of 'performed by' to avoid potential confusion.",
            "Accurate and concise. No major changes needed, but could replace 'titles' with 'names' to sound more natural."
        ],
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "original_utterance": "What are all the song names by singers who are older than average?"
    },
    {
        "init": [
            "Show me the stadiums with a capacity between 5000 and 10000.",
            "Can you list the stadium names and their locations that have a capacity ranging from 5000 to 10000?",
            "Find the names and locations of stadiums where the seating capacity is between 5000 and 10000."
        ],
        "final": [
            "Show me the names and locations of stadiums with a capacity between 5000 and 10000.",
            "Can you list the stadium names and their locations that have a capacity between 5000 and 10000?",
            "Find the names and locations of stadiums where the seating capacity is between 5000 and 10000."
        ],
        "feedback": [
            "This variation is clear but can be improved by explicitly mentioning 'locations' along with the stadiums.",
            "Well-phrased, but 'ranging from' could be replaced with 'between' for consistency with the original SQL query.",
            "Accurate and detailed. It clearly reflects the original SQL query's intent without using technical jargon."
        ],
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "original_utterance": "Show location and name for all stadiums with a capacity between 5000 and 10000."
    },
    {
        "init": [
            "Show me the stadiums with a capacity between 5,000 and 10,000, including their locations and names.",
            "Can you list the stadiums that can hold between 5,000 and 10,000 people, along with their locations and names?",
            "Find stadiums with a capacity range of 5,000 to 10,000, and provide their locations and names."
        ],
        "final": [
            "Show me the stadiums with a capacity between 5,000 and 10,000, including their locations and names.",
            "Can you list the stadiums with a capacity of between 5,000 and 10,000 people, along with their locations and names?",
            "Find stadiums with a capacity range of 5,000 to 10,000, and provide their locations and names."
        ],
        "feedback": [
            "This variation is clear and covers the query's intent. The specification of 'including their locations and names' aligns well with the query.",
            "Good phrasing, but 'can hold between' could be simplified to 'with a capacity of.' The rest of the request is well-aligned with the query.",
            "Clear and accurate. The phrasing 'capacity range of' is appropriate and natural. No changes needed."
        ],
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "original_utterance": "What are the locations and names of all stations with capacity between 5000 and 10000?"
    },
    {
        "init": [
            "What is the maximum capacity of the stadia, and what is the average capacity?",
            "Show me the stadium with the highest capacity and the average capacity across all stadiums.",
            "Find the stadium with the largest capacity and provide the average capacity."
        ],
        "final": [
            "What is the maximum capacity of all stadiums and the overall average capacity?",
            "Can you display the highest capacity among all stadiums and the average capacity?",
            "Show the stadium with the highest capacity value and average capacity across all stadiums."
        ],
        "feedback": [
            "The variation is clear but uses the term 'stadia,' which may not be familiar to everyone. Also, it doesn't explicitly state that it is querying from a database table.",
            "Good phrasing, but it might cause confusion by suggesting an individual stadium alongside the average capacity, which isn't what the SQL query implies universally.",
            "This utterance is clear and avoids technical jargon but inaccurately implies looking for an individual stadium rather than a maximum value across all stadiums."
        ],
        "query": "select max(capacity), average from stadium",
        "original_utterance": "What is the maximum capacity and the average of all stadiums ?"
    },
    {
        "init": [
            "What is the average and the maximum capacity of the stadiums?",
            "Show me the average and the highest capacities among all stadiums.",
            "Can you provide the average and the maximum capacity from the stadium data?"
        ],
        "final": [
            "What is the average and the maximum capacity of the stadiums?",
            "Show me the average and the highest capacities among all stadiums.",
            "Can you provide the average and the maximum capacity of the stadiums?"
        ],
        "feedback": [
            "This variation is clear and directly asks for the relevant statistics. The mention of 'stadiums' makes the context explicit almost perfectly aligned with the SQL query's intent. No significant changes needed.",
            "Good phrasing and clear. The word 'highest' is a natural language synonym for 'maximum', which maintains accuracy. Also, 'among all stadiums' makes it clear that we are considering all entries. No significant changes needed.",
            "This variation is clear but the phrase 'from the stadium data' could be omitted for conciseness since 'stadium' is already specified. There's also no use of any confusing SQL terminology."
        ],
        "query": "select avg(capacity) ,  max(capacity) from stadium",
        "original_utterance": "What is the average and maximum capacities for all stadiums ?"
    },
    {
        "init": [
            "Which stadium with the highest average ranks at the top?",
            "Can you show me the stadium that has the highest capacity?",
            "Find the stadium with the highest average that is ranked at the top."
        ],
        "final": [
            "Which stadium has the highest average capacity?",
            "Can you show me the stadium with the highest average?",
            "Find the stadium that tops the list with the highest average."
        ],
        "feedback": [
            "This variation is somewhat unclear because 'highest average' could refer to various types of averages. Specify that it refers to the highest average and needs to mention capacity.",
            "This variation is incorrect because it asks for the stadium with the highest capacity instead of the highest average. Ensure it accurately reflects the intent of the original query.",
            "This variation is accurate but could be more concise by specifying it\u2019s the stadium with the highest 'average' without using repetitive wording like 'ranked at the top.'"
        ],
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "original_utterance": "What is the name and capacity for the stadium with highest average attendance?"
    },
    {
        "init": [
            "What is the stadium with the highest average capacity?",
            "Can you find me the name and capacity of the stadium with the highest average?",
            "Show me the stadium that has the highest average and its capacity."
        ],
        "final": [
            "Which stadium has the highest average, and what is its capacity?",
            "Find the stadium with the highest average and show its name and capacity.",
            "Show me the stadium with the highest average and its corresponding capacity."
        ],
        "feedback": [
            "This variation is clear but could explicitly mention it's looking for the capacity figure specifically. The term 'average capacity' can be misleading as the original query orders by 'average.'",
            "This is a good variation but consider specifying 'highest average' to reflect the ordering more clearly. It can also drop 'can you' to be more direct.",
            "This variation is accurate and captures the query's intent well, but it would be clearer to specify we're looking for the stadium's average to be the highest."
        ],
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "original_utterance": "What is the name and capacity for the stadium with the highest average attendance?"
    },
    {
        "init": [
            "How many concerts were held in the years 2014 or 2015?",
            "Can you provide the number of concerts that took place in 2014 and 2015?",
            "What is the count of concerts from the years 2014 and 2015?"
        ],
        "final": [
            "How many total concerts were held in the years 2014 or 2015?",
            "Can you provide the number of concerts that took place in 2014 or 2015?",
            "What is the count of concerts from the years 2014 and 2015?"
        ],
        "feedback": [
            "Clear and accurate. No changes needed, but consider adding a word like 'total' for completeness.",
            "Accurate, but the use of 'and' might suggest that concerts held in both years should be included. Changing 'and' to 'or' clarifies this.",
            "Good phrasing. It correctly uses 'years' and 'count,' which aligns well with the SQL query."
        ],
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "original_utterance": "How many concerts are there in year 2014 or 2015?"
    },
    {
        "init": [
            "How many concerts were held in either 2014 or 2015?",
            "Can you provide the total number of concerts that took place in the years 2014 and 2015?",
            "What is the count of concerts conducted in the years 2014 or 2015?"
        ],
        "final": [
            "How many concerts were held in either 2014 or 2015?",
            "What's the total number of concerts that took place in 2014 and 2015?",
            "What is the count of concerts in 2014 or 2015?"
        ],
        "feedback": [
            "This variation accurately captures the query's logic and intent. It's clear and concise, with no need for improvement.",
            "This phrasing is good but can be shortened for brevity by removing 'provide.' Also, specifying 'the years' is not necessary, as it might add redundancy.",
            "This variation is accurate but uses 'conducted,' which is correct but less common. Simplifying by rephrasing might improve clarity."
        ],
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "original_utterance": "How many concerts occurred in 2014 or 2015?"
    },
    {
        "init": [
            "Show me the number of concerts held in each stadium, along with the stadium names.",
            "Can you list the stadium names along with the count of concerts held in each?",
            "Find the names of stadiums and the corresponding number of concerts conducted in each one."
        ],
        "final": [
            "Show me the name of each stadium and the number of concerts held in them.",
            "Can you list each stadium and the number of concerts held there?",
            "Find the names of stadiums and the corresponding number of concerts conducted in each one."
        ],
        "feedback": [
            "This variation clearly states the requirement, but it could improve flow by explicitly mentioning 'each stadium's name and the count of concerts.'",
            "Good phrasing but could be more concise by stating 'the number of concerts.' Avoid repetition of 'held in each.'",
            "Accurate and well-phrased. It avoids technical jargon and clearly communicates the query's intent."
        ],
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "original_utterance": "Show the stadium name and the number of concerts in each stadium."
    },
    {
        "init": [
            "Can you show me the number of concerts held in each stadium along with the stadium names?",
            "List all stadium names and the total number of concerts conducted in each of them.",
            "How many concerts have been held in each stadium? Provide the stadium names as well."
        ],
        "final": [
            "List the number of concerts held in each stadium along with the stadium names.",
            "List all stadium names and the total number of concerts conducted in each of them.",
            "How many concerts have been held in each stadium?"
        ],
        "feedback": [
            "The phrasing is clear, but it could be more concise. Also, 'show me' could be replaced with 'list' to avoid ambiguity.",
            "This variation is accurate and precise. No changes are necessary.",
            "While accurate, it could be more succinct. The phrase 'Provide the stadium names as well' feels redundant and could be removed."
        ],
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "original_utterance": "For each stadium, how many concerts play there?"
    },
    {
        "init": [
            "Which stadium has hosted the most concerts since 2014, and what is its capacity?",
            "Find the stadium with the highest number of concerts held since 2014 and provide its name and capacity.",
            "What is the name and capacity of the stadium that has hosted the most concerts starting from the year 2014?"
        ],
        "final": [
            "Which stadium has held the most concerts since 2014, and what is its capacity?",
            "Find the stadium with the highest number of concerts since 2014 and provide its name and capacity.",
            "What is the name and capacity of the stadium that has hosted the largest number of concerts from the year 2014 onwards?"
        ],
        "feedback": [
            "This variation is clear and accurate, but could be slightly rephrased for better natural flow. The term 'hosted' is good but could be modernized.",
            "This is precise but a bit wordy. The phrase 'held since 2014' could be streamlined to improve readability.",
            "This variation is succinct and mirrors the SQL query well. However, it can be refined to explicitly ask for information about concerts."
        ],
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Show the stadium name and capacity with most number of concerts in year 2014 or after."
    },
    {
        "init": [
            "Which stadium hosted the most concerts after 2013, and what is its capacity?",
            "Show me the name and capacity of the stadium with the highest number of concerts since 2013.",
            "What is the name and capacity of the stadium that has held the most number of concerts since 2013?"
        ],
        "final": [
            "Which stadium hosted the most concerts after 2013, and what is its capacity?",
            "Show me the name and capacity of the stadium with the highest number of concerts since 2013.",
            "What is the name and capacity of the stadium with the most concerts since 2013?"
        ],
        "feedback": [
            "This variation is clear and directly asks for the necessary information. However, stating 'the most concerts' implicitly specifies the use of an aggregate function.",
            "The phrasing is good and clear. The mention of 'since 2013' accurately reflects the 'year > 2013' condition in the SQL query.",
            "This variation is accurate and clear. It uses 'held' instead of 'hosted,' which is a good alternative. However, it could be shortened for brevity."
        ],
        "query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "original_utterance": "What is the name and capacity of the stadium with the most concerts after 2013 ?"
    },
    {
        "init": [
            "Which year had the most concerts?",
            "Show me the year with the highest number of concerts.",
            "What is the year with the maximum number of concerts held?"
        ],
        "final": [
            "Which year had the highest number of concerts?",
            "What year had the highest number of concerts?",
            "What is the year with the maximum number of concerts held?"
        ],
        "feedback": [
            "Clear and straightforward, but could mention explicitly that it is about the concert count.",
            "Good phrasing, aligns well with the original query. Could remove the term 'Show me' for brevity.",
            "Accurate and natural. No significant changes needed. It avoids any SQL-specific terminology effectively."
        ],
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which year has most number of concerts?"
    },
    {
        "init": [
            "Which year had the highest number of concerts?",
            "Find the year with the most concerts held.",
            "In which year were the most concerts organized?"
        ],
        "final": [
            "Which year had the highest number of concerts?",
            "Find the year with the most concerts held.",
            "In which year were the most concerts organized?"
        ],
        "feedback": [
            "Accurate and clear, but adding 'the' before 'highest' improves natural language flow.",
            "Good phrasing. Clear and concise without any need for technical jargon.",
            "Also accurate and clear. The phrase 'organized' conveys the SQL query intent well without referencing technical SQL terms."
        ],
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the year that had the most concerts?"
    },
    {
        "init": [
            "Show me the names of stadiums that are not hosting any concerts.",
            "Which stadiums have no concerts scheduled?",
            "List the stadiums that do not have any concerts booked."
        ],
        "final": [
            "Show me the names of stadiums that are not hosting any concerts.",
            "Which stadiums currently have no concerts scheduled?",
            "List the stadiums that do not have any concerts booked."
        ],
        "feedback": [
            "This variation is clear and natural, accurately reflecting the SQL query. No major improvements needed.",
            "This question is precise and naturally phrased but could benefit from additional context, like specifying a time frame for the scheduled concerts.",
            "This variation is accurate and avoids technical jargon, making it user-friendly. No significant changes needed."
        ],
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "original_utterance": "Show the stadium names without any concert."
    },
    {
        "init": [
            "Show me the names of stadiums that don't have any concerts scheduled.",
            "Which stadiums do not host any concerts?",
            "List the names of stadiums without any concerts."
        ],
        "final": [
            "Show me the names of stadiums that don't have any concerts scheduled.",
            "Which stadiums do not have any concerts scheduled?",
            "List the names of stadiums without any concerts."
        ],
        "feedback": [
            "This variation is clear and directly addresses the query. It explicitly mentions 'names of stadiums', which aligns well with the SQL query.",
            "Good phrasing, but it could be more specific by mentioning 'names', instead of just 'stadiums'. The focus should be on creating a direct link to the SQL query that selects 'name'.",
            "Accurate and concise. It addresses the query directly by asking for names and relates well to the original SQL syntax."
        ],
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "original_utterance": "What are the names of the stadiums without any concerts?"
    },
    {
        "init": [
            "Which countries have singers that are both older than 40 and younger than 30?",
            "Can you list the countries of singers who are less than 30 and over 40 years old?",
            "Find the countries with singers in both the age groups below 30 and above 40."
        ],
        "final": [
            "Which countries have singers both older than 40 and younger than 30, although not necessarily the same singers?",
            "Can you list the countries of singers who are either under 30 or over 40 years old?",
            "Find the countries that have singers in the age groups below 30 and above 40 separately."
        ],
        "feedback": [
            "This variation is mostly clear, but it implies both conditions must apply simultaneously to individual singers rather than intersecting lists. Rephrase to clarify it's about different singers in the age groups.",
            "Accurate but could be confusing by mentioning both conditions without clarifying the different groups. Suggest explicitly mentioning the separate age groups.",
            "Concise and clear but can benefit from explicitly mentioning that the countries listed have singers in both age groups."
        ],
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "original_utterance": "Show countries where a singer above age 40 and a singer below 30 are from."
    },
    {
        "init": [
            "List all the stadiums that did not host a concert in the year 2014.",
            "Show me the names of stadiums that had no concerts in 2014.",
            "Which stadiums were not used for concerts in the year 2014?"
        ],
        "final": [
            "List all the stadiums that did not host a concert in the year 2014.",
            "Show me the names of stadiums that did not host any concerts in 2014.",
            "Which stadiums were not used for concerts in the year 2014?"
        ],
        "feedback": [
            "The variation is accurate and clearly conveys the SQL query's intent. It uses natural language and avoids SQL terminology effectively.",
            "This variation is concise and clear. However, it might be helpful to mention 'names' explicitly for clarity.",
            "This variation is accurate and avoids technical jargon. It clearly conveys the query's intent and can be understood by non-technical users."
        ],
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "original_utterance": "Show names for all stadiums except for stadiums having a concert in year 2014."
    },
    {
        "init": [
            "Show me the names of the stadiums that did not host any concerts in 2014.",
            "Which stadiums were not used for concerts in the year 2014?",
            "List the stadiums where no concerts were held in 2014."
        ],
        "final": [
            "Show me the names of the stadiums or venues that did not host any concerts in 2014.",
            "Which stadiums did not host concerts in the year 2014?",
            "List the stadiums where no concerts were hosted in 2014."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the SQL query but could mention the word 'venues' for broader understanding.",
            "Phrasing is good, but 'were not used for' could be interpreted differently. Simplify it to avoid ambiguity.",
            "This variation is concise and captures the query's meaning well, but replacing 'held' with 'hosted' might be clearer."
        ],
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "original_utterance": "What are the names of all stadiums that did not have a concert in 2014?"
    },
    {
        "init": [
            "Can you provide the number of singers for each concert along with the concert name and theme?",
            "Show me the count of singers for each concert, including the concert name and its theme.",
            "List the number of singers per concert, along with the concert's name and theme."
        ],
        "final": [
            "Can you provide the number of singers for each concert, including the concert name and theme?",
            "Show me the number of singers for each concert along with its name and theme.",
            "List the number of singers for each concert, along with the concert's name and theme."
        ],
        "feedback": [
            "Clear and concise, but could benefit from specifying 'each' to emphasize all concerts are included. Also, no reference to 'count' necessary.",
            "Accurate, but it can be refined for clarity by making it less wordy and removing SQL-specific terminology like 'count'.",
            "Straightforward and avoids technical jargon, but consider specifying 'each' for clarity."
        ],
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "original_utterance": "Show the name and theme for all concerts and the number of singers in each concert."
    },
    {
        "init": [
            "List the name and theme of each concert along with the number of singers performing in each.",
            "Show the concert names, their themes, and how many singers are participating in each concert.",
            "Give me the names and themes of concerts and the count of singers for each concert."
        ],
        "final": [
            "List the name and theme of each concert along with the number of singers performing in each.",
            "Show the concert names, themes, and the number of singers participating in each concert.",
            "Give me the names and themes of concerts and the number of singers for each concert."
        ],
        "feedback": [
            "Good clarity and accuracy. It covers all necessary elements and uses natural language.",
            "This variation is precise but could benefit from rephrasing for better flow. Consider removing 'their' for simplicity.",
            "Clear and concise. Consider mentioning the count explicitly as 'number of' for more clarity."
        ],
        "query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "original_utterance": "What are the names , themes , and number of singers for every concert ?"
    },
    {
        "init": [
            "Can you give me the number of concerts each singer has performed in, along with their names?",
            "Show me the names of singers and how many concerts they've performed in.",
            "List the singers along with the count of concerts they have appeared in."
        ],
        "final": [
            "Can you give me the number of concerts each singer has performed in, along with their names in total?",
            "Show me the names of each singer and how many concerts they've performed in.",
            "List the singers along with the count of concerts they have appeared in."
        ],
        "feedback": [
            "This variation is clear and effectively captures the SQL query's intent. However, it could be more explicit by specifying 'in total'.",
            "The phrasing is concise and clear. It covers all necessary elements but can be improved by including the word 'each' for clarity: 'each' singer.",
            "This variation is also very clear. It effectively conveys the SQL query's meaning without technical terms. No significant changes needed."
        ],
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "original_utterance": "List singer names and number of concerts for each singer."
    },
    {
        "init": [
            "Show me the number of concerts each singer has performed in, along with their names.",
            "Can you list the singers and the total number of concerts they have performed in?",
            "Find the total number of performances for each singer and display their names."
        ],
        "final": [
            "Show me the number of concerts each singer has performed in, along with their names.",
            "Can you list the singers and the total number of concerts each has performed in?",
            "Find the total number of concert performances for each singer and display their names."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query's intent. It mentions both the singer names and the count of concerts, which aligns well with the query.",
            "Good phrasing, but it could emphasize that it's listing both the singers and the number of concerts. Otherwise, it might seem that we're looking for just a list of singers.",
            "It clearly represents the SQL query's intent, but the term 'performances' might be partially ambiguous. 'Concert performances' or 'concerts' would be more precise."
        ],
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "original_utterance": "What are the names of the singers and number of concerts for each person?"
    },
    {
        "init": [
            "Can you list the singers who performed in concerts in the year 2014?",
            "Show me the names of singers who had concerts in 2014.",
            "Which singers participated in concerts during 2014?"
        ],
        "final": [
            "Can you list the singers who performed in concerts in the year 2014?",
            "Show me the names of singers who performed in concerts in 2014.",
            "Which singers participated in concerts during 2014?"
        ],
        "feedback": [],
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "original_utterance": "List all singer names in concerts in year 2014."
    },
    {
        "init": [
            "Which singers performed in concerts held in 2014?",
            "List the names of singers who participated in concerts in the year 2014.",
            "Who were the singers that took part in any concert during 2014?"
        ],
        "final": [
            "Which singers performed in concerts held in 2014?",
            "List the singers who performed in the year 2014 concerts.",
            "Who were the singers that performed in concerts during 2014?"
        ],
        "feedback": [
            "This variation is clear and correctly captures the query's intent. It provides a simple phrasing without technical jargon.",
            "Phrase is good but 'participated' is slightly less common in conversational contexts. The structure 'list the names of singers' is appropriate.",
            "This is precise and clear. The phrasing 'took part in any concert during 2014' might be simplified to enhance clarity."
        ],
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "original_utterance": "What are the names of the singers who performed in a concert in 2014?"
    },
    {
        "init": [
            "Which singers from which countries have a song with 'Hey' in the title?",
            "Can you list the names and countries of singers who have a song with 'Hey' in its name?",
            "Find the singers and their countries who have songs containing the word 'Hey'."
        ],
        "final": [
            "Which singers and their countries have a song with 'Hey' in the title?",
            "Can you list the names and countries of singers with 'Hey' in a song title?",
            "Find the singers and their countries who have songs containing the word 'Hey'."
        ],
        "feedback": [
            "Accurate and clear. It specifies both 'name' and 'country.' However, 'which singers from which countries' can be simplified for brevity.",
            "Clear and detailed. It accurately captures the query's elements but could be more concise by not repeating 'who have a song with' and 'in its name.'",
            "Concise and to the point. It's accurately aligned with the original SQL query and uses a natural language flow."
        ],
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "original_utterance": "what is the name and nation of the singer who have a song having 'Hey' in its name?"
    },
    {
        "init": [
            "Show me the singers from different countries who have a song with 'Hey' in the title.",
            "Which singers have songs containing the word 'Hey' and what countries are they from?",
            "Can you list the singers and their countries for songs that include the word 'Hey' in the title?"
        ],
        "final": [
            "Show me the names and countries of singers who have a song with 'Hey' in the title.",
            "Which singers have songs containing the word 'Hey,' and what countries are they from?",
            "Can you list the names and countries of singers for songs that include the word 'Hey' in the title?"
        ],
        "feedback": [
            "The variation is clear but could explicitly mention what information is being displayed (names and countries).",
            "This variation is clear and precise. It accurately captures the intent of the original SQL query with a focus on names and countries.",
            "Good phrasing, but it could avoid redundant wording such as 'singers and their countries' to make it more concise."
        ],
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "original_utterance": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?"
    },
    {
        "init": [
            "Which stadiums hosted concerts in both 2014 and 2015?",
            "List the names and locations of stadiums where concerts took place in the years 2014 and 2015.",
            "Can you provide the stadium names and locations that had concerts in the years 2014 and 2015?"
        ],
        "final": [
            "Which stadiums hosted concerts in both 2014 and 2015?",
            "List stadiums where concerts took place in 2014 and 2015.",
            "Can you provide the stadium names and locations that had concerts for 2014 and 2015?"
        ],
        "feedback": [
            "This variation is clear and concise. No changes are necessary, but adding 'concerts' explicitly is helpful for context.",
            "This variation correctly captures the crux of the query but could be made more concise. Removing 'the names and locations of stadiums' could improve brevity.",
            "This is accurate and relevant, but the phrasing 'in the years 2014 and 2015' could be simplified to 'for 2014 and 2015' for better readability."
        ],
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "original_utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."
    },
    {
        "init": [
            "Which stadiums hosted concerts in both 2014 and 2015?",
            "Find the names and locations of stadiums where concerts were held in both 2014 and 2015.",
            "List the stadiums that held concerts in both the years 2014 and 2015, including their names and locations."
        ],
        "final": [
            "Which stadiums have hosted concerts in both 2014 and 2015?",
            "Find the names and locations of stadiums that held concerts in both 2014 and 2015.",
            "List the stadiums that hosted concerts in both 2014 and 2015, including their names and locations."
        ],
        "feedback": [
            "This variation is concise but could explicitly mention it's looking for stadiums based on concert data.",
            "The phrasing is clear and covers the SQL query entirely. No improvements necessary but ensure it\u2019s understood as per concert events.",
            "While accurate and detailed, it can be slightly more concise by removing redundant words like 'holding concerts in both the years.'"
        ],
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "original_utterance": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?"
    },
    {
        "init": [
            "How many concerts have been held in the largest stadium by capacity?",
            "Count the number of concerts that took place in the stadium with the highest capacity.",
            "What is the total number of concerts held at the stadium with the most seating capacity?"
        ],
        "final": [
            "How many concerts have been held in the largest stadium by capacity?",
            "Count the number of concerts that took place in the stadium with the highest current capacity.",
            "What is the total number of concerts held at the stadium with the most seating capacity?"
        ],
        "feedback": [
            "This variation is clear and aligns well with the SQL query. The term 'largest stadium by capacity' accurately translates the SQL logic.",
            "The phrasing is accurate and succinct. However, the addition of 'currently' could make it clearer that we are referring to the largest capacity at this moment.",
            "This variation is also clear and accurately represents the SQL query. The phrase 'most seating capacity' effectively translates 'capacity DESC' from SQL. No major changes needed."
        ],
        "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "original_utterance": "Find the number of concerts happened in the stadium with the highest capacity ."
    },
    {
        "init": [
            "How many concerts are held in the largest stadium?",
            "Can you count the number of concerts that took place in the stadium with the highest capacity?",
            "Find out the total number of concerts held at the biggest stadium by capacity."
        ],
        "final": [
            "How many concerts are held in the largest stadium?",
            "Can you count the number of concerts that took place in the largest stadium?",
            "Find out the total number of concerts held at the biggest stadium."
        ],
        "feedback": [
            "This variation is clear and accurate. No explicit SQL technical terms are present, making it easily understandable.",
            "Clear and precise, though it could be improved by omitting the technical term 'capacity' and simply referring to it as the largest or biggest stadium.",
            "Accurate and concise. No changes needed. It uses natural language effectively and avoids SQL-specific terminology."
        ],
        "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "original_utterance": "What are the number of concerts that occurred in the stadium with the largest capacity ?"
    },
    {
        "init": [
            "How many pets weigh more than 10 pounds?",
            "Can you tell me the number of pets with a weight over 10 pounds?",
            "Find out the count of pets that are heavier than 10 pounds."
        ],
        "final": [
            "How many pets weigh more than 10 pounds?",
            "Can you tell me the number of pets weighing over 10 pounds?",
            "What is the count of pets that are heavier than 10 pounds?"
        ],
        "feedback": [
            "This variation is clear and matches the original SQL query's intent. No improvements needed.",
            "Good phrasing, but consider changing 'the number of pets with a weight over' to 'the number of pets weighing over' for a more natural flow.",
            "Accurate and concise. However, rephrasing 'Find out the count' to 'What is the count' could make it sound more like a natural query."
        ],
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "original_utterance": "Find the number of pets whose weight is heavier than 10."
    },
    {
        "init": [
            "How many pets weigh more than 10 pounds?",
            "Can you tell me the number of pets that have a weight over 10 pounds?",
            "Give me a count of pets whose weight exceeds 10 pounds."
        ],
        "final": [
            "How many pets weigh more than 10 pounds?",
            "Can you tell me the number of pets that weigh over 10 pounds?",
            "Give me a count of pets that have a weight exceeding 10 pounds."
        ],
        "feedback": [
            "Clear and straightforward. No changes needed.",
            "Accurate and clear, but the phrase 'have a weight' can be simplified to 'weigh.'",
            "Good and precise, though 'whose' might be better changed to 'that have a' to avoid any confusion."
        ],
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "original_utterance": "How many pets have a greater weight than 10?"
    },
    {
        "init": [
            "Show me the weight of the youngest pet.",
            "What is the weight of the youngest pet in the listing?",
            "Find the weight of the pet with the least age."
        ],
        "final": [
            "Show me the weight of the youngest pet.",
            "What is the weight of the youngest pet?",
            "Find the weight of the youngest pet."
        ],
        "feedback": [
            "Clear and concise. Directly asks for the required information without technical jargon.",
            "Good phrasing, but 'in the listing' may be redundant. Still maintains the query's intent.",
            "Accurate, but 'least age' might not be immediately clear to all users. Consider using 'youngest' instead."
        ],
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_utterance": "Find the weight of the youngest dog."
    },
    {
        "init": [
            "What is the weight of the youngest pet?",
            "Can you find the weight of the pet with the least age?",
            "Show me the weight of the youngest pet in the list."
        ],
        "final": [
            "What is the weight of the youngest pet?",
            "Can you find the weight of the youngest pet?",
            "Show me the weight of the youngest pet."
        ],
        "feedback": [
            "Clear and straightforward, but the phrase 'youngest pet' could be ambiguous to a non-technical user not familiar with sorting concepts.",
            "Good attempt, but 'least age' is a bit awkward. It might be clearer to say 'youngest' for better natural language flow.",
            "This variation is accurate but could be slightly more natural by removing 'in the list,' which might be redundant."
        ],
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_utterance": "How much does the youngest dog weigh?"
    },
    {
        "init": [
            "What is the heaviest weight recorded for each type of pet?",
            "Can you provide the maximum weight for each pet category?",
            "Show me the maximum weight for pets, grouped by their type."
        ],
        "final": [
            "What is the heaviest weight recorded for each type of pet?",
            "Can you provide the maximum weight for each type of pet?",
            "Show me the maximum weight for pets, grouped by their type."
        ],
        "feedback": [
            "Clear and accurate. It directly asks for the heaviest weight for each pet type without any SQL technical jargon.",
            "Good phrasing, but the term 'category' might slightly diverge from 'type'. 'Category' is more abstract and might cause confusion. 'Type' is more specific.",
            "Accurate and concise. The term 'grouped by' is slightly more technical but still understandable. It clearly conveys the intent."
        ],
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "original_utterance": "Find the maximum weight for each type of pet. List the maximum weight and pet type."
    },
    {
        "init": [
            "What is the maximum weight recorded for each type of pet?",
            "Can you provide the heaviest pet for each pet type?",
            "Find the maximum weight for every pet type."
        ],
        "final": [
            "What is the maximum weight recorded for each type of pet?",
            "Can you provide the maximum weight for each pet type?",
            "Find the maximum weight for each pet type."
        ],
        "feedback": [
            "This variation is clear and accurate. It correctly asks for the maximum weight for each pet type. No changes needed.",
            "This variation is slightly ambiguous as it could be interpreted as asking for the individual pet rather than the maximum weight. Mentioning the weight explicitly would improve it.",
            "This variation is accurate but could be worded more naturally by changing 'every' to 'each'."
        ],
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "original_utterance": "List the maximum weight and type for each type of pet."
    },
    {
        "init": [
            "How many students older than 20 have pets?",
            "Count the number of students above the age of 20 who have a pet.",
            "Can you tell me the total number of students with pets who are over 20 years old?"
        ],
        "final": [
            "How many students older than 20 have pets?",
            "Count the number of students over the age of 20 who have a pet.",
            "Can you tell me how many students with pets are over 20 years old?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the original SQL query. It correctly simplifies and conveys 'age > 20' and 'join' without technical jargon.",
            "This version is both clear and concise. However, 'above the age of 20' can be better phrased as 'over the age of 20' to maintain a more natural flow.",
            "Accurate and detailed. The phrase 'tell me the total number of' may be a bit verbose, but it correctly captures the query's intent and elements without technical jargon."
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "original_utterance": "Find number of pets owned by students who are older than 20."
    },
    {
        "init": [
            "How many students over the age of 20 have pets?",
            "What is the total number of students older than 20 who own pets?",
            "Count the students above 20 years of age who have pets."
        ],
        "final": [
            "How many students over the age of 20 have pets?",
            "What is the number of students older than 20 who own pets?",
            "Count the students above 20 years of age who have pets."
        ],
        "feedback": [
            "This variation is clear and accurately describes the SQL query. It uses the phrase 'over the age of 20,' which is easily understandable.",
            "Well-phrased but could be slightly more concise. The term 'total number' could simply be 'count,' though it is already quite natural.",
            "This variation is clear and concise. It appropriately conveys the requirements of the SQL query without any SQL jargon."
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "original_utterance": "How many pets are owned by students that have an age greater than 20?"
    },
    {
        "init": [
            "How many female students have dogs as pets?",
            "Count the number of female students who own a dog.",
            "What is the total number of female students with dogs?"
        ],
        "final": [
            "How many female students own dogs as pets?",
            "Count the number of female students who own a dog.",
            "What is the total number of female students with dogs?"
        ],
        "feedback": [
            "This variation is clear and directly translates the SQL query's intent. However, it could specify 'own' to clarify the relationship between students and pets.",
            "The phrase 'who own a dog' is precise and aligns perfectly with the SQL query. It's good as it is.",
            "Accurate and concise. It conveys the correct intent and avoids technical jargon. No changes needed."
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "original_utterance": "Find the number of dog pets that are raised by female students (with sex F)."
    },
    {
        "init": [
            "How many female students have dogs as pets?",
            "Can you provide the count of female students who own dogs?",
            "What is the number of female students with dog pets?"
        ],
        "final": [
            "How many female students have dogs as pets?",
            "Can you tell me how many female students own dogs?",
            "What is the number of female students with dogs?"
        ],
        "feedback": [
            "This variation is clear and accurately depicts the query's intent. No changes needed.",
            "The phrase 'provide the count of' might sound a bit formal; otherwise, it captures the essence of the query effectively, specifically focusing on the count.",
            "This variation is accurate and concise. The phrase 'dog pets' might be slightly redundant; 'dogs' is sufficient."
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "original_utterance": "How many dog pets are raised by female students?"
    },
    {
        "init": [
            "How many unique types of pets are there in the database?",
            "What is the total number of distinct pet types available?",
            "Can you count the different kinds of pets we have?"
        ],
        "final": [
            "How many unique types of pets are there?",
            "What is the total number of distinct pet types available?",
            "Can you count the different types of pets we have?"
        ],
        "feedback": [
            "Clear and accurate. However, consider removing 'in the database' for brevity.",
            "Good phrasing. The term 'distinct' aligns well with the SQL query.",
            "Accurate, but the phrase 'kinds of pets' might be slightly informal and less precise compared to 'unique types'."
        ],
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "original_utterance": "Find the number of distinct type of pets."
    },
    {
        "init": [
            "How many unique types of pets are there in the database?",
            "Can you count the different types of pets we have?",
            "Show me the number of distinct pet types recorded."
        ],
        "final": [
            "How many unique types of pets are there in the pets database?",
            "Can you count the different types of pets in the pets data?",
            "Show me the number of distinct pet types recorded in the pets database."
        ],
        "feedback": [
            "This variation accurately captures the query's intent. It would be slightly clearer to mention 'in the pets database' for specificity.",
            "Well-phrased, but it could be a bit more specific by mentioning 'in the pets data' instead of just 'we have,' to avoid ambiguity.",
            "Concise and accurate. Mentioning 'in the pets data' would enhance clarity."
        ],
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "original_utterance": "How many different types of pet are there?"
    },
    {
        "init": [
            "List the names of students who have either a cat or a dog as a pet.",
            "Can you find the distinct names of students who own cats or dogs?",
            "Show me the names of students who are pet owners of either a cat or a dog."
        ],
        "final": [
            "List the names of students who have either a cat or a dog as a pet.",
            "Can you find the unique names of students who own cats or dogs?",
            "Show me the names of students who own either a cat or a dog."
        ],
        "feedback": [
            "This variation is clear and concise, covering both pet types and the ownership relationship. No specific improvement needed.",
            "Good phrasing but 'distinct' can be omitted as natural language doesn't usually consider the SQL 'DISTINCT' keyword explicitly. Consider using 'unique' if emphasizing distinctiveness.",
            "Good, but 'pet owners of either a cat or a dog' could be simplified to improve clarity. Mentioning 'students' explicitly is a plus."
        ],
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "original_utterance": "Find the first name of students who have cat or dog pet."
    },
    {
        "init": [
            "List the names of students who have either a cat or a dog.",
            "Show the unique first names of students who own pets that are cats or dogs.",
            "Can you find the distinct names of students with either a cat or a dog?"
        ],
        "final": [
            "List the first names of students who have either a cat or a dog.",
            "Show the unique first names of students who own pets that are cats or dogs.",
            "Can you find the distinct first names of students who have either a cat or a dog?"
        ],
        "feedback": [
            "This variation accurately captures the query's intent but could be clearer by using 'first names' instead of 'names' to avoid ambiguity.",
            "Clear and precise. It uses 'unique' which directly maps to DISTINCT, and 'first names' which maps to Fname, making it a very accurate representation.",
            "This is accurate but might use simpler language such as 'students who have' instead of 'students with'. Using 'distinct first names' can be even clearer."
        ],
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "original_utterance": "What are the first names of every student who has a cat or dog as a pet?"
    },
    {
        "init": [
            "Show me the names of students who have both a cat and a dog.",
            "List the first names of students who own a cat as well as a dog.",
            "Can you find students who are owners of both cats and dogs?"
        ],
        "final": [
            "Show me the names of the students who have both a cat and a dog.",
            "List the first names of students who own both a cat and a dog.",
            "Can you find the students who are owners of both cats and dogs?"
        ],
        "feedback": [
            "The variation is clear and accurately represents the query, specifying that students have both a cat and a dog.",
            "This is a clear and precise phrasing. Specifying 'first names' is a good match for 'fname', but ensure it is clear that it is one name rather than first and last.",
            "This is a good variation focusing on the ownership of both pets, but it could be slightly improved by mentioning 'students'."
        ],
        "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "original_utterance": "Find the first name of students who have both cat and dog pets ."
    },
    {
        "init": [
            "Can you list the students who have both a cat and a dog?",
            "Which students own both cats and dogs?",
            "Find the names of students who have both cats and dogs as pets."
        ],
        "final": [
            "Can you list the students who have both a cat and a dog?",
            "Which students own both cats and dogs?",
            "Find the names of students who have both cats and dogs as pets."
        ],
        "feedback": [
            "This variation accurately captures the intent of querying for students who own both a cat and a dog. It's clear and concise.",
            "This variation is also accurate and clear. It simplifies the language by using 'own' instead of 'have,' which may be more natural.",
            "This variation is precise and includes 'as pets,' enhancing the clarity of the query's purpose. No changes needed."
        ],
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "original_utterance": "What are the students' first names who have both cats and dogs as pets?"
    },
    {
        "init": [
            "Show the majors and ages of students who do not have a cat as a pet.",
            "Which students, along with their majors and ages, do not own a cat?",
            "List the major and age of students who aren't pet owners of cats."
        ],
        "final": [
            "Show the majors and ages of students who do not have any cats as pets.",
            "Which students, along with their majors and ages, do not own any cats?",
            "List the major and age of students who do not own cats."
        ],
        "feedback": [
            "This variation is clear but could improve by specifying it's about students who do not have any cats, rather than just implying it.",
            "Good phrasing and includes the relevant details. Could improve by specifying that the pet ownership is regarding cats explicitly.",
            "Accurate, but the phrasing 'pet owners of cats' could be more straightforward and explicit. It could be simplified to avoid potential ambiguity."
        ],
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "original_utterance": "Find the major and age of students who do not have a cat pet."
    },
    {
        "init": [
            "Show the major and age of students who do not have a pet cat.",
            "Which students do not own a cat, and what are their majors and ages?",
            "List the majors and ages of students who are not cat owners."
        ],
        "final": [
            "Show the major and age of students who do not have a pet cat.",
            "Which students do not own a cat, including their majors and ages?",
            "List the majors and ages of students who do not have a cat."
        ],
        "feedback": [
            "This variation clearly represents the query's intent. The phrasing is simple and avoids technical terms, which is good.",
            "The question is clear and accurate. Adding 'do not own a cat' is precise and uses natural language. Rephrase to remove the phrase 'what are' for brevity.",
            "The variation is concise but somewhat passive. Ensure clarity by emphasizing the possession relationship further."
        ],
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "original_utterance": "What major is every student who does not own a cat as a pet, and also how old are they?"
    },
    {
        "init": [
            "Which students do not own a cat?",
            "Find the IDs of students who do not have a pet cat.",
            "Show me the student IDs of those who do not have cats as pets."
        ],
        "final": [
            "Which students do not own a cat?",
            "Find the students who do not have a pet cat.",
            "Show me the students who do not have cats as pets."
        ],
        "feedback": [
            "This variation is straightforward and clear, making it easy for non-technical users to understand.",
            "This variation is precise but mentions 'IDs' explicitly, which may not be necessary for all users. Consider using just 'students' for broader clarity.",
            "This variation is clear and accurate but slightly more verbose. It could be simplified while retaining its clarity."
        ],
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "original_utterance": "Find the id of students who do not have a cat pet."
    },
    {
        "init": [
            "Which students do not own a cat?",
            "List all students who don't have a cat as a pet.",
            "Can you provide a list of students who are not cat owners?"
        ],
        "final": [
            "Which students do not own a cat?",
            "List all students who don't have a cat as a pet.",
            "Can you provide a list of students who are not cat owners?"
        ],
        "feedback": [
            "This variation accurately reflects the SQL query without any technical jargon. It's clear and concise.",
            "Clear and matches the intent of the SQL query well. It maintains the original query's meaning and avoids SQL-specific terms.",
            "Effective and user-friendly phrasing. It accurately conveys the same logic as the SQL query."
        ],
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "original_utterance": "What are the ids of the students who do not own cats as pets?"
    },
    {
        "init": [
            "List the names and ages of students who have dogs but do not have cats.",
            "Can you provide the names and ages of students who own a dog but do not own a cat?",
            "Show me the students' names and ages who only have dogs and no cats."
        ],
        "final": [
            "List the names and ages of students who own dogs but do not have cats.",
            "Can you provide the names and ages of students who own a dog but do not own a cat?",
            "Show me the students' names and ages who only have dogs and no cats."
        ],
        "feedback": [
            "Clear and accurate, but it could be more specific by stating 'students who own dogs'.",
            "Good phrasing. It accurately translates the logic of the SQL query and is specific about pet ownership.",
            "Effective and clear. It emphasizes that students only have dogs, without explicitly using technical jargon."
        ],
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "original_utterance": "Find the first name and age of students who have a dog but do not have a cat as a pet."
    },
    {
        "init": [
            "Retrieve the first name and age of students who have dogs but no cats.",
            "Show me the names and ages of students who own only dogs and no cats.",
            "Get the first name and age details of students with dogs while excluding those with cats."
        ],
        "final": [
            "Retrieve the first name and age of students who have only dogs.",
            "Show me the names and ages of students who own dogs and no cats.",
            "Get the first name and age details of students with dogs, excluding those with cats."
        ],
        "feedback": [
            "This is a clear and concise statement. However, it could specify 'only dogs' for better accuracy.",
            "Accurate but could avoid the technical term 'only' which may be redundant. Consider simplifying the phrase for clarity.",
            "The phrasing is clear and accurate, but it could be made more fluent by avoiding redundancy with 'while excluding those with cats.'"
        ],
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "original_utterance": "What is the first name of every student who has a dog but does not have a cat?"
    },
    {
        "init": [
            "What is the type and weight of the youngest pet?",
            "Can you show me the pet type and weight of the youngest pet in the list?",
            "Find the type and weight of the pet with the smallest age."
        ],
        "final": [
            "What is the type and weight of the youngest pet by age?",
            "Can you show me the type and weight of the youngest pet?",
            "Find the type and weight of the youngest pet."
        ],
        "feedback": [
            "This variation is clear but could explicitly mention that it is the 'youngest' in terms of age.",
            "Accurate and detailed. However, it could avoid redundancy by not repeating 'pet'.",
            "Clear and concise, but 'smallest age' can be simplified to 'youngest'."
        ],
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_utterance": "Find the type and weight of the youngest pet."
    },
    {
        "init": [
            "What type of pet and weight does the youngest pet have?",
            "Show me the type and weight of the youngest pet in the list.",
            "Which pet is the youngest, and what is its weight and type?"
        ],
        "final": [
            "What is the type and weight of the youngest pet?",
            "Show me the type and weight of the youngest pet.",
            "Which pet is the youngest, and what are its type and weight?"
        ],
        "feedback": [
            "This variation is clear but could be a bit more specific. Specifying that we need both 'type' and 'weight' of the pet might help.",
            "Good phrasing, but 'in the list' might be superfluous. The term 'show me' is good, but it could be more command-like to avoid any ambiguity.",
            "Accurate and clear, but the order in which it asks for 'type' and 'weight' could be mixed up, adding a bit of confusion. Ensure the sequence matches the SELECT statement."
        ],
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_utterance": "What type of pet is the youngest animal, and how much does it weigh?"
    },
    {
        "init": [
            "Show me the IDs and weights of pets older than one year.",
            "Can you retrieve the IDs and weights of pets that are more than one year old?",
            "Find the pet IDs and their weights for pets with an age greater than one year."
        ],
        "final": [
            "Display the IDs and weights of pets older than one year.",
            "Can you get the IDs and weights of pets that are more than one year old?",
            "Find the IDs and weights of pets older than one year."
        ],
        "feedback": [
            "Clear and concise, but the phrase 'Show me' could be improved for a more formal query.",
            "Good phrasing, but 'retrieve' may imply a technical action. Consider using simpler language like 'get'.",
            "Accurate and detailed but somewhat technical. Simplifying 'for pets with an age greater than one year' could improve readability."
        ],
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "original_utterance": "Find the id and weight of all pets whose age is older than 1."
    },
    {
        "init": [
            "Show me the IDs and weights of pets that are older than one year.",
            "Can you list the pet IDs and their weights for pets above the age of one?",
            "What are the pet IDs and their weights for pets that are more than one year old?"
        ],
        "final": [
            "Show me the pet IDs and weights of pets that are older than one year.",
            "Can you list the pet IDs and their weights for pets above the age of one?",
            "What are the pet IDs and their weights for pets that are more than one year old?"
        ],
        "feedback": [
            "This variation is clear and correctly interprets the SQL query without using technical jargon.",
            "Excellent phrasing, but consider specifying 'IDs' as 'pet IDs' for full clarity. Referencing age as 'above the age of one' is good.",
            "This is clear and to the point. The phrasing 'more than one year old' is a good natural language alternative to 'pet_age > 1'."
        ],
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "original_utterance": "What is the id and weight of every pet who is older than 1?"
    },
    {
        "init": [
            "What is the average and maximum age of each type of pet?",
            "Can you provide the average and oldest age for each pet category?",
            "Show me the average and maximum ages grouped by pet type."
        ],
        "final": [
            "What is the average and maximum age of each type of pet?",
            "Can you provide the average and oldest age for each type of pet?",
            "Show me the average and maximum ages for each pet type."
        ],
        "feedback": [
            "This variation is clear and straightforward. No changes needed, but it could specifically mention 'each type of pet' for increased precision.",
            "The term 'category' is slightly ambiguous, but understandable. Consider using 'type' for clarity, as it directly maps to 'pettype' in the SQL query.",
            "Accurate and concise. However, the term 'grouped by' is close to SQL jargon. Rephrasing it might make it more natural."
        ],
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "original_utterance": "Find the average and maximum age for each type of pet."
    },
    {
        "init": [
            "What is the average and maximum age of each type of pet?",
            "Show me the average age and the oldest age for each pet type.",
            "Can you provide the average and maximum ages grouped by pet type?"
        ],
        "final": [
            "What is the average and maximum age of each type of pet?",
            "Show me the average age and the maximum age for each pet type.",
            "Can you provide the average and highest ages for each type of pet?"
        ],
        "feedback": [
            "Clear and accurate. No changes needed. The phrasing naturally encompasses both average and maximum ages for each pet type.",
            "This variation is accurate but could be more concise. The term 'oldest age' aligns well with 'max(pet_age)' but could be rephrased as 'maximum age,' similar to the query phrasing.",
            "The term 'grouped by' directly corresponds to SQL terminology. Consider rephrasing it to avoid SQL jargon for better natural language accessibility."
        ],
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "original_utterance": "What is the average and maximum age for each pet type?"
    },
    {
        "init": [
            "What is the average weight of each type of pet?",
            "Can you provide the average weight for different pet types?",
            "Show me the average weight categorized by pet type."
        ],
        "final": [
            "What is the average weight of each type of pet?",
            "Can you provide the average weight for each pet type?",
            "Show me the average weight for each type of pet."
        ],
        "feedback": [
            "This variation is clear and correctly captures the intent of the query. No major changes are needed.",
            "The phrasing is good, but the term 'different pet types' could be simplified to 'each pet type' for clarity.",
            "While accurate, the word 'categorized' might be a bit technical. Consider simplifying it to align better with natural language."
        ],
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "original_utterance": "Find the average weight for each pet type."
    },
    {
        "init": [
            "What is the average weight of each type of pet?",
            "Can you provide the average weight for different categories of pets?",
            "Show me the average weight for pets grouped by their type."
        ],
        "final": [
            "What is the average weight of each type of pet?",
            "Can you provide the average weight for each type of pet?",
            "Show me the average weight of pets by type."
        ],
        "feedback": [
            "This variation is clear and directly maps to the SQL query. It accurately captures the grouping by pet type.",
            "This variation conveys the intent but could be improved by directly mentioning 'pet type' instead of 'categories of pets' to avoid ambiguity.",
            "This variation is accurate but could be streamlined for greater brevity. The phrase 'grouped by their type' can be simplified to make it more natural."
        ],
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "original_utterance": "What is the average weight for each type of pet?"
    },
    {
        "init": [
            "List the distinct names and ages of students who own pets.",
            "Show the unique names and ages of students who have pets.",
            "Can you provide the different names and ages of students who possess pets?"
        ],
        "final": [
            "List the distinct names and ages of students who have pets.",
            "Show the unique names and ages of students who have pets.",
            "Can you provide the different names and ages of students who have pets?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the query but could mention 'have pets' instead of 'own pets' for clarity.",
            "This is a concise and clear variation. No adjustments needed.",
            "The term 'possess' might be slightly less common in everyday speech compared to 'have' or 'own.' Consider using 'have pets' for clarity."
        ],
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "original_utterance": "Find the first name and age of students who have a pet."
    },
    {
        "init": [
            "Retrieve the distinct first names and ages of students who own pets.",
            "Can you get the unique names and ages of students along with their pet ownership details?",
            "Show me a list of students with their ages who have pets, ensuring no duplicates."
        ],
        "final": [
            "Retrieve the distinct first names and ages of students who own pets.",
            "Can you get the unique first names and ages of students who have pets?",
            "Show me a distinct list of students with their ages who have pets."
        ],
        "feedback": [
            "Clear and relevant, captures the intent well. However, it could be clarified by mentioning that the pet ownership is being checked through a relationship.",
            "Verbose and slightly ambiguous since it implies that pet ownership details will also be retrieved. It should focus on the distinct names and ages of students.",
            "Concise and to the point, but lacks clarity on the distinctness of the names and ages. Adding the word 'distinct' improves precision."
        ],
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "original_utterance": "What are the different first names and ages of the students who do have pets?"
    },
    {
        "init": [
            "Which pets belong to students with the last name Smith?",
            "Find the pet IDs of students who are named Smith.",
            "Show me the pet IDs for all students whose last name is Smith."
        ],
        "final": [
            "Which pets belong to students with the last name 'Smith'?",
            "Find the pet IDs of students whose last name is 'Smith'.",
            "Show me the pets of students who have the last name 'Smith'."
        ],
        "feedback": [
            "This variation is clear and precise but could specify that it is referring to the last name.",
            "Accurate, but 'students named Smith' might imply first or last name, which could be ambiguous.",
            "This is accurate and specifies 'last name,' but mentioning 'pet IDs' directly is slightly technical."
        ],
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "original_utterance": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019."
    },
    {
        "init": [
            "What are the pet IDs for students with the last name Smith?",
            "List the pet IDs of students named Smith.",
            "Show the pet IDs for all students who have the surname Smith."
        ],
        "final": [
            "What are the pet IDs for students with the last name Smith?",
            "List the pet IDs of students with the last name Smith.",
            "Show the pet IDs for all students who have the surname Smith."
        ],
        "feedback": [
            "This variation is clear and understandable. It effectively conveys the query's purpose. No major changes needed.",
            "This phrase is brief and accurate but might be slightly ambiguous. It should specify 'students with the last name Smith' instead of 'students named Smith' to avoid potential confusion.",
            "The phrase is clear and accurate. It avoids technical terms and maintains the original query's intent. No changes needed."
        ],
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "original_utterance": "What is the id of the pet owned by the student whose last name is 'Smith'?"
    },
    {
        "init": [
            "How many pets does each student have?",
            "Show the number of pets associated with each student.",
            "Provide a count of pets owned by each student."
        ],
        "final": [
            "How many pets does each student have?",
            "Show the number of pets each student owns.",
            "Provide a count of pets owned by each student."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the query's intent. It provides a straightforward question without any technical jargon.",
            "The term 'associated' may be slightly ambiguous; consider rephrasing it to make it clearer that it refers to the students owning the pets.",
            "This variation is concise and clear. It avoids any technical SQL terms like 'GROUP BY,' making it accessible to non-technical users."
        ],
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "original_utterance": "Find the number of pets for each student who has any pet and student id."
    },
    {
        "init": [
            "How many pets does each student have?",
            "Show the number of pets owned by each student.",
            "Can you list the students along with how many pets they have?"
        ],
        "final": [
            "How many pets does each student have, along with their student ID?",
            "Show the number of pets owned by each student and include their student IDs.",
            "List the students and the number of pets they have, along with their student IDs."
        ],
        "feedback": [
            "This variation is concise and accurately captures the query's intent. However, it could specify that the student IDs are also being retrieved.",
            "This variation clearly states the query's intention, but it could explicitly mention that the student ID is part of the result.",
            "This variation is accurate and comprehensive but could be more concise."
        ],
        "query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "original_utterance": "For students who have pets , how many pets does each student have ? list their ids instead of names ."
    },
    {
        "init": [
            "Show me the names and gender of students who own more than one pet.",
            "Which students have more than one pet, along with their gender?",
            "List the first names and genders of students who have more than one pet."
        ],
        "final": [
            "Show me the first names and gender of students who own more than one pet.",
            "Which students have more than one pet, along with their gender?",
            "List the first names and genders of students who have more than one pet."
        ],
        "feedback": [
            "Clear and accurate, but 'gender' might be better than 'sex' for inclusivity. Adding 'first names' could improve specificity.",
            "Good clarity, but 'whose' could be more natural than 'who'. 'First names' instead of 'names' provides better specificity.",
            "Accurate and well-phrased, but specifying 'first names' makes it clearer."
        ],
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "original_utterance": "Find the first name and gender of student who have more than one pet."
    },
    {
        "init": [
            "List the names and sex of students who have more than one pet.",
            "Show the first names and gender of students with multiple pets.",
            "Get the names and genders of students owning more than one pet."
        ],
        "final": [
            "List the names and gender of students who have more than one pet.",
            "Show the first names and gender of students with more than one pet.",
            "Get the names and genders of students owning more than one pet."
        ],
        "feedback": [
            "This variation clearly conveys the intent but could use 'gender' instead of 'sex' for a more natural phrasing.",
            "The variation is accurate, but the use of 'gender' again would be more natural. Including 'with more than one pet' may avoid any ambiguity.",
            "This is a concise and accurate variation, and it's already clear. The term 'genders' instead of 'sex' makes it more natural."
        ],
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "original_utterance": "What is the first name and gender of the all the students who have more than one pet?"
    },
    {
        "init": [
            "Show me the last names of students who have a 3-year-old cat.",
            "Which students have a cat that is 3 years old?",
            "Find the last names of students with a 3-year-old cat."
        ],
        "final": [
            "Show me the last names of students who have a 3-year-old cat.",
            "Which students have a 3-year-old cat? (List their last names, please.)",
            "Find the last names of students with a 3-year-old cat."
        ],
        "feedback": [
            "Clear and precise. It accurately captures the query's intent without any SQL-specific jargon. No significant improvements necessary.",
            "This variation is also clear but could specify exactly which information (last names) is being sought for better accuracy.",
            "Accurate and concise. Similar to Variation 1, it avoids technical SQL terms and effectively communicates the query's intent."
        ],
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "original_utterance": "Find the last name of the student who has a cat that is age 3."
    },
    {
        "init": [
            "List the last names of students who have a 3-year-old cat.",
            "Which students own a cat that is three years old?",
            "Show me the students with last names who own 3-year-old cats."
        ],
        "final": [
            "List the last names of students who have a 3-year-old cat.",
            "Which students have a 3-year-old cat, and what are their last names?",
            "Show me the last names of students who own 3-year-old cats."
        ],
        "feedback": [
            "This variation clearly conveys the query's intent and avoids technical jargon. It is detailed and accurate.",
            "This variation is concise and clear, but it lacks the specific detail that the result should be student last names.",
            "The phrasing is accurate and clear. However, the wording 'students with last names' could be smoother if rephrased to specify that it lists the students by their last names."
        ],
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "original_utterance": "What is the last name of the student who has a cat that is 3 years old?"
    },
    {
        "init": [
            "What is the average age of students who do not have pets?",
            "Calculate the average age of students who are not pet owners.",
            "Find the mean age of students who do not own any pets."
        ],
        "final": [
            "What is the average age of students who do not have pets?",
            "Calculate the average age of students excluding those who are pet owners.",
            "Find the mean age of students who do not own any pets."
        ],
        "feedback": [
            "This variation is clear and accurately captures the query's intent. No ambiguities are present.",
            "Good phrasing, but it might be enhanced by explicitly excluding pet owners with the word 'excluding.'",
            "Accurate and concise. No changes needed. It avoids technical jargon effectively."
        ],
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "original_utterance": "Find the average age of students who do not have any pet ."
    },
    {
        "init": [
            "What is the average age of students who do not own a pet?",
            "Calculate the average age of students who don't have a pet.",
            "Find the average age of students that are not pet owners."
        ],
        "final": [
            "What is the average age of students who do not own a pet?",
            "Find the average age of students who don't have a pet.",
            "Find the average age of students that are not pet owners."
        ],
        "feedback": [
            "This variation is clear and maintains the intent of the SQL query. No technical jargon is present. No change needed.",
            "Accurate but slightly less fluent due to the phrase 'Calculate the average age.' Consider rephrasing for natural flow.",
            "Clear and concise. Avoids technical terms and maintains the original query's intent. No change needed."
        ],
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "original_utterance": "What is the average age for all students who do not own any pets ?"
    },
    {
        "init": [
            "How many continents are there?",
            "Can you tell me the total number of continents?",
            "What is the count of continents in the world?"
        ],
        "final": [
            "How many continents are there?",
            "Can you tell me the total number of continents?",
            "What is the count of continents?"
        ],
        "feedback": [
            "This variation is clear and concise. No changes needed.",
            "This variation is clear and correctly aligned with the original query. No changes needed.",
            "This variation is accurate but could be slightly improved for natural flow by removing 'in the world,' which is understood in the context."
        ],
        "query": "SELECT count(*) FROM CONTINENTS;",
        "original_utterance": "How many continents are there?"
    },
    {
        "init": [
            "How many continents are there?",
            "Can you tell me the total number of continents?",
            "What is the count of continents in the world?"
        ],
        "final": [
            "How many continents are there?",
            "Can you tell me the number of continents?",
            "What is the count of continents?"
        ],
        "feedback": [
            "Clear and concise. No changes needed.",
            "Good phrasing, but 'total number' could be shortened for brevity.",
            "Accurate, although specifying 'in the world' is redundant and can be removed for brevity."
        ],
        "query": "SELECT count(*) FROM CONTINENTS;",
        "original_utterance": "What is the number of continents?"
    },
    {
        "init": [
            "How many countries are there in each continent, and what are the continent IDs and names?",
            "Can you provide the count of countries for each continent, including their IDs and names?",
            "List the number of countries per continent along with their IDs and continent names."
        ],
        "final": [
            "How many countries are there in each continent, along with their IDs and names?",
            "Can you provide the number of countries per continent including their IDs and names?",
            "List the number of countries for each continent, along with their IDs and names."
        ],
        "feedback": [
            "This variation is clear but could be more concise. It includes all requested information but could phrase groupings more naturally.",
            "Clear and direct. Consider simplifying the phrase to make it even more conversational.",
            "Well-phrased and concise. Keeps the meaning of the original SQL query intact without unnecessary complexity. Could slightly emphasize 'each' to avoid ambiguity."
        ],
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "original_utterance": "How many countries does each continent have? List the continent id, continent name and the number of countries."
    },
    {
        "init": [
            "Can you provide the count of countries in each continent along with their continent IDs and names?",
            "List all continents along with their IDs and the number of countries in each.",
            "Give me the continent IDs, continent names, and the total number of countries per continent."
        ],
        "final": [
            "Can you provide the count of countries in each continent along with their continent IDs and names from the database?",
            "List all continents along with their IDs and the number of countries in each from the database.",
            "Give me the continent IDs, continent names, and the total number of countries per continent."
        ],
        "feedback": [
            "Clear and concise but could be improved by adding 'from the database' to make it slightly more explicit that we are querying a database.",
            "Accurate and to the point, but including 'from the database' would make it clearer the context is SQL querying.",
            "This variation is precise and does not need any SQL-specific jargon. It's nicely detailed."
        ],
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "original_utterance": "For each continent, list its id, name, and how many countries it has?"
    },
    {
        "init": [
            "How many countries are there?",
            "Can you tell me the total number of countries?",
            "What is the count of all the countries?"
        ],
        "final": [
            "How many countries are there?",
            "Can you tell me the total number of countries currently?",
            "What is the total count of all the countries?"
        ],
        "feedback": [
            "This variation is concise and clear. No changes needed.",
            "Good phrasing, but adding the word 'currently' might make it more precise.",
            "Accurate and understandable, but 'total count' could make it slightly clearer."
        ],
        "query": "SELECT count(*) FROM COUNTRIES;",
        "original_utterance": "How many countries are listed?"
    },
    {
        "init": [
            "How many countries are listed in the database?",
            "What is the total number of countries recorded?",
            "Can you provide the count of all countries available?"
        ],
        "final": [
            "How many countries are listed in the database?",
            "What is the total number of countries available?",
            "Can you provide the count of all countries available?"
        ],
        "feedback": [
            "Clear and straightforward. No specific improvements needed.",
            "Good phrasing, but 'recorded' might imply an action; 'listed' or 'available' could be more neutral.",
            "Accurate and clear. The use of 'available' is appropriate here and avoids technical jargon."
        ],
        "query": "SELECT count(*) FROM COUNTRIES;",
        "original_utterance": "How many countries exist?"
    },
    {
        "init": [
            "List all car makers along with their IDs and the count of models they produce.",
            "Show the full names and IDs of car makers and the number of models per maker.",
            "Get the names, IDs, and the total number of models for each car maker."
        ],
        "final": [
            "List all car makers along with their IDs and the count of car models they produce.",
            "Show the full names and IDs of car makers and the number of car models per maker.",
            "Get the names, IDs, and the total number of car models for each car maker."
        ],
        "feedback": [
            "This variation clearly captures the SQL query's intent but could be more precise by specifying the counting of models. Otherwise, it is accurate.",
            "This is a concise and clear variation but could mention 'car models' for extra clarity to avoid confusion with other types of models.",
            "This variation is straightforward and mentions 'total number of models', which is good. However, it could be slightly more precise by saying 'car models' instead of just 'models'."
        ],
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "original_utterance": "How many models does each car maker produce? List maker full name, id and the number."
    },
    {
        "init": [
            "Give me the full name, ID, and the count of models for each car maker.",
            "Fetch the full name, ID, and the number of models from each car manufacturer.",
            "List the full name, ID, and the number of models produced by each car maker."
        ],
        "final": [
            "Give me the full name, ID, and the count of models for each car maker.",
            "Fetch the full name, ID, and the number of models for each car maker.",
            "List the full name, ID, and the number of models produced by each car maker."
        ],
        "feedback": [
            "Clear and concise. 'Give me' is user-friendly language. It correctly translates the join and aggregation operations.",
            "Good phrasing. However, 'from each car manufacturer' might be more concise if shortened to 'for each car maker.' It accurately reflects the SQL query logic.",
            "Accurate and precise. It avoids technical jargon while reflecting the query intent. No changes needed."
        ],
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "original_utterance": "What is the full name of each car maker, along with its id and how many models it produces?"
    },
    {
        "init": [
            "Which car model has the lowest horsepower?",
            "Find the car model with the least horsepower in the database.",
            "What is the car model with the minimum horsepower available?"
        ],
        "final": [
            "Which car model in the database has the lowest horsepower?",
            "Find the car model with the least horsepower in the database.",
            "What is the car model with the minimum horsepower in the database?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query. It might benefit from a more explicit mention of the database context.",
            "Good phrasing but including 'in the database' could make it clearer that the query is searching through a database.",
            "Accurate and concise. However, the term 'available' may not be necessary and could be replaced with something confirming the context is a database."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "original_utterance": "Which model of the car has the minimum horsepower?"
    },
    {
        "init": [
            "What is the car model with the lowest horsepower?",
            "Can you find the car model with the least horsepower?",
            "Show me the model of the car with the minimum horsepower."
        ],
        "final": [
            "What is the car model with the lowest horsepower?",
            "Can you find the car model with the lowest horsepower?",
            "Show me the model of the car with the lowest horsepower."
        ],
        "feedback": [
            "This variation is clear and accurate but could explicitly mention 'car' before 'horsepower' to ensure it is understood.",
            "Good phrasing, but 'least' could be ambiguous. Consider using 'lowest' for clarity.",
            "Well-phrased, but 'minimum' might be more technical. 'Lowest' is typically more conversational."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "original_utterance": "What is the model of the car with the smallest amount of horsepower?"
    },
    {
        "init": [
            "Which car models have a weight below the average weight of all cars?",
            "List the car models that are lighter than the average weight.",
            "Show me the car models with a weight less than the average weight of available cars."
        ],
        "final": [
            "Which car models have a weight below the average weight of all cars?",
            "List the car models that are lighter than the average weight.",
            "Show me the car models with a weight less than the average weight."
        ],
        "feedback": [
            "This variation is clear and captures the query's intent well. Consider specifying 'car models' explicitly to avoid ambiguity about 'which models'.",
            "This variation is succinct and accurate. However, adding 'car models are' can make it slightly more fluent.",
            "Good phrasing, but it could be improved by avoiding the additional clause 'of available cars', which is implied and might introduce unnecessary complexity."
        ],
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "original_utterance": "Find the model of the car whose weight is below the average weight."
    },
    {
        "init": [
            "Which car models have a weight below the average weight of all cars?",
            "List the car models that weigh less than the average weight of cars in the database.",
            "Can you provide a list of car models whose weights are under the average weight of all cars?"
        ],
        "final": [
            "Which car models have a weight under the average weight of all cars?",
            "List the car models that weigh less than the average weight of cars.",
            "Can you provide a list of car models with below-average weights?"
        ],
        "feedback": [
            "Clear and concise, but could be simplified for non-technical users by removing 'below' and replacing it with 'under'.",
            "Good phrasing, but the use of 'database' might be unnecessary; simplifying it to 'cars' may improve natural readability.",
            "Accurate but slightly verbose. Consider shortening 'under the average weight of all cars' to 'below the average car weight' for brevity."
        ],
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "original_utterance": "What is the model for the car with a weight smaller than the average?"
    },
    {
        "init": [
            "Which car makers produced distinct models available in the year 1970?",
            "List all unique car manufacturers that had cars in the market in 1970.",
            "Can you find all the different car makers who had models released in 1970?"
        ],
        "final": [
            "Which car makers had distinct models available in the year 1970?",
            "List all unique car manufacturers that had cars in the market in 1970.",
            "Can you find all the different car makers who had models available in 1970?"
        ],
        "feedback": [
            "This variation is clear but could specify 'produced' as it might imply manufacturing rather than availability in 1970. Consider rephrasing for clarity.",
            "Good phrasing and clear intent. Using 'unique car manufacturers' aligns well with the 'DISTINCT' clause in SQL. No major changes needed.",
            "Accurate but could be more concise. The term 'released' might be ambiguous. Instead, use 'available' to clearly indicate the presence of their models in 1970."
        ],
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "original_utterance": "Find the name of the makers that produced some cars in the year of 1970?"
    },
    {
        "init": [
            "Show me the distinct car makers that had models in the year 1970.",
            "Which car manufacturers produced models in the year 1970?",
            "List all unique car makers with models from 1970."
        ],
        "final": [
            "Show me the car makers that had distinct models in 1970.",
            "Which car manufacturers produced models in 1970?",
            "List all unique car makers with models from 1970."
        ],
        "feedback": [
            "This variation captures the essence of the original query but could be slightly simplified for clarity.",
            "This is precise and directly asks for car manufacturers, which is easy to understand.",
            "Accurate and clear. It effectively avoids any technical jargon, making it very user-friendly."
        ],
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "original_utterance": "What is the name of the different car makers who produced a car in 1970?"
    },
    {
        "init": [
            "Show me the make and year of the car with the earliest year in the dataset.",
            "Which car make and year correspond to the oldest year recorded in the database?",
            "Find the make of the car along with its year that has the earliest recorded year in the dataset."
        ],
        "final": [
            "Show me the make and year of the car with the earliest year in the dataset.",
            "Which car make and year correspond to the oldest year from the dataset?",
            "Find the make of the car and year that has the earliest recorded year in the dataset."
        ],
        "feedback": [
            "Clear and concise. It captures the essence of the SQL query without the need for revisions.",
            "The phrasing 'oldest year recorded in the database' might be slightly ambiguous. Mentioning 'from the dataset' could improve clarity.",
            "Well-formed and clear. The phrase 'along with its year' could be simplified to just 'and year' to enhance brevity."
        ],
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "original_utterance": "Find the make and production time of the cars that were produced in the earliest year?"
    },
    {
        "init": [
            "Show me the make and year of the cars with the earliest year in the dataset.",
            "What are the make and year details for the oldest cars in the database?",
            "Find the make and year of cars that have the earliest manufacturing date."
        ],
        "final": [
            "Show me the make and year of the cars with the earliest year recorded in the dataset.",
            "What are the make and year details for the oldest cars in the database?",
            "Find the make and year of cars that have the earliest manufacturing date in the records."
        ],
        "feedback": [
            "This variation is clear but could be more explicit in indicating which dataset it's referring to. It could also mention that 'earliest year' means the minimum year.",
            "The term 'oldest cars' is clear and accurate. It maintains the intent, but specifying 'from the database' might add better context.",
            "The phrasing 'earliest manufacturing date' is clear and removes ambiguity. It maintains good natural language flow without technical jargon."
        ],
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "original_utterance": "What is the maker of the carr produced in the earliest year and what year was it?"
    },
    {
        "init": [
            "List all unique car models from after the year 1980.",
            "Show distinct car models produced after 1980.",
            "Which car models, manufactured after 1980, are unique?"
        ],
        "final": [
            "List all unique car models in the database from after the year 1980.",
            "Show distinct car models provided in the list that were produced after 1980.",
            "Which distinct car models were manufactured after 1980?"
        ],
        "feedback": [
            "This variation is clear but could emphasize that we are considering models from a particular list. Adding 'in the database' might help users understand the scope.",
            "This is a concise and clear variation. However, ensuring it specifies 'provided in the list' can add precision.",
            "The phrase 'are unique' is slightly redundant since 'unique' and 'distinct' can be used interchangeably in natural language. Using 'distinct' would be more precise."
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "original_utterance": "Which distinct car models are the produced after 1980?"
    },
    {
        "init": [
            "Show me the distinct car models from the model list for cars made after 1980.",
            "Which unique car models are listed in the model list for cars manufactured post-1980?",
            "Can you provide a list of distinct car models from the model list for vehicles produced after the year 1980?"
        ],
        "final": [
            "Show me the unique car models for cars made after 1980.",
            "Which car models are listed for cars manufactured after 1980?",
            "Can you provide a list of car models for vehicles produced after 1980?"
        ],
        "feedback": [
            "This variation is clear but could be improved by specifying the relationship between the tables in a more natural manner. The term 'model list' may be confusing and can be rephrased.",
            "Good phrasing and clear intent. 'Manufactured post-1980' is accurate and naturally phrased. However, 'listed in the model list' might be redundant.",
            "Accurate and concise, but could streamline by avoiding redundancy. Adding 'produced' is a good choice, but 'distinct car models' might be overemphasized."
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "original_utterance": "What are the different models for the cards produced after 1980?"
    },
    {
        "init": [
            "How many car makers are there per continent?",
            "Show the count of car makers in each continent.",
            "List the number of car manufacturers grouped by continent."
        ],
        "final": [
            "How many car manufacturers are there per continent?",
            "Show the number of car manufacturers in each continent.",
            "List the number of car manufacturers grouped by continent."
        ],
        "feedback": [
            "This variation is straightforward and clear, but it refers to 'car makers', which might sometimes be confused with broader terms. Consider using 'car manufacturers' for more clarity.",
            "Clear and precise, but it could avoid 'count' which is SQL-specific. Use 'number' instead of 'count' for better readability.",
            "Accurate and clear. The term 'grouped by continent' aligns well with the 'GROUP BY' clause but ensure non-technical users understand it."
        ],
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "original_utterance": "How many car makers are there in each continents? List the continent name and the count."
    },
    {
        "init": [
            "How many car makers are there in each continent?",
            "Show the count of car manufacturers grouped by continent.",
            "Can you list the number of car makers distributed across different continents?"
        ],
        "final": [
            "How many car makers are there in each continent?",
            "Show the count of car makers per continent.",
            "Can you list the number of car makers in each continent?"
        ],
        "feedback": [
            "The phrasing is clear but doesn't mention explicitly it's counting car makers, which may lead to ambiguity for some users.",
            "This variation is accurate and concise but could be simplified by directly asking for the count of car makers per continent. The term 'grouped' is useful but not necessary in a natural query.",
            "This is clear but could be improved by explicitly stating it's a count or number of car makers as opposed to other types of distributions."
        ],
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "original_utterance": "What is the name of each continent and how many car makers are there in each one?"
    },
    {
        "init": [
            "Which country manufactures the most cars in the dataset?",
            "What is the country with the highest number of car makers?",
            "From which country do the majority of car manufacturers originate?"
        ],
        "final": [
            "Which country has the highest number of car manufacturers in the dataset?",
            "What is the country with the highest number of car makers?",
            "From which country do most car manufacturers in the dataset originate?"
        ],
        "feedback": [
            "Clear and accurate. However, using 'manufactures the most cars' might imply actual car production rather than just the number of manufacturers.",
            "Good phrasing and accurately reflects the SQL query's intent. It is clear and precise, avoiding any confusion.",
            "Well-crafted and conveys the same logic as the SQL query. The term 'originate' might be slightly ambiguous but generally understood."
        ],
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "original_utterance": "Which of the countries has the most car makers? List the country name."
    },
    {
        "init": [
            "Which country has the highest number of car makers?",
            "Find the country with the most car manufacturers.",
            "Show me the country that produces the most car brands."
        ],
        "final": [
            "Which country has the most car brands?",
            "Find the country with the highest number of car brands.",
            "Show me the country that has the largest number of car manufacturers."
        ],
        "feedback": [
            "This variation is clear and captures the intent accurately. However, it could be improved by avoiding the term 'number of car makers' which refers directly to the grouping and counting in SQL.",
            "The phrasing is good and natural. However, 'manufacturers' might imply actual factories rather than brands or companies, which might cause some confusion.",
            "This variation is concise but could more explicitly mention the inference from a count of entities. Also, 'produces' might be misleading as it connotes manufacturing rather than origin."
        ],
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "original_utterance": "What is the name of the country with the most car makers?"
    },
    {
        "init": [
            "How many car models does each car maker have?",
            "Can you provide the total number of models for each car maker?",
            "List the count of car models along with the name of each car manufacturer."
        ],
        "final": [
            "How many car models does each car maker have?",
            "Can you provide the total number of models for each car maker along with their names?",
            "Show the count of car models for each car manufacturer with their names."
        ],
        "feedback": [
            "This variation is clear and directly matches the intent of the SQL query. It combines both the counting of models and mentioning each car maker.",
            "Accurate but could be improved by adding the term 'along with their names' to more closely match the query's output, which includes car maker's names.",
            "While accurate, it is a bit formal. Consider rephrasing to be more conversational."
        ],
        "query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "original_utterance": "How many car models are produced by each maker ? Only list the count and the maker full name ."
    },
    {
        "init": [
            "How many car models does each car maker have, and what are their names and IDs?",
            "List the count of models along with the full names and IDs for each car manufacturer.",
            "Provide the number of car models for each car maker, including their names and IDs."
        ],
        "final": [
            "How many car models does each car maker have, and what are their names and identification numbers?",
            "Can you provide the number of models, along with the full names and identification numbers, for each car manufacturer?",
            "Provide the number of car models for each car maker, along with their names and identification numbers."
        ],
        "feedback": [
            "This variation is clear and intuitive. However, specifying 'IDs' might be confusing to some users; it might be better to replace that with 'identification numbers'.",
            "Well-phrased but the direct language 'list the count' might feel too technical. Suggest making it more natural.",
            "Clear and user-friendly. No significant changes needed, but rephrasing 'including their names and IDs' could improve the natural flow."
        ],
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "original_utterance": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?"
    },
    {
        "init": [
            "What is the acceleration value for the 'amc hornet sportabout (sw)' from the car data?",
            "Can you retrieve the acceleration for the car model named 'amc hornet sportabout (sw)'?",
            "Find the acceleration information for the 'amc hornet sportabout (sw)' from the dataset."
        ],
        "final": [
            "What is the acceleration value for the 'amc hornet sportabout (sw)' from the car data?",
            "Can you retrieve the acceleration for the car model named 'amc hornet sportabout (sw)'?",
            "Find the acceleration information for the 'amc hornet sportabout (sw)' from the dataset."
        ],
        "feedback": [
            "This variation is clear and includes all necessary details. It implicitly conveys querying acceleration from the data.",
            "Accurate phrasing. The structure 'car model named' helps ensure the model name is not misunderstood. No significant changes are needed.",
            "Concise and to the point. It maintains the meaning, but specifying 'from the dataset' is good practice and avoids SQL-specific terminology."
        ],
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "original_utterance": "What is the accelerate of the car make amc hornet sportabout (sw)?"
    },
    {
        "init": [
            "What is the acceleration of the AMC Hornet Sportabout (SW)?",
            "Can you provide the acceleration data for the AMC Hornet Sportabout (SW)?",
            "Find the acceleration time for the AMC Hornet Sportabout (SW)."
        ],
        "final": [
            "What is the acceleration of the car model AMC Hornet Sportabout (SW)?",
            "Can you show the acceleration data for the car model AMC Hornet Sportabout (SW)?",
            "Find the acceleration time for the car model AMC Hornet Sportabout (SW)."
        ],
        "feedback": [
            "Clear and concise. However, it could be improved by explicitly mentioning 'the car.'",
            "Good phrasing, but 'provide' could be simplified to 'show.' There is no mention of 'car' which could make it clearer.",
            "Accurate and direct. Could be improved by specifying 'the car model' for clarity."
        ],
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "original_utterance": "How much does the car accelerate that makes amc hornet sportabout (sw)?"
    },
    {
        "init": [
            "How many car makers are there in France?",
            "Can you provide the number of car manufacturers based in France?",
            "Find the total count of car makers originating from France."
        ],
        "final": [
            "How many car makers are there in France?",
            "Can you provide the number of car manufacturers located in France?",
            "Find the total count of car makers from France."
        ],
        "feedback": [
            "This variation is clear and concise, though capitalizing 'France' would enhance readability. No SQL terminology is present.",
            "The phrasing could be slightly more natural. Consider using 'located' instead of 'based'. Clarity and adherence to intent are intact.",
            "This variation is also accurate but could be shortened without losing meaning. The word 'originating' could be simplified for better readability."
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "original_utterance": "How many car makers are there in france?"
    },
    {
        "init": [
            "How many car makers are there in France?",
            "Can you count the number of car manufacturers based in France?",
            "Find the total number of car makers whose country is France."
        ],
        "final": [
            "How many car makers are there in France?",
            "Can you count the number of car manufacturers in France?",
            "Find the total number of car makers in France."
        ],
        "feedback": [
            "This variation is clear and accurately represents the intent of the SQL query. No improvements needed.",
            "Good phrasing, but the word 'based' might introduce ambiguity. Consider rephrasing to maintain clarity.",
            "Accurate but slightly verbose. Simplifying the wording can improve readability."
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "original_utterance": "What is the number of makers of care in France?"
    },
    {
        "init": [
            "How many car models are from makers based in the USA?",
            "Count the number of car models from manufacturers located in the USA.",
            "Can you tell me the total number of car models from car makers in the USA?"
        ],
        "final": [
            "How many car models are from manufacturers based in the USA?",
            "Count the number of car models from manufacturers located in the USA.",
            "What is the total number of car models from car makers based in the USA?"
        ],
        "feedback": [
            "This variation is clear and effectively communicates the query's intent without any SQL jargon. It might avoid confusion by mentioning 'makers based in the USA' explicitly.",
            "This is a direct and clear phrasing. Specifying 'located in the USA' clarifies the intent but ensure it doesn't sound too technical.",
            "Good and detailed phrasing. It ensures clarity without becoming overly technical but could be slightly more concise."
        ],
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "original_utterance": "How many car models are produced in the usa?"
    },
    {
        "init": [
            "How many car models are made by manufacturers from the USA?",
            "Can you provide the number of car models produced by American car makers?",
            "Find the total count of car models from manufacturers based in the United States."
        ],
        "final": [
            "How many car models are made by manufacturers from the USA?",
            "Can you provide the number of car models produced by car makers from the USA?",
            "Find the total count of car models from manufacturers based in the United States."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent of the original SQL query. No changes needed.",
            "This is a good, clear variation. To align more closely with natural language, it could specify 'from the USA' rather than 'American' car makers, for a direct match with the query.",
            "This variation accurately reflects the query and makes sense to users unfamiliar with SQL. No changes needed."
        ],
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "original_utterance": "What is the count of the car models produced in the United States?"
    },
    {
        "init": [
            "What is the average miles per gallon for cars with 4 cylinders?",
            "Can you tell me the average fuel efficiency of 4-cylinder cars?",
            "Find the average MPG for vehicles that have 4 cylinders."
        ],
        "final": [
            "What is the average miles per gallon for cars with 4 cylinders?",
            "Can you tell me the average miles per gallon for 4-cylinder cars?",
            "Find the average miles per gallon for vehicles that have 4 cylinders."
        ],
        "feedback": [
            "Clear and accurate. No technical jargon used, making it easily understandable.",
            "Good phrasing, but 'fuel efficiency' might be less precise than specifying 'miles per gallon.'",
            "Accurate and concise. The use of 'MPG' is appropriate and widely understood, although spelling out 'miles per gallon' could remove any ambiguity."
        ],
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "original_utterance": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?"
    },
    {
        "init": [
            "What is the average miles per gallon for cars with four cylinders?",
            "Can you provide the mean mpg for cars that have 4 cylinders?",
            "Find the average fuel efficiency in terms of mpg for cars with 4-cylinder engines."
        ],
        "final": [
            "What is the average miles per gallon for cars with four cylinders?",
            "Can you provide the average mpg for cars that have 4 cylinders?",
            "Find the average miles per gallon for cars with 4-cylinder engines."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the query\u2019s intent. No changes needed.",
            "The phrasing is good but could replace 'mean' with 'average' for better natural language flow.",
            "This variation is accurate, but using simpler language such as 'miles per gallon' instead of 'fuel efficiency' would be more accessible for all users."
        ],
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "original_utterance": "What is the average miles per gallon of all the cards with 4 cylinders?"
    },
    {
        "init": [
            "What is the minimum weight of cars with 8 cylinders from the year 1974?",
            "Find the lightest car from 1974 that has 8 cylinders.",
            "Can you show me the car with the least weight among those with 8 cylinders from 1974?"
        ],
        "final": [
            "What is the lightest car with 8 cylinders from the year 1974?",
            "Find the lightest car from 1974 that has 8 cylinders.",
            "Can you show me the lightest car with 8 cylinders from 1974?"
        ],
        "feedback": [
            "Clear and accurate, but 'minimum weight' might be simplified for clarity.",
            "Good phrasing, straightforward and concise.",
            "Well-phrased but could be simplified slightly for better natural language flow."
        ],
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "original_utterance": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?"
    },
    {
        "init": [
            "What is the minimum weight of cars with 8 cylinders from the year 1974?",
            "Can you find the lightest car that has 8 cylinders and was made in 1974?",
            "Show me the car with the lowest weight among those with 8 cylinders made in 1974."
        ],
        "final": [
            "What is the minimum weight of cars that have 8 cylinders from the year 1974?",
            "Can you show me the lightest car that has 8 cylinders and was made in 1974?",
            "Show me the car with the lowest weight that has 8 cylinders from 1974."
        ],
        "feedback": [
            "This variation clearly specifies the criteria but could be slightly more conversational.",
            "Good variation, but could replace 'find' with 'show' for a more natural flow.",
            "Accurate and clear. No ambiguities, but changing 'among those' may make it more fluent."
        ],
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "original_utterance": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?"
    },
    {
        "init": [
            "Show me the list of makers and their models.",
            "Can you provide a list of all makers and their corresponding models?",
            "Fetch the maker and model information from the list of models."
        ],
        "final": [
            "Show the makers and their models.",
            "Can you provide a list of all makers and their corresponding models?",
            "Provide the maker and model information."
        ],
        "feedback": [
            "This variation is clear and covers the essential elements of the SQL query. However, 'list of makers and their models' might be simplified by removing 'list' as it's understood in context.",
            "Good phrasing, precise and directly aligned with the intent of the original query. It avoids technical jargon and focuses on the key elements, 'makers' and 'models.'",
            "While accurate, 'fetch' is a bit technical. Using simpler language like 'Show' or 'Provide' would make it more natural. Also, 'from the list of models' is redundant as 'maker and model information' already implies the source."
        ],
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "original_utterance": "What are all the makers and models?"
    },
    {
        "init": [
            "Show me a list of makers and their models.",
            "Can you provide the makers and their corresponding models?",
            "List all the makers along with their models."
        ],
        "final": [
            "Show me a list of all makers and their models.",
            "Can you provide the makers and their corresponding models?",
            "List all the makers along with their models."
        ],
        "feedback": [
            "This variation accurately conveys the intent of the query but could be more specific by stating 'all makers and their models'.",
            "Clear and precise. The term 'corresponding models' effectively captures the pairing of makers and models without using technical jargon.",
            "Good phrasing; it's clear and succinct. No mention of technical SQL terms, which is appropriate."
        ],
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "original_utterance": "What are the makers and models?"
    },
    {
        "init": [
            "Which countries have at least one car maker?",
            "List all countries that have one or more car manufacturers.",
            "Show the names and IDs of countries with at least one car maker associated with them."
        ],
        "final": [
            "Which countries have at least one car maker?",
            "List the names and IDs of all countries that have one or more car manufacturers.",
            "Show the names and IDs of countries with at least one car maker."
        ],
        "feedback": [
            "The variation is accurate and clear. It directly conveys the intent of finding countries with car makers. No improvements needed.",
            "This variation is well-phrased but could explicitly state it is listing the name and ID of the countries for more precision.",
            "The variation accurately captures the query's requirement but could be made more concise by removing 'associated with them' at the end."
        ],
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "original_utterance": "What are the countries having at least one car maker? List name and id."
    },
    {
        "init": [
            "List all countries that have at least one car maker, including their names and IDs.",
            "Show me the names and IDs of countries that are associated with at least one car manufacturer.",
            "Can you provide the list of countries with their IDs where there is at least one car maker present?"
        ],
        "final": [
            "List all countries that have at least one car maker, including their names and IDs.",
            "Show me the names and IDs of countries with at least one car manufacturer.",
            "Can you provide the list of countries and their IDs where at least one car maker is present?"
        ],
        "feedback": [
            "This is clear and accurate. The use of 'at least one car maker' is precise and the structure mirrors the original query.",
            "Good understanding and clear articulation. The term 'associated with' could be more straightforward but still maintains the intent accurately.",
            "This variation is also clear and correct. The phrase 'where there is at least one car maker present' accurately captures the SQL query\u2019s intent."
        ],
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "original_utterance": "What are the names and ids of all countries with at least one car maker?"
    },
    {
        "init": [
            "How many cars have a horsepower greater than 150?",
            "Count the number of cars with horsepower exceeding 150.",
            "What is the total number of cars with more than 150 horsepower?"
        ],
        "final": [
            "How many cars have more than 150 horsepower?",
            "Count the cars with horsepower over 150.",
            "How many cars have more than 150 horsepower?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent of the query, but it can be slightly more conversational.",
            "The phrasing is accurate but can be improved by simplifying the expression to make it more natural.",
            "This is a clear and concise variation that maintains the original query's intent. However, the word 'total' isn't necessary and can be omitted to simplify the utterance."
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "original_utterance": "What is the number of the cars with horsepower more than 150?"
    },
    {
        "init": [
            "How many cars have a horsepower greater than 150?",
            "Show me the total number of cars with more than 150 horsepower.",
            "Can you count the cars that have horsepower over 150?"
        ],
        "final": [
            "How many cars have a horsepower greater than 150?",
            "Give me the total number of cars with more than 150 horsepower.",
            "Count the cars that have horsepower over 150."
        ],
        "feedback": [
            "Clear and precise. No areas for improvement identified.",
            "Good phrasing, but the word 'show' may imply a list rather than a count. Consider modifying to avoid ambiguity.",
            "Accurate and to the point, but the word 'can' might be unnecessary for a more direct question."
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "original_utterance": "What is the number of cars with a horsepower greater than 150?"
    },
    {
        "init": [
            "What is the average weight of cars for each year?",
            "Can you provide the average weight of cars, categorized by year?",
            "Show me the average car weight grouped by the year of manufacture."
        ],
        "final": [
            "What is the average weight of cars for each year?",
            "Can you provide the average weight of cars, grouped by year?",
            "Show me the average car weight by year."
        ],
        "feedback": [
            "The variation is clear and accurate. The term 'for each year' precisely corresponds to the GROUP BY YEAR in the SQL query. No changes are needed.",
            "The phrasing is clear, but 'categorized by year' is slightly more technical. 'Grouped by year' would be better to avoid jargon and ensure clarity.",
            "This variation is accurate, but the phrase 'grouped by the year of manufacture' might be ambiguous. Simplifying 'year of manufacture' to just 'year' would increase clarity."
        ],
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "original_utterance": "What is the average weight of cars each year?"
    },
    {
        "init": [
            "What is the average weight of cars for each year?",
            "Can you provide the yearly average weight of cars?",
            "Find the average weight of cars broken down by year."
        ],
        "final": [
            "What is the average weight of cars for each year?",
            "Can you provide the yearly average weight of cars?",
            "Find the average weight of cars by year."
        ],
        "feedback": [
            "Clear and direct, this variation accurately captures the query's intent. However, adding 'for each year' might make it more explicit.",
            "This variation is concise and relevant. The term 'yearly' effectively indicates the GROUP BY clause usage, making it a strong option.",
            "Uses 'broken down by year' which is clear but could be simplified to improve natural language flow by avoiding a more complex phrasing."
        ],
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "original_utterance": "What is the average weight and year for each year?"
    },
    {
        "init": [
            "List the countries in Europe that have three or more car makers.",
            "Which countries in Europe have at least three car manufacturers?",
            "Show me the European countries where there are three or more car brands."
        ],
        "final": [
            "List the European countries that have three or more car makers.",
            "Which countries in Europe have at least three car manufacturers?",
            "Show me the European countries where there are three or more car manufacturers."
        ],
        "feedback": [
            "This variation is clear and directly reflects the query's logic. However, it could be slightly more concise.",
            "Well-phrased and straight to the point. No significant issues noted.",
            "Good phrasing, though 'brands' could be taken to mean something slightly different than 'car makers.' Consider using 'manufacturers' instead for greater clarity."
        ],
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_utterance": "Which countries in europe have at least 3 car manufacturers?"
    },
    {
        "init": [
            "List the European countries where at least three car makers are located.",
            "Which countries in Europe host at least three car manufacturers?",
            "Can you provide a list of European countries with three or more car makers?"
        ],
        "final": [
            "List the European countries where at least three car makers are located.",
            "Which countries in Europe have at least three car manufacturers?",
            "Can you provide a list of European countries with at least three car makers?"
        ],
        "feedback": [
            "This variation is clear and accurate, but mentioning 'European' might make it slightly more straightforward than saying 'Europe'.",
            "The query is accurate and concise. However, using 'host' for countries could be replaced with a simpler term like 'have' for better clarity.",
            "This is a good variation, though specifying 'at least' might be clearer than 'three or more'. Other than that, it's precise and avoids SQL-specific jargon."
        ],
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_utterance": "What are the names of all European countries with at least 3 manufacturers?"
    },
    {
        "init": [
            "What is the make and horsepower of the car with the highest horsepower that has 3 cylinders?",
            "Show me the make and horsepower of the top-performing three-cylinder car.",
            "Find the car make and its horsepower for the three-cylinder car with the highest horsepower."
        ],
        "final": [
            "What is the make and horsepower of the highest horsepower three-cylinder car?",
            "Show me the make and horsepower of the top-performing three-cylinder cars.",
            "Find the make and horsepower of the three-cylinder car with the highest horsepower."
        ],
        "feedback": [
            "This variation clearly states the requirement but could be more concise. The phrase 'of the car with the highest horsepower that has 3 cylinders' can be shortened for better readability.",
            "This is a good, concise option. Specifying 'top-performing' is clear, but 'three-cylinder car' could be plural for grammatical accuracy.",
            "Accurate and clear but could avoid repetition by rephrasing 'car make and its horsepower.' Consider merging the elements for better flow."
        ],
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_utterance": "What is the maximum horsepower and the make of the car models with 3 cylinders?"
    },
    {
        "init": [
            "Which car with 3 cylinders has the highest horsepower?",
            "Show me the 3-cylinder car with the greatest horsepower, along with its make.",
            "Find the car make and horsepower for the top 3-cylinder car."
        ],
        "final": [
            "Which car with 3 cylinders has the highest horsepower?",
            "Show me the 3-cylinder car with the greatest horsepower and its make.",
            "Find the car make and horsepower for the 3-cylinder car with the highest power output."
        ],
        "feedback": [
            "This is clear and accurate. No changes needed.",
            "The phrase 'the greatest horsepower' is good, but 'along with its make' could be more naturally phrased as 'and its make'.",
            "This is accurate but could be clearer if it explicitly mentions sorting by horsepower. Avoiding terms like 'top' could also reduce ambiguity."
        ],
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_utterance": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?"
    },
    {
        "init": [
            "What is the model of the car with the highest miles per gallon?",
            "Show me the car model with the best fuel efficiency.",
            "Which car model has the highest fuel economy?"
        ],
        "final": [
            "What is the model of the car with the most miles per gallon?",
            "Can you show me the car model with the best fuel efficiency?",
            "Which car model has the highest fuel economy?"
        ],
        "feedback": [
            "This variation is clear and accurate, but the phrasing could be improved for more natural fluency. Consider 'most miles per gallon' instead of 'highest miles per gallon'.",
            "The phrase 'best fuel efficiency' is natural and correct. However, specifying that you want the 'car model' first can help improve clarity.",
            "Accurate and natural. This variation is concise and aligns well with the original query."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "original_utterance": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon."
    },
    {
        "init": [
            "Which car model has the highest miles per gallon?",
            "Show me the car model with the best fuel efficiency.",
            "Find the car model with the highest MPG."
        ],
        "final": [
            "What is the car model with the highest miles per gallon?",
            "Show me the car model with the best fuel efficiency.",
            "Find the car model with the highest MPG."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent. However, it might be a bit more natural to ask for the car model directly.",
            "Good phrasing and clear intent. 'Best fuel efficiency' is a nice, natural way to phrase it. No changes needed.",
            "Accurate and concise. 'Highest MPG' is a common term and understood well. No changes needed, but 'MPG' should be used with caution for non-technical users."
        ],
        "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "original_utterance": "What is the car model with the highest mpg ?"
    },
    {
        "init": [
            "What is the average horsepower of cars manufactured before 1980?",
            "Can you provide the average horsepower for cars made before the year 1980?",
            "Show me the average horsepower of vehicles produced prior to 1980."
        ],
        "final": [
            "What is the average horsepower of cars manufactured before 1980?",
            "Can you provide the average horsepower for cars made before 1980?",
            "Show me the average horsepower of vehicles produced prior to 1980."
        ],
        "feedback": [
            "This variation is clear and avoids technical jargon. It directly translates the SQL query into a natural language question without any ambiguity.",
            "This wording is clear and accurate. However, 'cars made before the year 1980' could be simplified to 'cars made before 1980' to enhance brevity without losing meaning.",
            "This variation is also accurate and clear. The term 'vehicles' can be a more general term than 'cars,' which aligns well with the data context. Overall, it's concise and precise."
        ],
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "original_utterance": "What is the average horsepower of the cars before 1980?"
    },
    {
        "init": [
            "What is the average horsepower of cars made before the year 1980?",
            "Can you find the average horsepower for cars manufactured prior to 1980?",
            "Show me the average horsepower for vehicles produced before 1980."
        ],
        "final": [
            "What is the average horsepower of cars made before 1980?",
            "Can you find the average horsepower for cars manufactured prior to 1980?",
            "Show me the average horsepower for cars produced before 1980."
        ],
        "feedback": [
            "This is a clear and accurate variation but could be slightly more concise.",
            "Well-phrased and clear. It effectively conveys the query's intent without using technical jargon.",
            "Good variation, but the term 'produced' could be swapped with 'manufactured' or 'made' for consistency with the other variations."
        ],
        "query": "select avg(horsepower) from cars_data where year  <  1980;",
        "original_utterance": "What is the average horsepower for all cars produced before 1980 ?"
    },
    {
        "init": [
            "What is the average engine displacement of Volvo cars?",
            "Can you find the mean engine displacement for Volvo vehicles?",
            "Show me the average engine size for cars made by Volvo."
        ],
        "final": [
            "What is the average engine displacement of Volvo cars?",
            "Can you find the average engine displacement for Volvo vehicles?",
            "Show me the average engine displacement for cars made by Volvo."
        ],
        "feedback": [
            "This variation accurately reflects the query. Using 'engine displacement' is clear and aligns well with the term 'edispl' used in the SQL query.",
            "This phrase is correct but 'mean' might be less commonly used than 'average' in casual contexts. Ensuring simplicity in terms might help in making the query more accessible.",
            "This variation is good but 'engine size' might be a little ambiguous compared to 'engine displacement'. Consider using 'displacement' for precision."
        ],
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "original_utterance": "What is the average edispl of the cars of model volvo?"
    },
    {
        "init": [
            "What is the average engine displacement for Volvo car models?",
            "Can you show me the average engine displacement of cars with the Volvo model?",
            "Find the average edispl value for cars where the model is Volvo."
        ],
        "final": [
            "What is the average engine displacement for Volvo car models?",
            "Can you show me the average engine displacement for Volvo cars?",
            "Find the average engine displacement for cars where the model is Volvo."
        ],
        "feedback": [
            "This variation is clear and accurate. It effectively communicates the SQL query's intent without using technical jargon.",
            "Good phrasing, but could be more concise. The term 'of cars with the Volvo model' can be simplified to improve readability.",
            "The use of 'edispl' is too technical. It should be translated to 'engine displacement' for better natural language flow."
        ],
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "original_utterance": "What is the average edispl for all volvos?"
    },
    {
        "init": [
            "What is the maximum acceleration for each cylinder group in the car data?",
            "Show me the highest acceleration values grouped by the number of cylinders.",
            "Can you provide the fastest acceleration grouped by each cylinder count in the car dataset?"
        ],
        "final": [
            "What is the maximum acceleration for each number of cylinders in the car data?",
            "Show me the highest acceleration values grouped by the number of cylinders.",
            "Can you provide the maximum acceleration grouped by each cylinder count in the car dataset?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent of the query. The phrasing is natural, but 'cylinder group' could be more intuitive as 'number of cylinders'.",
            "Good phrasing and easy to understand. The term 'highest acceleration values' fits well with 'max(Accelerate)'. No significant changes needed.",
            "While this variation is accurate, the phrase 'fastest acceleration' might confuse some users into thinking of speed rather than acceleration metrics. Consider using 'maximum acceleration' for clarity."
        ],
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "original_utterance": "What is the maximum accelerate for different number of cylinders?"
    },
    {
        "init": [
            "What is the highest acceleration for each type of cylinder in the cars data?",
            "Can you show me the maximum acceleration for each cylinder count from the cars dataset?",
            "Find the peak acceleration values grouped by cylinder count in the cars data."
        ],
        "final": [
            "What is the highest acceleration for each cylinder count in the cars data?",
            "Can you show me the maximum acceleration for each cylinder count in the cars dataset?",
            "What are the highest acceleration values for different cylinder counts in the cars data?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the essence of the query. No major issues, but consider simplifying 'type of cylinder' to 'cylinder count'.",
            "Precise and direct; however, the phrase 'cylinder count' is more specific than 'each cylinder count.' Consider simplifying for brevity.",
            "The phrase 'peak acceleration values' is somewhat technical but appropriate. Consider simplifying 'grouped by cylinder count.'"
        ],
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "original_utterance": "What is the maximum accelerate for all the different cylinders?"
    },
    {
        "init": [
            "Which car model appears most frequently in the database?",
            "Can you tell me the most common car model listed in the car names table?",
            "What is the top car model by frequency in the database?"
        ],
        "final": [
            "Which car model appears most frequently in the car names list?",
            "Can you tell me the most common car model available in the car names list?",
            "What is the car model that appears most often in the car names list?"
        ],
        "feedback": [
            "Clear and concise, but the term 'database' could be replaced with 'car names list' for more accuracy.",
            "This directly references the 'car names table,' which may be too technical. Changing 'listed in the car names table' to 'available in the car names list' could improve natural language flow.",
            "Accurate and concise, but 'frequency' might be better understood as 'most often.'"
        ],
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_utterance": "Which model has the most version(make) of cars?"
    },
    {
        "init": [
            "What is the most common car model?",
            "Which car model appears the most frequently in the list?",
            "Identify the car model that is listed the highest number of times."
        ],
        "final": [
            "What is the most common car model?",
            "Which car model appears most frequently?",
            "Identify the car model listed most often."
        ],
        "feedback": [
            "This is clear and aligned with the query's intent. It is brief and focuses on the highest frequency model.",
            "Good phrasing but could be simplified by removing 'in the list' to enhance brevity and clarity.",
            "The phrasing is accurate but could be more concise. 'Listed the highest number of times' could be simplified."
        ],
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_utterance": "What model has the most different versions?"
    },
    {
        "init": [
            "How many cars have more than 4 cylinders?",
            "Count the number of cars with more than 4 cylinders.",
            "What is the total number of cars that have over 4 cylinders?"
        ],
        "final": [
            "How many cars have more than 4 cylinders?",
            "Can you count the number of cars with more than 4 cylinders?",
            "How many cars are there that have over 4 cylinders?"
        ],
        "feedback": [
            "This variation clearly asks for the count of cars with more than 4 cylinders. No changes needed.",
            "This variation is direct and clear. Consider adding a softer phrasing to make it more conversational.",
            "This variation is clear but slightly redundant with 'total number.' Simplifying could improve brevity."
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "original_utterance": "How many cars have more than 4 cylinders?"
    },
    {
        "init": [
            "How many cars have more than 4 cylinders?",
            "Can you count the number of cars with cylinders greater than 4?",
            "What is the total number of cars that have more than four cylinders?"
        ],
        "final": [
            "How many cars have more than 4 cylinders?",
            "Can you count the number of cars that have over 4 cylinders?",
            "What is the total number of cars that have more than four cylinders?"
        ],
        "feedback": [
            "This variation is clear and accurate. It precisely conveys the query's intent.",
            "The phrasing 'cylinders greater than 4' directly reflects the SQL condition but sounds slightly technical. Consider rephrasing for a more natural flow.",
            "This variation is clear and eliminates technical jargon. It maintains the original query's intent effectively."
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "original_utterance": "What is the number of cars with more than 4 cylinders?"
    },
    {
        "init": [
            "How many cars were produced in the year 1980?",
            "Can you provide the count of cars manufactured in 1980?",
            "Show the total number of cars from the year 1980."
        ],
        "final": [
            "How many cars were produced in the year 1980?",
            "Can you provide the count of cars made in 1980?",
            "Show the total number of cars from the year 1980."
        ],
        "feedback": [
            "This variation is clear and directly asks for the number of cars produced in 1980. It accurately reflects the SQL query's intent.",
            "Good phrasing, but the term 'manufactured' might be too specific. Using 'produced' or 'made' could maintain clarity without over-specifying the process.",
            "This is clear and concise. It avoids any SQL-specific terminology and asks for the total number clearly."
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "original_utterance": "how many cars were produced in 1980?"
    },
    {
        "init": [
            "How many cars are there from the year 1980?",
            "Show the total number of cars manufactured in 1980.",
            "Can you count the cars produced in 1980?"
        ],
        "final": [
            "How many cars are there from the year 1980?",
            "Show the total number of cars manufactured in 1980.",
            "Can you count the cars produced in 1980?"
        ],
        "feedback": [
            "This variation is clear and directly asks for the information in a natural way. No change needed.",
            "This variation is accurate and clear. The phrasing 'total number of cars' successfully avoids SQL jargon while keeping the meaning intact.",
            "This variation is natural and precise. The verb 'count' is used effectively to mirror the SQL query's functionality. No change needed."
        ],
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "original_utterance": "In 1980, how many cars were made?"
    },
    {
        "init": [
            "How many car models are made by American Motor Company?",
            "Count the number of car models produced by the American Motor Company.",
            "Give me the total number of car models from American Motor Company."
        ],
        "final": [
            "How many car models are made by American Motor Company?",
            "Count the number of car models made by the American Motor Company.",
            "Give me the total number of car models from American Motor Company."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query's intent. No changes needed.",
            "Good phrasing but consider changing 'produced' to 'made' to maintain consistency in terminology.",
            "Accurate and concise. It captures the SQL query well without technical jargon. No changes needed."
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "original_utterance": "How many car models were produced by the maker with full name American Motor Company?"
    },
    {
        "init": [
            "How many models are listed under American Motor Company?",
            "Can you count the number of models made by American Motor Company?",
            "Find out the total number of car models produced by American Motor Company."
        ],
        "final": [
            "How many models are listed under American Motor Company?",
            "Can you count the total number of models made by American Motor Company?",
            "Find out the total number of car models produced by American Motor Company."
        ],
        "feedback": [
            "This variation is clear and succinct. It effectively captures the intent of the original SQL query without technical jargon.",
            "Accurate and direct. Rephrasing to improve natural language flow could be beneficial, consider using 'total number' for clarity.",
            "This is well-phrased and detailed. No technical terms are present, which is a positive point."
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "original_utterance": "What is the number of car models created by the car maker American Motor Company?"
    },
    {
        "init": [
            "Which car makers have more than three models in their lineup and what are their names and IDs?",
            "List the names and IDs of car makers who produce more than three different models.",
            "Can you show the car manufacturers with more than three models, including their full names and IDs?"
        ],
        "final": [
            "Which car makers have more than three models in their catalog and what are their names and IDs?",
            "List the names and IDs of car makers who currently produce more than three different models.",
            "Can you show the car manufacturers with more than three models along with their names and IDs?"
        ],
        "feedback": [
            "This variation is clear and accurately conveys the intent of the SQL query. However, 'lineup' might be replaced with a more general term like 'catalog' for broader understanding.",
            "This is clear and concise. It captures the condition (producing more than three models) and what information is required (names and IDs). An improvement might include specifying that it is about the 'current' catalog to ensure up-to-date context.",
            "This variation is also accurate but could be more direct. The phrase 'including their full names and IDs' could be shortened to maintain brevity."
        ],
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_utterance": "Which makers designed more than 3 car models? List full name and the id."
    },
    {
        "init": [
            "Which car makers have more than three models listed? Show their names and IDs.",
            "Provide the names and IDs of car manufacturers that have listed more than three models.",
            "List the car makers along with their IDs who have more than three models in the model list."
        ],
        "final": [
            "Which car makers have more than three models listed? Show their names and IDs.",
            "Show the names and IDs of car manufacturers that have more than three models.",
            "List the car makers along with their IDs who have more than three models."
        ],
        "feedback": [
            "Clear and precise. It avoids technical jargon and directly asks for necessary information. No additional changes needed.",
            "The phrase 'provide the names and IDs' is clear, but it would be more natural and concise to just say 'show.' Also, 'listed' might imply only currently listed models rather than all models ever listed.",
            "The variation is accurate, but the phrase 'in the model list' could be omitted for simplicity. It can be assumed from context."
        ],
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_utterance": "What are the names and ids of all makers with more than 3 models?"
    },
    {
        "init": [
            "List all unique car models either made by General Motors or weighing more than 3500 pounds.",
            "What are the distinct models of cars manufactured by General Motors or weighing over 3500 pounds?",
            "Find the unique car models of General Motors or those cars that have a weight greater than 3500 pounds."
        ],
        "final": [
            "List all unique car models either made by General Motors or weighing more than 3500 pounds.",
            "What are the distinct models of cars produced by General Motors or weighing over 3500 pounds?",
            "Find the distinct car models of General Motors or those cars that have a weight greater than 3500 pounds."
        ],
        "feedback": [
            "This variation is clear and specific. The use of 'unique car models' is appropriate, and there are no direct SQL terms that disrupt the natural language flow.",
            "The phrasing 'distinct models of cars' is accurate and clear. However, the word 'manufactured' can be replaced with 'produced' to match standard conversational usage. Overall, it correctly mirrors the intent of the SQL query.",
            "This variation is concise and accurate but could benefit from mentioning 'distinct' or 'unique' closer to 'car models' to directly convey the SQL's use of 'DISTINCT'. No significant SQL-specific jargon is present."
        ],
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "original_utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?"
    },
    {
        "init": [
            "What are the unique car models either made by General Motors or having a weight greater than 3500?",
            "List the distinct models of cars that are either manufactured by General Motors or weigh more than 3500 pounds.",
            "Can you find all unique car models produced by General Motors or those with a weight exceeding 3500?"
        ],
        "final": [
            "What are the unique car models either made by General Motors or having a weight greater than 3500 pounds?",
            "List the distinct car models that are either manufactured by General Motors or have a weight greater than 3500 pounds.",
            "Can you find all unique car models produced by General Motors or those with a weight of more than 3500 pounds?"
        ],
        "feedback": [
            "This variation is clear and captures the essence of the query well. Ensure that terms like 'unique' are properly understood by non-technical users.",
            "Good phrasing, but the use of 'distinct models' may be slightly more technical. Consider specifying the criteria of 'more than 3500 pounds' explicitly.",
            "Accurate and concise. Avoids technical SQL terms properly but could add a slight clarification on the weight condition for complete clarity."
        ],
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "original_utterance": "What are the different models created by either the car maker General Motors or weighed more than 3500?"
    },
    {
        "init": [
            "Show me the distinct years of cars that have a weight between 3000 and 4000 pounds.",
            "Which years had cars weighing between 3000 and 4000 pounds?",
            "Can you provide the unique years of cars whose weight falls within the range of 3000 to 4000 pounds?"
        ],
        "final": [
            "Show me the distinct recorded years of cars that have a weight between 3000 and 4000 pounds.",
            "Which recorded years had cars weighing between 3000 and 4000 pounds?",
            "Can you provide the unique years of cars weighing between 3000 and 4000 pounds?"
        ],
        "feedback": [
            "This variation is clear and comprehensible. It's good that technical terms are avoided, but consider specifying 'recorded years' for better clarity.",
            "Good phrasing and very concise. No changes needed, although mentioning 'the recorded years' might add a bit more clarity.",
            "Accurate and clearly articulated. No changes needed, but the use of 'falls within the range of' is a bit wordy; simplifying could help."
        ],
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "original_utterance": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?"
    },
    {
        "init": [
            "Which unique years have cars weighing between 3000 and 4000 pounds?",
            "Can you list the distinct years for cars that have a weight between 3000 and 4000 pounds?",
            "Show me the different years for cars within the weight range of 3000 to 4000 pounds."
        ],
        "final": [
            "Which distinct years have cars weighing between 3000 and 4000 pounds?",
            "Can you list all the years for cars that have a weight between 3000 and 4000 pounds?",
            "Show me the different years for cars within the weight range of 3000 to 4000 pounds."
        ],
        "feedback": [
            "Clear and accurate, but the term 'unique' can be replaced with 'distinct' to align better with SQL terminology while still being user-friendly.",
            "Good phrasing, but 'distinct' is technical jargon that might be simplified. Otherwise, it's clear and concise.",
            "Accurate and avoids technical terminology effectively. It's clear and easily understood."
        ],
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "original_utterance": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?"
    },
    {
        "init": [
            "What car has the highest horsepower and the fastest acceleration?",
            "Can you show me the car with the maximum horsepower and the shortest acceleration time?",
            "Find the car with the highest horsepower and the top acceleration speed."
        ],
        "final": [
            "What car has the highest horsepower among those with the fastest acceleration?",
            "Can you show me the car that has the highest horsepower, ranked by the fastest acceleration?",
            "Find the car with the highest horsepower and the fastest acceleration time."
        ],
        "feedback": [
            "This variation implicitly connects 'highest horsepower' with 'fastest acceleration,' which may be misleading. It should directly focus on the acceleration ranking.",
            "Clear but incorporates 'maximum horsepower,' which might imply looking for the highest horsepower, rather than sorting by acceleration. Specify 'ranked by the fastest acceleration.'",
            "Good variation, but 'top acceleration speed' might be interpreted differently. It should clarify that 'top' means 'fastest' acceleration."
        ],
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "original_utterance": "What is the horsepower of the car with the largest accelerate?"
    },
    {
        "init": [
            "Show me the car with the highest acceleration and its horsepower.",
            "What is the horsepower of the car that accelerates the fastest?",
            "Find the horsepower of the car with the maximum acceleration."
        ],
        "final": [
            "What is the horsepower of the car that accelerates the fastest?",
            "Show me the horsepower of the car with the fastest acceleration.",
            "Find the horsepower of the car that accelerates the quickest."
        ],
        "feedback": [
            "This variation is clear and understandable. However, it might be more natural to explicitly request only the horsepower, as requested in the SQL query.",
            "Accurate and concise. No major changes needed, clearly aligned with the query's intent.",
            "Clarifies the focus on horsepower and acceleration. However, 'maximum acceleration' might be less natural than 'fastest acceleration'."
        ],
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "original_utterance": "What is the horsepower of the car with the greatest accelerate?"
    },
    {
        "init": [
            "What is the number of cylinders for the fastest accelerating Volvo car?",
            "Can you show the cylinders of the Volvo car with the quickest acceleration?",
            "Find the cylinder count for the Volvo model that accelerates the fastest."
        ],
        "final": [
            "What is the number of cylinders for the Volvo car with the fastest acceleration rate?",
            "Can you show the cylinders of the Volvo car with the fastest acceleration?",
            "Find the cylinder count for the fastest accelerating Volvo in the current listings."
        ],
        "feedback": [
            "The variation is clear and aligns well with the SQL query, but it could be rephrased to emphasize that 'fastest accelerating' implies the acceleration rate.",
            "This variation is clear and accurate. However, 'quickest acceleration' could be clarified to better match 'T1.accelerate ASC LIMIT 1'.",
            "This variation is accurate and clear but could be improved by making it explicitly about the 'current listings' to match the SQL ordering."
        ],
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_utterance": "For model volvo, how many cylinders does the car with the least accelerate have?"
    },
    {
        "init": [
            "What is the cylinder configuration of the fastest accelerating Volvo?",
            "Show me the number of cylinders in the Volvo model with the quickest acceleration.",
            "Find the cylinder count for the Volvo car that has the highest acceleration rate."
        ],
        "final": [
            "What is the cylinder configuration of the fastest accelerating Volvo?",
            "Show me the number of cylinders in the Volvo model with the fastest acceleration.",
            "Find the cylinder count for the Volvo car that accelerates the quickest."
        ],
        "feedback": [
            "This variation conveys the idea well but could clarify if it's asking for the highest or lowest accelerate value. The term 'fastest accelerating' is good and avoids SQL jargon.",
            "Clear and accurate but could be improved by specifying 'fastest' instead of 'quickest' to be more widely understood. Avoids technical jargon well.",
            "This version implies the wrong logic by saying 'highest acceleration rate', which contradicts 'accelerate ASC' as it should be the lowest. It needs clarification."
        ],
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_utterance": "For a volvo model, how many cylinders does the version with least accelerate have?"
    },
    {
        "init": [
            "How many cars have acceleration greater than the car with the highest horsepower?",
            "Count the number of cars that accelerate faster than the car with the highest horsepower.",
            "How many cars can accelerate faster than the car with the top horsepower?"
        ],
        "final": [
            "How many cars have acceleration greater than the one with the highest horsepower in the dataset?",
            "Count the number of cars that accelerate faster than the car currently with the highest horsepower.",
            "How many cars can accelerate faster than the one with the top horsepower in the data?"
        ],
        "feedback": [
            "This variation is clear and correctly identifies the query's purpose. It would benefit from a slight rephrasing to avoid any potential misunderstanding about acceleration vs. horsepower.",
            "Good phrasing and precise. However, adding 'currently in the dataset' for clarity and context would help non-technical users understand better.",
            "Also clear but could be more explicit for non-technical users with a minor rephrasing to ensure it doesn't overly simplify the technical context."
        ],
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "original_utterance": "How many cars have a larger accelerate than the car with the largest horsepower?"
    },
    {
        "init": [
            "How many cars have an acceleration greater than the car with the highest horsepower?",
            "Count the cars with acceleration higher than that of the car with the maximum horsepower.",
            "Find the number of cars whose acceleration is greater than the car with the most horsepower."
        ],
        "final": [
            "How many cars have an acceleration greater than the car with the highest horsepower in the dataset?",
            "Count the cars with acceleration higher than the car with the highest horsepower.",
            "Find the number of cars whose acceleration is greater than the car with the most horsepower in the current listings."
        ],
        "feedback": [
            "This variation is clear and correctly captures the intent of the original query. However, it can be slightly rephrased to make the comparison explicit.",
            "The wording is precise, but the phrase 'that of the car with the maximum horsepower' could be simplified for better readability.",
            "Well-phrased and clear. It would be slightly better if it included 'current listings' or 'in the dataset' for completeness."
        ],
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "original_utterance": "What is the number of cars with a greater accelerate than the one with the most horsepower?"
    },
    {
        "init": [
            "How many countries have more than two car makers associated with them?",
            "Show the number of car makers for each country with at least three car makers.",
            "List the countries that have more than two car makers."
        ],
        "final": [
            "How many countries have more than two distinct car makers associated with them?",
            "Show the count of countries that have more than two car makers.",
            "Provide a list of countries that have more than two car makers."
        ],
        "feedback": [
            "Clear and accurate, but could specify it is counting distinct car makers to avoid any misunderstanding.",
            "This variation is clear. However, mentioning 'at least three car makers' introduces slight ambiguity since the original SQL query checks for 'more than two.' The phrasing 'each country' also implies a detailed listing which diverges from the summary count in the SQL query.",
            "Accurate and concise, but could be improved by including the counting aspect to fully align with the SQL query."
        ],
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "original_utterance": "How many countries has more than 2 car makers ?"
    },
    {
        "init": [
            "How many countries have more than two car makers?",
            "List the number of car makers in each country where there are more than two car makers.",
            "Show a count of countries that have over two car makers."
        ],
        "final": [
            "How many countries have more than two car makers associated with them?",
            "Show the count of car makers for each country where more than two car makers exist.",
            "Give me the number of countries that have more than two car makers."
        ],
        "feedback": [
            "This variation is clear and matches the intention of the SQL query well. However, it could be more explicit about counting car makers in each country.",
            "This variation might benefit from clarification. It mixes listing and counting, which could be simplified for more clarity.",
            "It\u2019s concise, but it might imply a listing rather than counting of car makers, similar ambiguity as in Variation 1. The term 'over' is not as precise as 'more than'."
        ],
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "original_utterance": "What is the number of countries with more than 2 car makers ?"
    },
    {
        "init": [
            "How many cars have more than 6 cylinders?",
            "Count the number of cars that have over 6 cylinders.",
            "What is the number of cars with more than six cylinders?"
        ],
        "final": [
            "How many cars have more than 6 cylinders?",
            "How many cars are there with more than 6 cylinders?",
            "What is the total number of cars with more than six cylinders?"
        ],
        "feedback": [
            "This variation is clear and aligns well with the original intent. No major changes needed.",
            "The phrasing is accurate but could be slightly reworded for a smoother flow. Also, it is important to avoid overly technical terms like 'count'.",
            "This is accurate and succinct. However, rephrasing 'number of cars' to 'total number of cars' might add more clarity."
        ],
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "original_utterance": "How many cars has over 6 cylinders?"
    },
    {
        "init": [
            "How many cars have more than 6 cylinders?",
            "Count the cars with more than 6 cylinders in the database.",
            "Can you give me the number of cars that have over 6 cylinders?"
        ],
        "final": [
            "How many cars have more than 6 cylinders?",
            "Count the cars with more than 6 cylinders.",
            "Can you count the cars that have over 6 cylinders?"
        ],
        "feedback": [
            "Straightforward and clear, accurately captures the intent of the original query. No changes needed.",
            "This variation is also accurate but could be made more conversational by avoiding the term 'database,' which may be too technical.",
            "Clear and correct. However, the phrase could be made more concise by replacing 'give me the number of' with 'count.'"
        ],
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "original_utterance": "What is the number of carsw ith over 6 cylinders?"
    },
    {
        "init": [
            "What is the model of the car with 4 cylinders that has the highest horsepower?",
            "Show me the car model with 4 cylinders and the maximum horsepower.",
            "Which car model has 4 cylinders and the greatest horsepower?"
        ],
        "final": [
            "What is the car model with 4 cylinders that has the highest horsepower?",
            "Show me the model of the car with 4 cylinders and the maximum horsepower.",
            "Which car model with 4 cylinders has the greatest horsepower?"
        ],
        "feedback": [
            "This variation is clear and captures the intent accurately. It could be slightly improved by specifying it's the 'car model' to avoid ambiguity.",
            "Good phrasing but could benefit from explicitly mentioning it's a 'car model' to prevent any confusion. Current phrasing is slightly ambiguous.",
            "Accurate and clear. No significant flaws, but could be more concise while maintaining clarity. Avoid SIL-specific terms for better natural flow."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_utterance": "For the cars with 4 cylinders, which model has the largest horsepower?"
    },
    {
        "init": [
            "Which car model with 4 cylinders has the highest horsepower?",
            "Can you show me the car model with 4 cylinders that has the most horsepower?",
            "Find the 4-cylinder car model with the greatest horsepower."
        ],
        "final": [
            "Which 4-cylinder car model has the highest horsepower?",
            "Can you show me the car model with 4 cylinders that has the single highest horsepower?",
            "Find the 4-cylinder car model with the greatest horsepower available."
        ],
        "feedback": [
            "This variation is clear and accurately portrays the SQL query's intent. However, to increase clarity, it might mention that we are looking for the single highest horsepower.",
            "Good phrasing and conveys the intent well. However, it could specify that it's the single model with the top horsepower to align with the 'LIMIT 1' part of the SQL.",
            "Accurate and concise, though it may benefit from making it explicit that we're looking for just one model with the highest horsepower."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_utterance": "For all of the 4 cylinder cars, which model has the most horsepower?"
    },
    {
        "init": [
            "Which car makes have an engine with horsepower greater than the least powerful car and have at most 3 cylinders?",
            "Show me the car brands whose horsepower is above the minimum horsepower and have 3 or fewer cylinders.",
            "Find the makes and their IDs of cars that have more power than the weakest car and have no more than 3 cylinders."
        ],
        "final": [
            "Which car makes have an engine with horsepower greater than the least powerful car model and have at most 3 cylinders?",
            "Show me the car makes whose horsepower is above the minimum horsepower and have 3 or fewer cylinders.",
            "Find the car makes and their IDs that have more power than the least powerful car and have no more than 3 cylinders."
        ],
        "feedback": [
            "This variation is clear and accurately captures the SQL query's intent, but it could specify that we are looking for the 'make' of the cars.",
            "Good phrasing. It maintains the logic of the original SQL. However, mentioning 'car brands' instead of 'car makes' slightly shifts the term from technical jargon to more familiar terminology. This might be preferable for non-technical users.",
            "Accurate and concisely captures the original query's intent. The term 'the weakest car' is very natural and intuitive. Ensure 'makes' is understood as 'car makes' by the users."
        ],
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "original_utterance": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name."
    },
    {
        "init": [
            "Show me the make and make ID of cars with horsepower greater than the minimum horsepower and fewer than 4 cylinders.",
            "Find the car make IDs and names for cars with cylinders less than 4 and horsepower above the minimum horsepower.",
            "List the make IDs and make names of cars that have more horsepower than the minimum recorded and have less than 4 cylinders."
        ],
        "final": [
            "Show me the make and make ID of cars with more horsepower than the minimum recorded and fewer than 4 cylinders.",
            "Find the car make IDs and names for cars with fewer than 4 cylinders and above the minimum recorded horsepower.",
            "List the make IDs and make names of cars that have horsepower above the minimum recorded and have fewer than 4 cylinders."
        ],
        "feedback": [
            "This variation is accurate and clearly expresses the conditions of horsepower and cylinders but could improve clarity by specifying 'minimum recorded horsepower'.",
            "Good phrasing, but avoid the term 'available' and specify 'minimum recorded horsepower' for clarity. The phrase 'cylinders less than 4' is precise but can be made more natural.",
            "Effective and clear, but 'more horsepower than the minimum recorded' could be simplified to 'above the minimum recorded horsepower'."
        ],
        "query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "original_utterance": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?"
    },
    {
        "init": [
            "What is the highest miles per gallon (mpg) for cars with 8 cylinders or made before 1980?",
            "Can you find the maximum mpg for cars that have 8 cylinders or were manufactured before the year 1980?",
            "Show me the car with the best fuel efficiency among those that have 8 cylinders or were produced before 1980."
        ],
        "final": [
            "What is the highest miles per gallon (mpg) for cars with 8 cylinders or made before 1980?",
            "Can you find the maximum mpg for cars that have 8 cylinders or were made before the year 1980?",
            "Show me the highest mpg of cars with 8 cylinders or produced before 1980."
        ],
        "feedback": [
            "This variation effectively captures the query's intent and uses the term 'miles per gallon (mpg)' which is user-friendly. No changes needed.",
            "Good phrasing, but the term 'manufactured' might sound more formal than necessary. Consider using 'made' for simplicity.",
            "This variation is clear but refers to 'car' instead of 'mpg' specifically. Consider focusing on 'mpg' to align with the SQL query."
        ],
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "original_utterance": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?"
    },
    {
        "init": [
            "What is the highest miles per gallon for cars with 8 cylinders or manufactured before 1980?",
            "Can you show me the car with the maximum mpg that either has 8 cylinders or was made prior to 1980?",
            "Find the car with the best fuel efficiency among those with 8 cylinders or from years before 1980."
        ],
        "final": [
            "What is the highest miles per gallon for cars with 8 cylinders or manufactured before 1980?",
            "Can you show me the car with the maximum mpg that either has 8 cylinders or was made prior to 1980?",
            "Find the car with the best fuel efficiency among those that either have 8 cylinders or are from years before 1980."
        ],
        "feedback": [
            "This variation clearly states the criteria. No major changes are needed, but ensure to maintain clarity for all cars meeting either condition.",
            "Good formulation but specifying 'either' helps in avoiding confusion. Mention that we want 'the maximum mpg' for users' clarity.",
            "The term 'best fuel efficiency' is correctly synonymous with maximum mpg. Make sure it\u2019s clear that the criteria are either having 8 cylinders or being made before 1980."
        ],
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "original_utterance": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?"
    },
    {
        "init": [
            "List all unique car models from manufacturers other than Ford Motor Company that have a weight of less than 3500.",
            "Can you provide a list of distinct models from car makers, excluding Ford, where the cars weigh under 3500?",
            "Show me the different car models with weights less than 3500 pounds that are not produced by Ford Motor Company."
        ],
        "final": [
            "List all unique car models from manufacturers other than Ford Motor Company with a weight of less than 3500 pounds.",
            "Can you provide a list of distinct models from car makers, excluding Ford, where the cars weigh under 3500 pounds?",
            "Show me the different car models with weights less than 3500 pounds that are not produced by Ford Motor Company."
        ],
        "feedback": [
            "This variation is straightforward but could specify that it's the models of the cars, not just any detail about cars.",
            "Clear and accurate. It avoids unnecessary technical detail and is easy to understand.",
            "Accurate and clear, but 'different car models' can be confusing. 'Distinct' is a more technical term but should be clear enough here."
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "original_utterance": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?"
    },
    {
        "init": [
            "List distinct car models made by manufacturers other than Ford Motor Company with weight under 3500.",
            "What unique car models are available from makers other than Ford, weighing less than 3500?",
            "Show me different car models from manufacturers that are not Ford, with a weight limit of 3500."
        ],
        "final": [
            "List unique car models made by manufacturers other than Ford Motor Company with weight under 3500.",
            "What distinct car models are available from makers other than Ford Motor Company, weighing less than 3500?",
            "Show me distinct car models from manufacturers that are not Ford Motor Company, with a weight less than 3500."
        ],
        "feedback": [
            "Clear and concise query, but 'distinct' may come across as SQL jargon. Consider rephrasing as 'different' or 'unique' for better clarity.",
            "Useful phrasing but could be more explicit about being distinct and using 'Ford Motor Company' instead of just 'Ford' for precision and alignment with the SQL query.",
            "Good overall, but could replace 'different' with 'distinct' for accuracy, similar to the original SQL. Also, 'weight limit of 3500' can be simplified."
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "original_utterance": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?"
    },
    {
        "init": [
            "List all countries that do not have any car makers.",
            "Which countries are not associated with any car manufacturers?",
            "Find the countries where no car companies are based."
        ],
        "final": [
            "List all countries that do not have any car makers.",
            "Which countries are without any car manufacturers?",
            "Find the countries without any car manufacturers."
        ],
        "feedback": [
            "This variation is clear and captures the intent of the query well. It avoids any technical jargon and is easy to understand.",
            "This is also clear and accurate. To improve clarity, the term 'not associated with' could be refined to 'without any' for better readability.",
            "This variation is concise and accurate, but specifying 'no car companies are based' might be a bit ambiguous. Consider using 'any car manufacturers' instead."
        ],
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "original_utterance": "What are the name of the countries where there is not a single car maker?"
    },
    {
        "init": [
            "Show me the countries that do not have any registered car makers.",
            "Which countries do not produce any cars?",
            "List the countries that aren't associated with any car makers."
        ],
        "final": [
            "Show me the countries that do not have any registered car makers.",
            "Which countries do not have any registered car makers?",
            "List the countries that aren't connected with any car makers."
        ],
        "feedback": [
            "Clear and concise. It captures the intent well without technical jargon but could specify 'registered car makers' to indicate recorded data.",
            "Conveys the idea but could be interpreted as countries without car manufacturing capabilities rather than those not listed in a database of car makers.",
            "Accurate and understandable, though the term 'associated' might slightly complicate understanding for some users. An alternative word like 'connected' could be clearer."
        ],
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "original_utterance": "What are the names of the countries with no car makers?"
    },
    {
        "init": [
            "List car makers that have at least two models and also participate in at least three different car names.",
            "Show the IDs and names of car makers that meet the requirement of having at least two models and are linked to more than three car names.",
            "Find the car makers who have two or more models and are also connected to greater than three distinct car names."
        ],
        "final": [
            "Which car makers have at least two different models and are connected to more than three distinct car names?",
            "Show the IDs and names of car makers with at least two models and more than three associated car names.",
            "Find car makers with two or more models and are connected to over three distinct car names."
        ],
        "feedback": [
            "This variation accurately conveys the SQL query, but it lacks specificity in mentioning the need to join different tables to get the information.",
            "Well-phrased and clear but mentions 'requirements,' which may add unnecessary jargon. Instead, specify the counts more clearly to improve understanding.",
            "Clear and concise, accurately represents the query. It would benefit from elaborating on the 'connected' relationship to clarify it includes model and car names."
        ],
        "query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "original_utterance": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker ."
    },
    {
        "init": [
            "Find the car makers who have at least two models and more than three named models.",
            "Show me the car manufacturers with a minimum of two models listed and more than three named models.",
            "Which car makers have at least two models in the database and over three models with names?"
        ],
        "final": [
            "Find the car makers who have at least two different models and more than three models with specific names.",
            "Show me the car manufacturers who have at least two models and more than three uniquely named models.",
            "Which car makers have at least two models and over three models with distinct names?"
        ],
        "feedback": [
            "Clear and concise, but make sure 'named models' does not confuse non-technical users. Perhaps explain 'named models' more clearly.",
            "Good clarity, but 'listed models' and 'named models' may confuse users. Consider refining the terms for better understanding.",
            "Accurate and clear. However, specifying 'models in the database' may be unnecessary. Clarify what 'named models' mean to avoid confusion."
        ],
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_utterance": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?"
    },
    {
        "init": [
            "List the country IDs and names for countries with more than three car makers or that have models of cars named 'fiat'.",
            "Can you find the country IDs and country names that either have more than three car manufacturers or where the 'fiat' car model is produced?",
            "Which countries either have more than three car makers or produce the car model 'fiat'? Display their IDs and names."
        ],
        "final": [
            "Show the country IDs and names for countries with more than three car makers or those that have 'fiat' car models.",
            "Can you provide the country IDs and names for countries with over three car manufacturers or where the 'fiat' car model is made?",
            "Which countries have more than three car makers or produce 'fiat' cars? Display their IDs and names."
        ],
        "feedback": [
            "This variation is clear and concise. However, it can be rephrased to make it even more natural by avoiding the SQL-specific term 'List'.",
            "Good phrase, but the use of 'find' can be replaced with a softer command. Also, 'where the 'fiat' car model is produced' might be redundant and long-winded; simplifying it would be better.",
            "Clear and gets directly to the point. However, 'produce the car model 'fiat'' could be reworded to something more natural, and it avoids technical terminology, which is good."
        ],
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "original_utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?"
    },
    {
        "init": [
            "Which countries have more than three car makers or produce Fiat models?",
            "Show me the countries that have either more than three car manufacturers or manufacture the Fiat model.",
            "List the countries where there are more than three different car makers, or where the Fiat model is produced."
        ],
        "final": [
            "Which countries have more than three car makers or have car makers that produce Fiat models?",
            "Show me the countries that have either more than three car manufacturers or have car makers that manufacture the Fiat model.",
            "List the countries where there are more than three different car makers, or where car makers produce the Fiat model."
        ],
        "feedback": [
            "The variation is accurate and clear, but 'produce Fiat models' can be misunderstood. It's better to explicitly state 'have car makers that produce Fiat models'.",
            "This phrase is clear but could benefit from specifying that Fiat models are associated with the car manufacturers rather than the countries directly.",
            "This variation is accurate and concise. It appropriately avoids technical SQL terms and the meaning is clear."
        ],
        "query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "original_utterance": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?"
    },
    {
        "init": [
            "Which country is JetBlue Airways based in?",
            "Can you tell me the country where JetBlue Airways is located?",
            "Find the country of origin for JetBlue Airways."
        ],
        "final": [
            "Which country is JetBlue Airways based in?",
            "Can you tell me the country where JetBlue Airways is based?",
            "Find the country of origin for JetBlue Airways."
        ],
        "feedback": [
            "This variation is clear and accurately represents the query. No changes needed.",
            "This phrasing is good, but it might be more natural to say 'based' instead of 'located'.",
            "Accurate and concise. The phrase 'country of origin' is clear and avoids any SQL-specific terminology."
        ],
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_utterance": "Which country does Airline \"JetBlue Airways\" belong to?"
    },
    {
        "init": [
            "Which country is JetBlue Airways based in?",
            "Can you tell me the country where JetBlue Airways operates from?",
            "I'd like to know the country of origin for JetBlue Airways."
        ],
        "final": [
            "Which country is JetBlue Airways based in?",
            "Can you tell me the country where JetBlue Airways is based?",
            "I'd like to know the country where JetBlue Airways is based."
        ],
        "feedback": [
            "Clear and concise, directly asking for the information. No major changes needed.",
            "Good phrasing, but 'operates from' could be ambiguous as it may imply operation base instead of country of origin.",
            "Clear and understandable, but 'country of origin' might be less straightforward than 'based in.'"
        ],
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_utterance": "What country is Jetblue Airways affiliated with?"
    },
    {
        "init": [
            "What is the abbreviation for JetBlue Airways?",
            "Can you find the code that represents JetBlue Airways?",
            "Show me the short form for JetBlue Airways."
        ],
        "final": [
            "What is the abbreviation for JetBlue Airways?",
            "Can you find the airline code that represents JetBlue Airways?",
            "Show me the abbreviation for JetBlue Airways."
        ],
        "feedback": [
            "This variation is clear and straightforward, accurately capturing the intent of the SQL query.",
            "This is well-phrased but could benefit from specifying that it\u2019s an abbreviation or code for airlines specifically to avoid any confusion.",
            "Good variation, but 'short form' could be more accurately replaced with 'abbreviation' to avoid any potential ambiguity."
        ],
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_utterance": "What is the abbreviation of Airline \"JetBlue Airways\"?"
    },
    {
        "init": [
            "What is the abbreviation for JetBlue Airways?",
            "Can you tell me the abbreviation used for JetBlue Airways?",
            "Find the abbreviation for the airline named JetBlue Airways."
        ],
        "final": [
            "What is the abbreviation for JetBlue Airways?",
            "Can you tell me the abbreviation used for JetBlue Airways?",
            "Find the abbreviation for JetBlue Airways."
        ],
        "feedback": [
            "This variation is clear and concise, directly asking for the abbreviation.",
            "Good phrasing, providing a polite form and specifying the context of 'JetBlue Airways.'",
            "Accurate and direct, but could be slightly more natural. The phrase 'named JetBlue Airways' might not sound as natural as simply 'for JetBlue Airways.'"
        ],
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_utterance": "Which abbreviation corresponds to Jetblue Airways?"
    },
    {
        "init": [
            "Which airlines from the USA are listed along with their abbreviations?",
            "Can you provide the names and abbreviations of airlines based in the United States?",
            "Show me the airlines and their abbreviations that are based in the USA."
        ],
        "final": [
            "Which airlines located in the USA are listed along with their abbreviations?",
            "Can you provide the names and abbreviations of airlines based in the United States?",
            "Show me the airlines and their abbreviations that are located in the USA."
        ],
        "feedback": [
            "This variation is clear and includes both the airline names and their abbreviations. However, consider being more explicit about the context of country-based filtering.",
            "Good phrasing, but it would be clearer to specify 'United States' instead of 'USA' for a more natural expression. The request for 'based in' is well articulated.",
            "This variation captures the essence well but could benefit from using more natural language like 'located in the USA' instead of 'based in the USA.'"
        ],
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_utterance": "List all airline names and their abbreviations in \"USA\"."
    },
    {
        "init": [
            "Which airlines and their abbreviations are based in the USA?",
            "Can you list all airlines from the USA along with their abbreviations?",
            "Provide the names and abbreviations of all airlines that are located in the USA."
        ],
        "final": [
            "Which airlines and their abbreviations are registered in the USA?",
            "Can you show all airlines from the USA along with their abbreviations?",
            "Provide the names and abbreviations of all airlines registered in the USA."
        ],
        "feedback": [
            "This variation is clear and concise, but the use of 'based' may imply more than just the country of registration.",
            "This phrasing is accurate and clear. However, 'list' might be slightly formal; consider using 'show' for a more conversational tone.",
            "This version is also clear and concise. 'Located' might slightly imply physical location rather than registration, but it's still understandable."
        ],
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_utterance": "What are the airline names and abbreviations for airlines in the USA?"
    },
    {
        "init": [
            "Can you provide the airport codes and names for airports located in Anthony?",
            "Show me the airport code and name for each airport in the city of Anthony.",
            "What are the codes and names of airports in Anthony?"
        ],
        "final": [
            "Can you provide the codes and names of airports located in Anthony?",
            "Show me the airport codes and names in the city of Anthony.",
            "What are the codes and names of airports in Anthony?"
        ],
        "feedback": [
            "This variation is clear and concise. No major changes needed but could specify 'airport' to avoid any confusion.",
            "This is accurate but slightly wordy. Simplifying it could improve readability.",
            "This variation is succinct and clear. No significant changes are needed."
        ],
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "original_utterance": "List the airport code and name in the city of Anthony."
    },
    {
        "init": [
            "List the airport codes and names for airports located in Anthony.",
            "Show me all the airports in the city of Anthony along with their codes.",
            "Find the names and codes of airports in Anthony."
        ],
        "final": [
            "List the airport codes and names for airports located in Anthony.",
            "Show me all the airports in the city of Anthony along with their codes.",
            "Find the airport names and codes in Anthony."
        ],
        "feedback": [
            "This variation is clear and uses natural language. It conveys the request accurately without technical jargon.",
            "The phrase 'show me' makes it conversational. Including 'all' makes it clear that all entries are needed, aligning well with querying data from a database.",
            "Concise and to the point. It avoids technical terminology and maintains clarity. However, 'Find the names and codes of airports in Anthony' could subtly imply a search outside a database context."
        ],
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "original_utterance": "Give the airport code and airport name corresonding to the city Anthony."
    },
    {
        "init": [
            "How many airlines are there in the database?",
            "Can you provide the total number of airlines listed?",
            "What is the count of airlines available?"
        ],
        "final": [
            "How many airlines are there in the database?",
            "Can you provide the total number of airlines?",
            "What is the total count of airlines?"
        ],
        "feedback": [
            "This variation is clear and directly aligns with the SQL query's intent. No changes needed.",
            "Good phrasing, but it implies the airlines are 'listed' which is not necessary for clarity. Consider rephrasing to be more general.",
            "Clear and concise, though 'available' could be interpreted as dealing with current operational status. A simpler phrase could be more direct."
        ],
        "query": "SELECT count(*) FROM AIRLINES",
        "original_utterance": "How many airlines do we have?"
    },
    {
        "init": [
            "How many airlines are there in total?",
            "Can you provide the total number of airlines?",
            "Find the total count of airlines available."
        ],
        "final": [
            "How many airlines are there in total?",
            "Can you give the total number of airlines?",
            "Find the total count of airlines."
        ],
        "feedback": [
            "This variation is clear and directly addresses the intent. No improvements needed.",
            "The phrasing is good, but the word 'provide' might add an unnecessary connotation of detail or reports. Simpler phrasing could enhance clarity.",
            "While clear, the word 'available' might suggest a focus on currently operational airlines rather than the total count. Consider removing for precision."
        ],
        "query": "SELECT count(*) FROM AIRLINES",
        "original_utterance": "What is the total number of airlines?"
    },
    {
        "init": [
            "How many airports are there in the database?",
            "Can you tell me the total number of airports listed?",
            "What is the count of all airports?"
        ],
        "final": [
            "How many airports are there in the database?",
            "Can you tell me the total number of airports?",
            "What is the total count of airports?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the query. No issues detected.",
            "This phrasing is good but could be slightly improved by avoiding the implication of a list.",
            "Short and to the point, though 'count of all airports' could be rephrased for better naturalness and clarity."
        ],
        "query": "SELECT count(*) FROM AIRPORTS",
        "original_utterance": "How many airports do we have?"
    },
    {
        "init": [
            "How many airports are there in the database?",
            "Can you give me the total number of airports listed?",
            "What is the count of airports available in the records?"
        ],
        "final": [
            "How many airports are there overall?",
            "Can you give me the total number of airports recorded?",
            "What is the count of airports in the records?"
        ],
        "feedback": [
            "This is clear and direct. However, it doesn't explicitly reference 'in the database' and could be shortened to 'overall' for brevity.",
            "Good phrasing, but 'listed' might be confused with being on a list. Consider replacing with a term like 'entered' or 'recorded'.",
            "This variant is precise, though 'available' might be somewhat redundant. Simplifying it to 'in the records' should suffice."
        ],
        "query": "SELECT count(*) FROM AIRPORTS",
        "original_utterance": "Return the number of  airports."
    },
    {
        "init": [
            "How many flights are there in total?",
            "Can you tell me the total number of flights?",
            "What is the total count of flights available?"
        ],
        "final": [
            "How many flights are there in total?",
            "What is the total number of flights?",
            "How many flights are available?"
        ],
        "feedback": [
            "This variation is clear and simple. No changes needed.",
            "Good phrasing, but it could be a bit more concise by omitting 'Can you tell me'.",
            "The phrase 'total count' is accurate but might be slightly redundant; simply asking for the 'number of flights' would be clearer."
        ],
        "query": "SELECT count(*) FROM FLIGHTS",
        "original_utterance": "How many flights do we have?"
    },
    {
        "init": [
            "How many flights are available?",
            "Can you tell me the total number of flights?",
            "What is the total count of flights?"
        ],
        "final": [
            "How many flights are there in total?",
            "Can you provide the total number of flights?",
            "What is the total count of all flights?"
        ],
        "feedback": [
            "Clear and concise. The word 'available' might imply only the flights that are available for booking, while the SQL query counts all flights.",
            "Accurate but uses the word 'tell me' which can be redundant. 'Total number' is clear and good to use.",
            "Accurate and straightforward. 'Total count' is unambiguous and aligns well with the query."
        ],
        "query": "SELECT count(*) FROM FLIGHTS",
        "original_utterance": "Return the number of flights."
    },
    {
        "init": [
            "Which airline corresponds to the abbreviation UAL?",
            "Show me the airline name for the abbreviation UAL.",
            "Can you provide the airline that has the abbreviation UAL?"
        ],
        "final": [
            "Which airline corresponds to the abbreviation UAL?",
            "Provide the airline name for the abbreviation UAL.",
            "Can you provide the airline that has the abbreviation UAL?"
        ],
        "feedback": [
            "This variation accurately captures the SQL query's intent. It is clear and concise.",
            "Good phrasing, though 'Show me' might be less formal than preferred. Consider using 'Provide' instead.",
            "This is accurate and clear. It's also slightly more formal, which can be a good option depending on context."
        ],
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "original_utterance": "Which airline has abbreviation 'UAL'?"
    },
    {
        "init": [
            "What is the full name of the airline with the abbreviation UAL?",
            "Can you tell me which airline is abbreviated as UAL?",
            "Which airline uses the abbreviation UAL?"
        ],
        "final": [
            "What is the full name of airline with abbreviation UAL?",
            "Which airline is abbreviated as UAL?",
            "Which airline currently uses the abbreviation UAL?"
        ],
        "feedback": [
            "This variation is clear and correctly captures the intent of the SQL query. It could be made slightly more natural by removing 'the' before 'full name'.",
            "Good phrasing but avoid 'can you tell me,' which could be interpreted as a conversational filler, and instead focus on a more direct approach.",
            "This is concise and clear, but consider including 'currently' for added precision, even though it does not alter the SQL query results."
        ],
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "original_utterance": "Give the airline with abbreviation 'UAL'."
    },
    {
        "init": [
            "How many airlines are there based in the USA?",
            "Count the number of airlines that are located in the USA.",
            "What is the total number of airlines operating out of the USA?"
        ],
        "final": [
            "How many airlines are based in the USA?",
            "Count the number of airlines that are based in the USA.",
            "What is the total number of airlines based in the USA?"
        ],
        "feedback": [
            "This variation is clear and concise, accurately capturing the query's intent. No major issues, but it could specify 'based in' to link more precisely to the 'Country' field.",
            "Good phrasing, but the term 'located' might be slightly ambiguous. Clarifying it could improve precision.",
            "Accurate, but 'operating out of' might imply something different; airlines can operate out of a country without being based there. It would be better to stick to the notion of 'based in' for clarity."
        ],
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_utterance": "How many airlines are from USA?"
    },
    {
        "init": [
            "How many airlines are based in the United States?",
            "Can you count the total number of airlines located in the USA?",
            "What is the number of airlines registered in the USA?"
        ],
        "final": [
            "How many airlines are based in the United States?",
            "Can you count the number of airlines located in the USA?",
            "What is the number of airlines in the USA?"
        ],
        "feedback": [
            "This variation is clear and effectively conveys the intent. The use of 'based' is appropriate and natural.",
            "Good phrasing but slightly verbose. Could simplify by removing 'total'. Also, specifying 'located' might imply physical presence rather than registration.",
            "The term 'registered' could be ambiguous, as it might suggest a legal or bureaucratic nuance. Consider using a more straightforward term."
        ],
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_utterance": "Return the number of airlines in the USA."
    },
    {
        "init": [
            "What are the city and country for the airport named Alton?",
            "Can you tell me which city and country the Alton airport is located in?",
            "Find the city and country of the airport called Alton."
        ],
        "final": [
            "What are the city and country for the airport named Alton?",
            "Can you tell me the city and country for the Alton airport?",
            "Find the city and country of the airport named Alton."
        ],
        "feedback": [
            "This variation is clear and accurately represents the SQL query. No changes needed.",
            "This is well-phrased and clear. Consider removing 'located in' for brevity.",
            "Accurate and concise. However, 'called' sounds less formal than 'named' but is still acceptable depending on context."
        ],
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "original_utterance": "Which city and country is the Alton airport at?"
    },
    {
        "init": [
            "Which city and country is the Alton airport located in?",
            "Can you provide the city and country for the airport named Alton?",
            "What are the city and country details for Alton airport?"
        ],
        "final": [
            "Which city and country is the airport named Alton located in?",
            "Can you provide the city and country for airport named Alton?",
            "What are the city and country details for the Alton airport?"
        ],
        "feedback": [
            "Clear and directly tied to the SQL query, but could benefit from specifying 'the airport named Alton' for better clarity.",
            "Well-phrased and specific. It clearly asks for the city and country, but it could be more concise by removing the extra word 'the'.",
            "Accurate and clear. No significant changes are needed, but it could be optimized by rephrasing slightly for brevity."
        ],
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "original_utterance": "Give the city and country for the Alton airport."
    },
    {
        "init": [
            "Can you tell me the name of the airport with the code 'AKO'?",
            "What is the airport name for the airport code 'AKO'?",
            "Find the airport that has the code 'AKO'."
        ],
        "final": [
            "Can you tell me the name of the airport with the code 'AKO'?",
            "What is the airport name for the airport code 'AKO'?",
            "Find the name of the airport that has the code 'AKO'."
        ],
        "feedback": [
            "This variation is clear and direct, correctly asking for the name of the airport using the specified code. No technical jargon present.",
            "Accurate and concise. This phrasing is clear and directly asks for the airport name. It avoids technical SQL terms well.",
            "This is also accurate but could be more specific by explicitly asking for the airport name. Avoiding vague terms will improve clarity."
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "original_utterance": "What is the airport name for airport 'AKO'?"
    },
    {
        "init": [
            "What is the name of the airport with the code AKO?",
            "Can you give me the airport name for the code AKO?",
            "Find the name of the airport that has the code AKO."
        ],
        "final": [
            "What is the name of the airport with the code AKO?",
            "Can you show me the airport name for the code AKO?",
            "Find the name of the airport with the code AKO."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the query. No changes needed.",
            "Good phrasing, but the term 'give me' could be replaced with 'show me' to sound more natural.",
            "The phrasing is accurate, but 'that has the code' could be simplified to sound smoother and more concise."
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "original_utterance": "Return the name of the airport with code 'AKO'."
    },
    {
        "init": [
            "What is the name of the airport in Aberdeen?",
            "Can you tell me the airport located in Aberdeen?",
            "Find the airport name for the city of Aberdeen."
        ],
        "final": [
            "What is the name of the airport in Aberdeen?",
            "Can you tell me the name of the airport in Aberdeen?",
            "Find the airport name in Aberdeen."
        ],
        "feedback": [
            "Clear, concise, and directly addresses the query's intent. No changes needed.",
            "Good phrasing but can be improved by specifying 'name of the airport' to avoid any ambiguity.",
            "Accurate but can be made more natural by removing the technical structure 'for the city of' and simply using 'in Aberdeen'."
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "original_utterance": "What are airport names at City 'Aberdeen'?"
    },
    {
        "init": [
            "What is the name of the airport located in Aberdeen?",
            "Can you provide the airport name for the city of Aberdeen?",
            "Which airport is situated in Aberdeen?"
        ],
        "final": [
            "What is the name of the airport located in Aberdeen?",
            "Can you provide the airport name in Aberdeen?",
            "Which airport is located in Aberdeen?"
        ],
        "feedback": [
            "This variation is clear and direct, nicely capturing the intent of finding the airport name in Aberdeen. No changes needed.",
            "This is concise and accurate but could be made slightly more natural by removing 'for the city of.'",
            "Good phrasing, but consider using 'located' instead of 'situated' for higher familiarity and naturality."
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "original_utterance": "What are the names of airports in Aberdeen?"
    },
    {
        "init": [
            "How many flights depart from APG airport?",
            "Can you tell me the total number of flights originating from APG?",
            "What is the count of flights that have APG as their departure airport?"
        ],
        "final": [
            "How many scheduled flights depart from APG airport?",
            "Can you tell me the total flights originating from APG?",
            "What is the count of flights departing from APG airport?"
        ],
        "feedback": [
            "Clear and accurate, but adding 'scheduled' might improve clarity as it specifies whether it's considering past, current, or future flights.",
            "Good phrasing, but slightly verbose. Simplifying it to avoid redundancy can enhance readability.",
            "Precise and comprehensive but the term 'departure airport' might be more naturally phrased as 'departing from.'"
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_utterance": "How many flights depart from 'APG'?"
    },
    {
        "init": [
            "How many flights depart from the APG airport?",
            "What is the total number of flights leaving from APG?",
            "Can you give me the count of flights that have APG as their source airport?"
        ],
        "final": [
            "How many flights depart from the APG airport?",
            "What is the total number of flights departing from APG?",
            "Can you count the flights that have APG as their departure airport?"
        ],
        "feedback": [
            "This variation is clear and directly answers the user's query. No changes needed.",
            "This version is accurate and concise, but the wording can be slightly improved for better flow by changing 'leaving from' to 'departing from'.",
            "It clearly represents the original query, but the phrase 'give me the count' can be simplified to 'count'. Additionally, 'source airport' can be replaced with 'departure airport' for better clarity."
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_utterance": "Count the number of flights departing from 'APG'."
    },
    {
        "init": [
            "How many flights have ATO as their destination airport?",
            "Can you tell me the total number of flights arriving at ATO airport?",
            "What is the count of flights heading to ATO?"
        ],
        "final": [
            "How many flights have ATO as their destination airport?",
            "Can you tell me the total number of flights with ATO as their destination?",
            "What is the count of flights with ATO as their destination airport?"
        ],
        "feedback": [
            "Clear and direct but could be more specific by mentioning 'destination airport' instead of 'ATO'.",
            "Good phrasing but consider using 'destination' instead of 'arriving at' for more natural flow.",
            "Clear and concise; however, specifying 'destination airport' instead of 'heading to' would improve precision."
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "original_utterance": "How many flights have destination ATO?"
    },
    {
        "init": [
            "How many flights are arriving at ATO airport?",
            "Can you tell me the total number of flights that have ATO as their destination?",
            "Find the count of flights landing at ATO airport."
        ],
        "final": [
            "How many flights are arriving at ATO airport?",
            "Can you tell me the number of flights with ATO as their destination?",
            "Find the count of flights landing at ATO airport."
        ],
        "feedback": [
            "Clear and straightforward. It accurately captures the essence of the SQL query without technical jargon.",
            "Good phrasing, but 'total number' might be redundant. 'Flights that have ATO as their destination' is precise.",
            "This variation is accurate and concise. No further changes needed, it avoids SQL-specific terminology effectively."
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "original_utterance": "Count the number of flights into ATO."
    },
    {
        "init": [
            "How many flights originate from the city of Aberdeen?",
            "Find the number of flights that depart from Aberdeen.",
            "What is the total count of flights leaving from Aberdeen?"
        ],
        "final": [
            "How many flights are departing from the city of Aberdeen?",
            "Find the number of flights that depart from Aberdeen.",
            "What is the total count of flights leaving from Aberdeen?"
        ],
        "feedback": [
            "This variation is clear and concise but could explicitly mention it is a search for the number of flights originating from the city.",
            "Good phrasing; it specifies that flights are departing from Aberdeen. It aligns well with the original query.",
            "Accurate and specifies the total count, which matches the intent of the SQL query precisely."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "How many flights depart from City Aberdeen?"
    },
    {
        "init": [
            "How many flights originate from the airport located in Aberdeen?",
            "Can you count the number of flights that depart from Aberdeen's airport?",
            "What is the total number of flights departing from the airport in Aberdeen?"
        ],
        "final": [
            "How many flights are departing from the airport located in Aberdeen?",
            "Can you count the number of flights that depart from Aberdeen's airport?",
            "What is the number of flights departing from the airport in Aberdeen?"
        ],
        "feedback": [
            "This variation accurately captures the intent of the query but could be more explicit about the 'source' aspect of the flights.",
            "This phrasing is clear and maintains the original intent without any SQL-specific jargon. No changes are needed.",
            "This is also accurate and clear, but the phrase 'total number' might be slightly redundant. 'Number of flights departing' suffices."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "Return the number of flights departing from Aberdeen."
    },
    {
        "init": [
            "How many flights have Aberdeen as their destination?",
            "Can you count the number of flights going to Aberdeen?",
            "Tell me the total number of flights that arrive in Aberdeen."
        ],
        "final": [
            "How many flights arrive in Aberdeen?",
            "Can you count the flights heading to Aberdeen?",
            "Give me the total number of flights to Aberdeen."
        ],
        "feedback": [
            "Clear and concise. However, 'Aberdeen as their destination' could be phrased to directly imply the arrival city for better clarity.",
            "Good phrasing but repetitive use of 'number of flights' which might be simplified.",
            "Accurate and clear. 'Tell me the total number' is fine, but we could streamline by removing 'that arrive in' and focusing directly on flights to Aberdeen."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "How many flights arriving in Aberdeen city?"
    },
    {
        "init": [
            "How many flights are there to Aberdeen?",
            "Can you count the number of flights arriving in Aberdeen?",
            "What is the total number of flights landing at Aberdeen airport?"
        ],
        "final": [
            "How many flights are there to the city of Aberdeen?",
            "Can you tell me the total number of flights arriving in Aberdeen?",
            "What is the total number of flights landing at the airport in Aberdeen city?"
        ],
        "feedback": [
            "This variation is clear but could specify that it is the city Aberdeen, not just any Aberdeen.",
            "Good phrasing, but avoid the technical word 'count' which directly maps to SQL. 'Total number' would be more natural.",
            "Clear and concise, but could clarify that it's Aberdeen city specifically, to avoid ambiguity."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "Return the number of flights arriving in Aberdeen."
    },
    {
        "init": [
            "How many flights are there from Aberdeen to Ashley?",
            "Can you count the number of flights that depart from Aberdeen and arrive in Ashley?",
            "Find the total number of flights traveling between Aberdeen and Ashley."
        ],
        "final": [
            "How many flights are there from Aberdeen to Ashley?",
            "Can you count the number of flights from Aberdeen to Ashley?",
            "Find the total number of direct flights from Aberdeen to Ashley."
        ],
        "feedback": [
            "This phrase is clear and succinct, properly capturing the SQL query's intent. No mention of any technical jargon or SQL terms.",
            "This variation accurately reflects the query, but the phrase 'depart from Aberdeen and arrive in Ashley' can be rephrased for brevity.",
            "The term 'traveling' might suggest a broader scope, like including possible layovers. It might be better to explicitly highlight direct flights."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "original_utterance": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?"
    },
    {
        "init": [
            "How many flights are there from Aberdeen to Ashley?",
            "Can you count the number of flights from Aberdeen to Ashley?",
            "Find the total number of flights that travel from Aberdeen to Ashley."
        ],
        "final": [
            "How many flights are there from Aberdeen to Ashley?",
            "Can you count the number of flights from Aberdeen to Ashley?",
            "Find the total number of flights that travel from Aberdeen to Ashley."
        ],
        "feedback": [
            "This variation is accurate but could be more explicit by including 'number of' before 'flights'. The current phrasing is clear and direct.",
            "This phrasing is clear and straightforward. It precisely asks for a count, aligning well with the SQL query. No improvements needed.",
            "This variation is also clear. The phrase 'total number of' is good as it reflects the counting operation in the query. No changes needed."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "original_utterance": "How many flights fly from Aberdeen to Ashley?"
    },
    {
        "init": [
            "How many flights are operated by JetBlue Airways?",
            "What is the total number of flights that JetBlue Airways runs?",
            "Can you count the flights that are managed by JetBlue Airways?"
        ],
        "final": [
            "How many total flights have been operated by JetBlue Airways?",
            "What is the total number of flights operated by JetBlue Airways?",
            "Can you count the number of flights operated by JetBlue Airways?"
        ],
        "feedback": [
            "The phrasing is clear and accurately captures the essence of the SQL query. However, the word 'operated' might suggest current operation, so it might be good to specify if it includes past or scheduled flights.",
            "This variation is precise but could be slightly more concise. The expression 'runs' can be replaced with 'operates' for better clarity.",
            "Clear and concise. However, the use of 'managed by' may introduce ambiguity, as it could imply flights not necessarily owned by JetBlue Airways but perhaps only managed by them."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "original_utterance": "How many flights does airline 'JetBlue Airways' have?"
    },
    {
        "init": [
            "How many flights are operated by JetBlue Airways?",
            "Can you tell me the total number of flights run by JetBlue Airways?",
            "What is the count of flights currently flown by JetBlue Airways?"
        ],
        "final": [
            "How many flights are currently operated by JetBlue Airways?",
            "Can you tell me the total number of flights currently run by JetBlue Airways?",
            "What is the count of flights currently flown by JetBlue Airways?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the query's intent. It could be slightly enhanced by specifying it looks for current data.",
            "Well-phrased and accurate. Consider adding timeframe context like 'currently' to avoid any ambiguity.",
            "Good alternative but could be improved by mentioning if it's for a specific timeframe or current listings to ensure no ambiguity."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "original_utterance": "Give the number of Jetblue Airways flights."
    },
    {
        "init": [
            "How many flights from United Airlines are heading to ASY airport?",
            "Find the number of United Airlines flights with ASY as their destination.",
            "Can you tell me the total count of United Airlines flights landing in ASY?"
        ],
        "final": [
            "How many currently scheduled flights from United Airlines are heading to ASY airport?",
            "Find the number of currently scheduled United Airlines flights with ASY as their destination.",
            "Can you tell me the total count of currently scheduled United Airlines flights landing in ASY?"
        ],
        "feedback": [
            "This variation is clear and accurate, but could benefit from specifying 'currently scheduled flights' for more clarity.",
            "This is a good variation and clearly communicates the query. Adding 'currently' can improve precision, avoiding ambiguity with past flights.",
            "This is accurate and makes a direct request. It could benefit from specifying 'currently scheduled flights' for better clarity."
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "original_utterance": "How many 'United Airlines' flights go to Airport 'ASY'?"
    },
    {
        "init": [
            "How many flights operated by United Airlines have ASY as their destination airport?",
            "Count the number of flights by United Airlines that land at ASY airport.",
            "What is the total number of United Airlines flights that arrive at ASY airport?"
        ],
        "final": [
            "How many flights currently operated by United Airlines have ASY as their destination airport?",
            "Count the number of flights by United Airlines destined for ASY airport.",
            "What is the total number of United Airlines flights currently arriving at ASY airport?"
        ],
        "feedback": [
            "The variation is accurate and clear but could be slightly refined to be more conversational.",
            "This phrasing is good but referring to 'land' might be a bit too specific. 'Destined for' might be a softer phrasing.",
            "This variation is clear and concise. It's very close to the original query's intent but could benefit from specifying 'currently available' for added clarity."
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "original_utterance": "Count the number of United Airlines flights arriving in ASY Airport."
    },
    {
        "init": [
            "How many flights operated by United Airlines take off from AHD airport?",
            "Can you count the number of flights departing from AHD airport under United Airlines?",
            "Find the total number of flights by United Airlines that have AHD as the departure airport."
        ],
        "final": [
            "How many flights operated by United Airlines take off from AHD airport?",
            "Can you count the number of flights departing from AHD that are operated by United Airlines?",
            "Find the total number of United Airlines flights departing from AHD."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the query. No technical jargon is used, and it is easy to understand.",
            "This variation is precise but could be simplified for improved readability. The phrase 'under United Airlines' is slightly awkward.",
            "This variation is accurate and clear but could be made more concise. The phrase 'as the departure airport' might be simplified."
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "original_utterance": "How many 'United Airlines' flights depart from Airport 'AHD'?"
    },
    {
        "init": [
            "How many flights does United Airlines operate from AHD airport?",
            "Can you count the number of flights by United Airlines departing from AHD?",
            "What is the total number of United Airlines flights that leave from AHD?"
        ],
        "final": [
            "How many flights does United Airlines operate from AHD airport?",
            "Can you tell me the number of flights by United Airlines departing from AHD?",
            "What is the total number of United Airlines flights that depart from AHD?"
        ],
        "feedback": [
            "This variation is clear and directly translates the SQL intent. It naturally avoids SQL-specific terminology, making it accessible.",
            "This is well-phrased, but the term 'departing from' might be slightly more natural than 'leaving from'. Also, 'count the number' might be redundant; 'number' alone might suffice.",
            "Accurate and to the point. It's clear and avoids technical jargon. Nothing needs to be changed."
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "original_utterance": "Return the number of United Airlines flights leaving from AHD Airport."
    },
    {
        "init": [
            "How many United Airlines flights land in Aberdeen?",
            "Can you count the number of United Airlines flights that have Aberdeen as their destination?",
            "Find the total number of flights operated by United Airlines arriving at Aberdeen."
        ],
        "final": [
            "How many United Airlines flights land in Aberdeen?",
            "Can you find the total number of United Airlines flights that have Aberdeen as their destination?",
            "Find the total number of flights operated by United Airlines arriving at Aberdeen."
        ],
        "feedback": [
            "This variation is clear and straightforward. No changes needed, as it captures the query's intent without any SQL jargon.",
            "Good phrasing, but 'count the number' could be simplified to 'total number' for brevity. The term 'destination' aligns well with the SQL logic.",
            "Accurate and precise. 'Arriving at Aberdeen' matches the SQL query's logic effectively. No changes needed."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "original_utterance": "How many United Airlines flights go to City 'Aberdeen'?"
    },
    {
        "init": [
            "How many flights are there to Aberdeen operated by United Airlines?",
            "Can you tell me the number of United Airlines flights landing in Aberdeen?",
            "Show the total count of flights heading to Aberdeen flown by United Airlines."
        ],
        "final": [
            "How many United Airlines flights fly to Aberdeen?",
            "Can you tell me the number of United Airlines flights landing in Aberdeen?",
            "Show the total count of United Airlines flights arriving in Aberdeen."
        ],
        "feedback": [
            "This variation is clear and accurate. It captures the SQL query's intent well, but it could be made more natural by removing redundancy, such as 'there'.",
            "This variation is also clear and detailed, specifying the 'landing' context, which adds clarity.",
            "Precise and clear, but 'heading to' might imply future flights rather than historical data."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "original_utterance": "Count the number of United Airlines flights that arrive in Aberdeen."
    },
    {
        "init": [
            "Which city is the destination for the highest number of flights?",
            "Can you tell me the city with the most incoming flights?",
            "Find the city that has the greatest number of flights arriving."
        ],
        "final": [
            "Which city is the most common flight destination?",
            "What is the destination city with the most flights arriving?",
            "Identify the city with the highest number of arriving flights."
        ],
        "feedback": [
            "This variation is clear and aligns well with the intent of finding the city with the highest number of incoming flights. I would recommend specifying 'destination' to clarify it's about incoming flights.",
            "Good phrasing, but 'incoming' could be misunderstood. Adding 'destination city' could make it clearer. Avoiding 'tell me' could also be more suitable.",
            "This is accurate yet a bit verbose. Simplifying the wording can make it more concise and easier to understand."
        ],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which city has most number of arriving flights?"
    },
    {
        "init": [
            "Which city has the highest number of arriving flights?",
            "Find the city with the most flight arrivals.",
            "Show me the city that receives the most flights."
        ],
        "final": [
            "Which city has the highest number of arriving flights?",
            "Find the city with the most arriving flights.",
            "Show me the city that receives the most incoming flights."
        ],
        "feedback": [
            "This variation accurately captures the query's intent. The phrasing 'highest number of arriving flights' is clear and intuitive.",
            "This variation is concise and clear. 'Most flight arrivals' accurately reflects the original query but could be slightly more specific by mentioning it refers to arriving flights.",
            "This variation is good and clear but could mention that it's about incoming flights for better precision."
        ],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which city has the most frequent destination airport?"
    },
    {
        "init": [
            "Which city has the highest number of arriving flights?",
            "Find the city with the most flight arrivals.",
            "Show me the city that receives the most flights."
        ],
        "final": [
            "Which city has the highest number of arriving flights?",
            "Find the city with the most arriving flights.",
            "Show me the city that receives the most incoming flights."
        ],
        "feedback": [],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which city has most number of departing flights?"
    },
    {
        "init": [
            "Which city has the highest number of departing flights?",
            "Show me the city with the most flights departing from its airport.",
            "What city is the busiest in terms of flight departures?"
        ],
        "final": [
            "Which city has the highest number of departing flights?",
            "Show me the city with the most flights departing from its airport.",
            "What city has the most flight departures?"
        ],
        "feedback": [],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which city is the most frequent source airport?"
    },
    {
        "init": [
            "Which airport is the most frequently used either as a departure or destination in flights?",
            "Can you identify the airport that appears most often in flights as either the source or destination?",
            "Find the airport code of the airport that is used the most in flights, either as a departure or arrival airport."
        ],
        "final": [
            "Which airport is the most frequently used either as a departure or arrival in flights?",
            "Can you identify the airport that appears most often in flights as either the departure or arrival?",
            "Find the airport code of the airport that is used the most in flights, either as a departure or arrival airport."
        ],
        "feedback": [
            "This variation is clear and accurate, but it might confuse non-technical users with the phrasing 'departure or destination.' Using 'departure or arrival' might be more precise.",
            "This is well-phrased and clear, but the term 'source' could be substituted with 'departure' to be more user-friendly.",
            "This variation is precise and clear. No major revisions needed."
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the code of airport that has the highest number of flights?"
    },
    {
        "init": [
            "Which airport has the highest number of flights either departing from or arriving at?",
            "Find the airport code with the most flight operations combined from both departures and arrivals.",
            "What is the airport code for the airport with the most flights taking off or landing?"
        ],
        "final": [
            "Which airport currently has the highest number of flights either departing from or arriving at?",
            "Find the airport code with the most combined flight operations from both departures and arrivals.",
            "What is the airport code for the airport with the most flights currently taking off or landing?"
        ],
        "feedback": [
            "Clear and accurate. Rephasising 'flights either departing from or arriving at' could ensure smoother reading.",
            "The phrase 'most flight operations combined from both departures and arrivals' accurately captures the SQL query's intention but could be simplified for better readability.",
            "Concise and accurate but could benefit from specifying 'currently' to match the notion of dynamic data in SQL operations."
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the airport code of the airport with the most flights?"
    },
    {
        "init": [
            "Which airport has the highest number of flights either arriving or departing?",
            "Find the airport with the highest total number of incoming and outgoing flights.",
            "Show me the airport that handles the most flights, either arriving or departing."
        ],
        "final": [
            "Which airport has the highest number of flights arriving or departing compared to others?",
            "Find the airport with the most incoming and outgoing flights.",
            "Show me the airport that handles the most flights, either arriving or departing."
        ],
        "feedback": [
            "This variation is clear and captures the intent, but it could specify that it's a comparison to other airports to avoid any ambiguity.",
            "Good phrasing, but the term 'total number' could lead to confusion, implying it might sum up flight numbers in some way. Consider simplifying the phrase.",
            "This is concise and clearly communicated. It avoids any SQL-specific terms and is user-friendly."
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "original_utterance": "What is the code of airport that has fewest number of flights?"
    },
    {
        "init": [
            "Which airport is the most frequently used as either a destination or departure?",
            "Show me the airport code that appears most often in flight records, whether it's as a source or destination.",
            "What is the airport with the highest number of flights either arriving or departing?"
        ],
        "final": [
            "Which airport is the most frequently used for flights as either a destination or departure?",
            "Show me the airport code that appears most often in flights, whether it's as a source or destination.",
            "What is the airport code with the highest number of flights either arriving or departing?"
        ],
        "feedback": [
            "This variation is concise and captures the essence of the query. However, it can be more explicit by specifying 'flights' to avoid any ambiguity around the context.",
            "Clear and precise, but instead of 'flight records,' 'flights' will make it more concise. 'Show me' is a good starter for a query request.",
            "This variation is excellent but can be slightly rephrased for better readability by specifying 'airport code' instead of just 'airport.'"
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "original_utterance": "Give the code of the airport with the least flights."
    },
    {
        "init": [
            "Which airline has the most flights?",
            "Could you tell me the airline with the highest number of flights?",
            "Find the airline that operates the most flights."
        ],
        "final": [
            "Which airline has the most flights?",
            "Could you tell me the airline with the highest number of flights?",
            "Find the airline that operates the most flights."
        ],
        "feedback": [
            "This variation is clear and concise, effectively communicating the intent of the query.",
            "Good variation. It makes the user's request for information explicit and avoids SQL jargon.",
            "This is an accurate and direct way of phrasing the query. No changes needed."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which airline has most number of flights?"
    },
    {
        "init": [
            "Which airline has the highest number of flights?",
            "Can you tell me which airline operates the most flights?",
            "Identify the airline with the greatest number of flights in its schedule."
        ],
        "final": [
            "Which airline has the most flights?",
            "Can you tell me which airline operates the most flights?",
            "Identify the airline with the greatest number of flights."
        ],
        "feedback": [
            "This variation is clear and to the point. However, specifying 'highest number' slightly differs from the notion of 'most' which is more common.",
            "Excellent phrasing, accurate while avoiding technical SQL terms. No improvements needed.",
            "Good variation but the term 'schedule' might imply a specific type of data which is not directly referenced in the SQL. 'List of flights' or simply 'flights' is better suited."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What airline serves the most flights?"
    },
    {
        "init": [
            "Which airline has the fewest flights, and what are its abbreviation and country?",
            "Show the abbreviation and country of the airline with the lowest number of flights.",
            "Find the airline with the smallest flight count and provide its abbreviation and country."
        ],
        "final": [
            "Which airline has the fewest flights, and what are its abbreviation and country?",
            "Show the abbreviation and country of the airline with the fewest flights.",
            "Find the airline with the lowest number of flights and provide its abbreviation and country."
        ],
        "feedback": [
            "This variation is clear but could be more concise. The phrase 'has the fewest flights' is accurate but can be rephrased to avoid ambiguity.",
            "Good phrasing, but it should specify that we're interested in the airline with the 'lowest number of flights' defined by the count. ",
            "Accurate and concise. The term 'smallest flight count' might be better expressed as 'fewest flights' for clarity."
        ],
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_utterance": "Find the abbreviation and country of the airline that has fewest number of flights?"
    },
    {
        "init": [
            "Which airline has the fewest flight records, and what is its abbreviation and country?",
            "Show me the abbreviation and country of the airline with the lowest number of flights.",
            "Find the airline with the least flights and provide its abbreviation and country."
        ],
        "final": [
            "Which airline has the fewest flight records currently, and what are its abbreviation and country?",
            "Show me the abbreviation and country of the airline with the lowest number of flights currently.",
            "Find the airline with the least number of flights and provide its abbreviation and country."
        ],
        "feedback": [
            "This variation is precise and clear but can further clarify that it's about the count of flight records.",
            "Clear and concise. It effectively communicates the query's intent without technical jargon but could specify it's looking for the current smallest number.",
            "Accurate and fairly straightforward. No major changes needed."
        ],
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_utterance": "What is the abbreviation of the airilne has the fewest flights and what country is it in?"
    },
    {
        "init": [
            "Which airlines operate flights departing from AHD airport?",
            "Can you list the airlines that have flights starting from AHD?",
            "Show me the airlines that have flights departing from AHD."
        ],
        "final": [
            "Which airlines operate flights departing from AHD airport?",
            "Can you list the airlines that have flights departing from AHD?",
            "Show me the airlines that have flights departing from AHD."
        ],
        "feedback": [
            "This variation is clear and correctly translates the intent of the SQL query. There are no direct references to SQL terminology or schema elements.",
            "Good phrasing, but 'starting from' could be specified as 'departing from' for more clarity. Additionally, 'list' aligns well with the SQL output of retrieving multiple rows.",
            "Accurate and concise. It avoids technical SQL terms and maintains natural language flow."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "original_utterance": "What are airlines that have some flight departing from airport 'AHD'?"
    },
    {
        "init": [
            "Which airlines operate flights from AHD airport?",
            "Can you list the airlines that have flights departing from AHD?",
            "Show me the airlines that have departures from AHD airport."
        ],
        "final": [
            "Which airlines currently operate flights from AHD airport?",
            "Can you list the airlines that have current flights departing from AHD?",
            "Show me the airlines that currently have departures from AHD airport."
        ],
        "feedback": [
            "Clear and accurate. It could specify that it's looking for current operations rather than historical data.",
            "Good phrasing, but it may benefit from clarifying that it refers to current flights.",
            "Good clarity and relevance. It is concise but could be more precise about the context being current flights."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "original_utterance": "Which airlines have a flight with source airport AHD?"
    },
    {
        "init": [
            "Which airlines have flights destined for AHD airport?",
            "Can you list the airlines that fly to AHD airport?",
            "Show me the airlines operating flights that arrive at AHD airport."
        ],
        "final": [
            "Which airlines have flights destined for AHD airport in the current listings?",
            "Can you list the airlines that currently fly to AHD airport?",
            "Show me the airlines operating flights that arrive at AHD airport."
        ],
        "feedback": [
            "Clear and concise, but it might help to specify it is about the data from the current listings.",
            "This is very straightforward but can be improved by mentioning it is about 'current flights' to avoid ambiguity.",
            "Good phrasing. It captures the essence of the SQL query accurately. No significant changes needed."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "original_utterance": "What are airlines that have flights arriving at airport 'AHD'?"
    },
    {
        "init": [
            "Which airlines have flights that land at Ahmedabad airport?",
            "Can you list the airlines that have flights arriving at Ahmedabad?",
            "Find the airlines that operate flights to AHD airport."
        ],
        "final": [
            "Which airlines have flights that arrive at AHD airport?",
            "Can you list the airlines that have flights arriving at Ahmedabad?",
            "Find the airlines that operate flights to Ahmedabad airport."
        ],
        "feedback": [
            "This variation is clear but could benefit from specifying that it is for flights landing specifically at AHD while avoiding terms that can be ambiguous, like 'land'.",
            "Good phrasing and very clear. It specifies the action of 'arriving,' which fits perfectly.",
            "Accurate and understandable but could replace 'AHD airport' with the full airport name for clarity and better user experience."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "original_utterance": "Which airlines have a flight with destination airport AHD?"
    },
    {
        "init": [
            "Which airlines operate flights from both APG and CVO airports?",
            "Show me the airlines that have flights originating from APG and also from CVO.",
            "List the airlines that fly from both the APG and CVO airports."
        ],
        "final": [
            "Which airlines have flights departing from both APG and CVO airports?",
            "Show me the airlines that fly from both APG and CVO airports.",
            "List the airlines that fly from both the APG and CVO airports."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the task. Adding 'operate' makes it slightly less colloquial, which might be needed for natural communication.",
            "This is precise and clear, but using 'originating from' may be slightly technical; a simpler phrasing can improve the natural language flow.",
            "This variation comfortably simplifies the query. It is concise and avoids unnecessary technical terms. No significant changes needed."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "original_utterance": "Find all airlines that have flights from both airports 'APG' and 'CVO'."
    },
    {
        "init": [
            "Which airlines operate from both APG and CVO airports?",
            "List the airlines that have flights from both APG and CVO.",
            "What airlines serve flights departing from both APG and CVO?"
        ],
        "final": [
            "Which airlines operate flights from both APG and CVO airports?",
            "List the airlines that have flights departing from both APG and CVO airports.",
            "What airlines serve flights departing from both APG and CVO airports?"
        ],
        "feedback": [
            "This variation is clear and accurately represents the query's intent, but could specify that it\u2019s about flights.",
            "Good variation, but could be more explicit about listing flight operations.",
            "Accurate and concise. This query is clear and directly references the query parameters, making it apt for a non-technical audience."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "original_utterance": "Which airlines have departing flights from both APG and CVO airports?"
    },
    {
        "init": [
            "Which airlines operate flights from the 'CVO' airport but not from the 'APG' airport?",
            "Can you list the airlines that have departures from 'CVO' but not from 'APG'?",
            "Show me the airlines that fly out of 'CVO' but don't have flights from 'APG'."
        ],
        "final": [
            "Which airlines currently operate flights from 'CVO' but not from 'APG'?",
            "Can you list the airlines that fly out of 'CVO' but not from 'APG'?",
            "Show me the airlines that fly out of 'CVO' but don't have flights from 'APG'."
        ],
        "feedback": [
            "This variation is clear and accurately captures the query's intent. However, adding 'currently' might make it slightly more precise and natural.",
            "This variation is accurate, but 'departures' is somewhat more technical and can be simplified. Also, specify 'currently' for more precision.",
            "This is a good and natural phrasing. No technical jargon is used, and the intent of the SQL query is maintained clearly."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "original_utterance": "Find all airlines that have flights from airport 'CVO' but not from 'APG'."
    },
    {
        "init": [
            "Show me the airlines that operate from CVO but do not operate from APG.",
            "Which airlines have flights departing from CVO but not from APG?",
            "Find the airlines that fly out of CVO but don't have flights leaving from APG."
        ],
        "final": [
            "Show me the airlines that operate from CVO but do not operate from APG.",
            "Which airlines have flights leaving from CVO but not from APG?",
            "Find the airlines that fly out of CVO but don't operate from APG."
        ],
        "feedback": [
            "Clear and accurate; good use of natural phrasing. No changes needed.",
            "This variation is precise and includes the primary airports but can be improved by avoiding technical jargon like 'departing'.",
            "This is well-phrased and accurate. However, simplifying 'leaving' to 'operating from' may add clarity."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "original_utterance": "Which airlines have departures from CVO but not from APG airports?"
    },
    {
        "init": [
            "Which airlines have more than 10 flights?",
            "List the airlines that operate more than 10 flights.",
            "Can you show me the airlines with over 10 flights?"
        ],
        "final": [
            "Which airlines have more than 10 flights?",
            "List the airlines that operate more than 10 flights.",
            "Can you show me the airlines with over 10 flights?"
        ],
        "feedback": [
            "This variation is accurate and clearly conveys the query's intent. It directly translates to counting the number of flights per airline.",
            "Clear and concise. It accurately reflects grouping and filtering the airlines based on the number of flights.",
            "Good phrasing and clear. It includes the natural language term 'over 10 flights,' which aligns well with the SQL HAVING clause."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "original_utterance": "Find all airlines that have at least 10 flights."
    },
    {
        "init": [
            "Which airlines operate more than 10 flights?",
            "Can you list the airlines that have over 10 flights?",
            "Show me the airlines that have operated more than ten flights."
        ],
        "final": [
            "Which airlines operate more than 10 distinct flights?",
            "Can you list the airlines that have over 10 flights?",
            "Show me the airlines that have operated more than 10 flights."
        ],
        "feedback": [
            "This variation is clear and correctly captures the intent, asking for airlines with more than 10 flights. Consider specifying that the count should be distinct for even greater clarity.",
            "This phrasing is precise and avoids SQL jargon, making it user-friendly. The term 'over 10 flights' is clear and understandable.",
            "This variation is accurate and the use of 'more than ten flights' is clear. Avoid writing numbers both in digits and words (ten vs 10) for consistency."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "original_utterance": "Which airlines have at least 10 flights?"
    },
    {
        "init": [
            "Which airlines have fewer than 200 flights?",
            "List the airlines that operate less than 200 flights.",
            "Show the airlines that have operated under 200 flights."
        ],
        "final": [
            "Which airlines have fewer than 200 flights?",
            "List the airlines that operate fewer than 200 flights.",
            "Show the airlines that have operated under 200 flights."
        ],
        "feedback": [
            "Clear and accurately captures the essence of the SQL query. No changes needed.",
            "Good phrasing and clear, but it would be beneficial to make the language slightly more natural. 'Operate fewer than' might be better than 'operate less than.'",
            "Accurate and clear. No technical jargon present, making it easy to understand. No changes needed."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "original_utterance": "Find all airlines that have fewer than 200 flights."
    },
    {
        "init": [
            "Which airlines have operated less than 200 flights?",
            "List the airlines with fewer than 200 flights in total.",
            "Can you show me the airlines that have a count of flights less than 200?"
        ],
        "final": [
            "Which airlines have operated less than 200 flights in total?",
            "List the airlines with fewer than 200 total flights.",
            "Can you show me the airlines that have fewer than 200 flights?"
        ],
        "feedback": [
            "This variation is clear, but specifying it is regarding the total number of operated flights enhances clarity.",
            "Good phrasing, but could mention 'total number of flights' for better precision. It's straightforward and aligns with the original query.",
            "This variation is accurate but could be more concise. Avoid mentioning 'a count of flights', which can be simplified."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "original_utterance": "Which airlines have less than 200 flights?"
    },
    {
        "init": [
            "Can you provide the flight numbers for flights operated by United Airlines?",
            "Show me the flight numbers of all United Airlines flights.",
            "Which flight numbers belong to United Airlines?"
        ],
        "final": [
            "Can you provide the flight numbers for flights operated by United Airlines?",
            "Show me the flight numbers of all United Airlines flights.",
            "Can you tell me which flight numbers belong to United Airlines?"
        ],
        "feedback": [
            "This variation is clear and accurately represents the intent of the SQL query. It's straightforward and avoids SQL-specific jargon.",
            "Good phrasing and accuracy. The term 'all' emphasizes inclusion, which aligns well with the original query. No major improvements needed.",
            "Concise with appropriate meaning retention. However, it could benefit from a more explicit request format, such as 'Can you tell me' or 'Please specify.'"
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "original_utterance": "What are flight numbers of Airline \"United Airlines\"?"
    },
    {
        "init": [
            "Can you show me the flight numbers for United Airlines?",
            "List all flight numbers operated by United Airlines.",
            "What are the flight numbers of United Airlines flights?"
        ],
        "final": [
            "Can you show me the flight numbers for current United Airlines flights?",
            "List all flight numbers operated by United Airlines.",
            "What are the flight numbers of the upcoming United Airlines flights?"
        ],
        "feedback": [
            "This variation is clear and captures the intent correctly. However, it would improve clarity to specify that these are from a specific search rather than a static list.",
            "This phrasing is concise and clear. It avoids technical terms and directly addresses the request. No changes needed.",
            "The question accurately reflects the SQL query's intent. However, it might benefit from specifying whether these are upcoming flights or from historical data."
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "original_utterance": "Which flight numbers correspond to United Airlines flights?"
    },
    {
        "init": [
            "What are the flight numbers for flights departing from the APG airport?",
            "Show the flight numbers for all flights that take off from APG airport.",
            "Can you list the flight numbers for flights starting at APG?"
        ],
        "final": [
            "What are the flight numbers for flights departing from the APG airport?",
            "Show the flight numbers for all flights departing from APG airport.",
            "Can you list the flight numbers for flights departing from APG?"
        ],
        "feedback": [
            "This variation is clear and accurate. It correctly mentions 'flight numbers' and 'APG airport' aligning with the SQL query's intent.",
            "This phrasing is accurate but could be simplified by removing 'that take off from' and replacing with 'departing from' for better natural language flow.",
            "Accurate but could be improved by avoiding 'starting at' which is less common terminology in travel. Replace with 'departing from' for better clarity."
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_utterance": "What are flight numbers of flights departing from Airport \"APG\"?"
    },
    {
        "init": [
            "Which flights are departing from airport code APG?",
            "Can you list the flight numbers for departures from APG airport?",
            "Show me the flights leaving from the APG airport."
        ],
        "final": [
            "Which flight numbers are departing from airport code APG?",
            "Can you list the flight numbers for departures from APG airport?",
            "Show me the flight numbers for flights leaving from the APG airport."
        ],
        "feedback": [
            "This variation is clear but doesn't explicitly mention 'flight numbers.' To be more precise, it might be better to specify what information is being requested.",
            "This variation is accurate and clear, with a specific focus on 'flight numbers', making it closely aligned with the SQL query's select clause.",
            "While clear, this variation could be improved by explicitly mentioning 'flight numbers' for greater accuracy."
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_utterance": "Give the flight numbers of flights leaving from APG."
    },
    {
        "init": [
            "Show me all flight numbers that are headed to APG airport.",
            "What are the flight numbers for flights going to APG?",
            "List all flight numbers with APG as the destination airport."
        ],
        "final": [
            "Show me all flight numbers to APG airport.",
            "What are all the flight numbers for flights going to APG?",
            "List all flight numbers to APG."
        ],
        "feedback": [
            "The phrasing is accurate and natural. Consider using 'to' instead of 'headed to' for brevity.",
            "This is concise and accurate. No changes required, but 'flight numbers' could be clarified as 'all flight numbers' for thoroughness.",
            "This captures the intent well. It's precise and clear but could be simplified by removing 'with APG as the destination airport.' Using 'to APG' would improve conciseness."
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "original_utterance": "What are flight numbers of flights arriving at Airport \"APG\"?"
    },
    {
        "init": [
            "Which flights are heading to airport code APG?",
            "Can you list the flight numbers for flights arriving at APG airport?",
            "Show me the flight numbers for flights destined for APG."
        ],
        "final": [
            "What are the flight numbers heading to airport code APG?",
            "Can you list the flight numbers for flights arriving at APG airport?",
            "Show me the flight numbers for flights destined for APG."
        ],
        "feedback": [
            "This variation correctly addresses the query but could be more specific by indicating the result is a list of flight numbers.",
            "This is clear and precise. No changes needed, but ensuring the term 'flight numbers' is intuitive and consistent with the user's knowledge can be beneficial.",
            "This variation is also accurate and concise. No technical terms that would confuse users. No changes needed."
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "original_utterance": "Give the flight numbers of flights landing at APG."
    },
    {
        "init": [
            "Which flight numbers depart from the airport in Aberdeen?",
            "List the flight numbers for flights that take off from Aberdeen's airport.",
            "Show the flight numbers for all flights originating from Aberdeen."
        ],
        "final": [
            "Which flight numbers have Aberdeen as their departure point?",
            "List the flight numbers for flights departing from Aberdeen's airport.",
            "Show the flight numbers for all flights originating from Aberdeen."
        ],
        "feedback": [
            "This variation is clear but could benefit from mentioning it specifically as the source or departure point to match the SQL query intent.",
            "Good phrasing, but 'that take off from' can be more concisely phrased with 'departing from'. Avoiding redundancy can make it more fluent.",
            "Accurate and specific. This phrasing elegantly avoids awkward phrasing. No changes needed."
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "What are flight numbers of flights departing from City \"Aberdeen \"?"
    },
    {
        "init": [
            "Which flight numbers are departing from airports located in Aberdeen?",
            "Can you list the flight numbers of flights leaving Aberdeen?",
            "Show me the flight numbers for flights that have Aberdeen as the departure city."
        ],
        "final": [
            "Which flight numbers are departing from Aberdeen?",
            "Can you list the flight numbers of flights leaving Aberdeen?",
            "Show me the flight numbers for flights departing from Aberdeen."
        ],
        "feedback": [
            "This variation accurately reflects the intent of the original query but could be slightly more concise.",
            "This variation is clear and accurate. It correctly asks for flight numbers, aligning well with the SQL query.",
            "This variation is also accurate, but 'departure city' is a slightly better phrasing than 'have Aberdeen as the departure city.'"
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "Give the flight numbers of flights leaving from Aberdeen."
    },
    {
        "init": [
            "Which flight numbers are headed to the city of Aberdeen?",
            "Can you provide the flight numbers for all flights arriving in Aberdeen?",
            "List all flight numbers that have Aberdeen as their destination city."
        ],
        "final": [
            "Which flight numbers are headed to the city of Aberdeen?",
            "Can you give me the flight numbers for all flights arriving in Aberdeen?",
            "Show all flight numbers that have Aberdeen as their destination city."
        ],
        "feedback": [
            "This variation is clear and natural. It captures the intent without any technical jargon. No changes needed.",
            "This variation is precise but could be a bit more conversational. 'Provide' might be replaced with 'give' for a more natural feel.",
            "This variation accurately reflects the SQL query, but 'list' could be replaced with 'show' to make it feel less like a command and more like a request."
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "What are flight numbers of flights arriving at City \"Aberdeen\"?"
    },
    {
        "init": [
            "Show me the flight numbers for all flights landing in Aberdeen.",
            "Can you provide the flight numbers for flights that arrive at the airport located in Aberdeen?",
            "List the flight numbers of all flights whose destination is Aberdeen."
        ],
        "final": [
            "Show me the flight numbers for all flights landing in Aberdeen.",
            "Can you provide the flight numbers for flights arriving in Aberdeen?",
            "List the flight numbers of all flights whose destination is Aberdeen."
        ],
        "feedback": [
            "This variation is clear and accurately captures the query's requirement. However, it could explicitly mention 'all flights' for clarity.",
            "Good phrasing and detailed. It would be simplified for better readability by removing redundant information like 'at the airport located in.'",
            "Accurate and concise. It effectively communicates the query's intent without technical jargon. No significant alterations needed."
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "Give the flight numbers of flights arriving in Aberdeen."
    },
    {
        "init": [
            "How many flights are there to either Aberdeen or Abilene?",
            "Can you count the number of flights destined for Aberdeen or Abilene?",
            "Show me the total flights that are headed to Aberdeen or Abilene."
        ],
        "final": [
            "How many flights are there to either Aberdeen or Abilene?",
            "Can you count the number of flights destined for either Aberdeen or Abilene?",
            "Show me the total number of flights that are headed to Aberdeen or Abilene."
        ],
        "feedback": [
            "This variation is clear and straightforward. It effectively captures the essence of the SQL query without using technical jargon.",
            "This phrasing is good; however, it can be more precise by specifying 'the number of flights destined for either Aberdeen or Abilene.'",
            "Also clear and accurate, but it could be improved by specifying it as a request to 'show the total number of flights' to avoid ambiguity about the request being a count."
        ],
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "original_utterance": "Find the number of flights landing in the city of Aberdeen or Abilene."
    },
    {
        "init": [
            "How many flights are arriving at airports in Aberdeen or Abilene?",
            "Can you provide the number of flights landing in either Aberdeen or Abilene?",
            "Show me the total count of flights with destinations in Aberdeen or Abilene."
        ],
        "final": [
            "How many flights are arriving at airports in Aberdeen or Abilene?",
            "Can you show the number of flights landing in Aberdeen or Abilene?",
            "Show me the total count of flights to Aberdeen or Abilene."
        ],
        "feedback": [],
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "original_utterance": "How many flights land in Aberdeen or Abilene?"
    },
    {
        "init": [
            "Which airports are not used as either departure or arrival points in any flight?",
            "Can you list the airports that do not appear as source or destination in the flights database?",
            "Find the names of airports that are not listed as starting or landing locations for any flight."
        ],
        "final": [
            "Which airports are not currently used as either departure or arrival points in any flight?",
            "Can you list the airports that do not currently appear as source or destination in the flights database?",
            "Find the names of airports that are not currently listed as starting or landing locations for any flight."
        ],
        "feedback": [
            "This is clear but could benefit from mentioning 'currently used' to emphasize current data.",
            "Well-phrased and precise. Adding 'currently' could improve clarity.",
            "Good variation but could specify 'currently listed' to align with the present state of the database."
        ],
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "original_utterance": "Find the name of airports which do not have any flight in and out."
    },
    {
        "init": [
            "Which airports do not appear as either a source or destination airport in any flight?",
            "Can you list the airports that are not used as departure or arrival airports?",
            "Show me the airports that are not listed as a starting or ending point in flights."
        ],
        "final": [
            "Which airports do not appear as either a source or destination airport in any flight?",
            "Can you list the airports that are not used as either departure or arrival airports?",
            "Show me the airports that are not listed as either a source or destination in flights."
        ],
        "feedback": [
            "This variation is clear and captures the intent well. It is accurate and does not use technical jargon. No major changes needed.",
            "The phrase 'used as departure or arrival airports' correctly illustrates the logic but could be more fluent if rephrased to 'used as either departure or arrival airports.'",
            "The terms 'starting or ending point' are a bit more ambiguous compared to 'source or destination airports.' Consider changing to a more precise terminology."
        ],
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "original_utterance": "Which airports do not have departing or arriving flights?"
    },
    {
        "init": [
            "How many employees are there in the company?",
            "What is the total number of employees?",
            "Can you count the number of employees for me?"
        ],
        "final": [
            "How many employees are there in the company?",
            "What is the total number of employees?",
            "Can you tell me the number of employees?"
        ],
        "feedback": [
            "Clear and accurately captures the intent of counting employees. No changes needed.",
            "Good phrasing. It accurately represents the intent but is slightly more formal. No changes needed.",
            "The phrase 'for me' is unnecessary and could be more concise. Also, the term 'count' is appropriate for the SQL task but could be replaced with more conversational terminology."
        ],
        "query": "SELECT count(*) FROM employee",
        "original_utterance": "How many employees are there?"
    },
    {
        "init": [
            "How many employees are there in the company?",
            "Can you provide the total number of employees in the organization?",
            "What is the total employee count in the company?"
        ],
        "final": [
            "How many employees are there in the company?",
            "Can you provide the total number of employees in the company?",
            "What is the total employee count in the company?"
        ],
        "feedback": [
            "This variation is clear and to the point. It effectively captures the intent of counting all employees without any SQL jargon.",
            "The phrase 'provide the total number' is clear, but 'in the organization' might be unnecessarily formal. Consider using 'company' for consistency.",
            "This variation is precise and clear. It succinctly translates the SQL query's aim into a natural question."
        ],
        "query": "SELECT count(*) FROM employee",
        "original_utterance": "Count the number of employees"
    },
    {
        "init": [
            "Can you list the names of all employees sorted by their age?",
            "Show me the names of employees ordered by their age.",
            "Which employees are there, listed according to their age?"
        ],
        "final": [
            "Can you list the names of all employees sorted by their age?",
            "Show me the names of all employees ordered by their age.",
            "Give me the names of employees listed according to their age."
        ],
        "feedback": [
            "This variation clearly specifies the sorting by age. It's straightforward and captures the query's intent well.",
            "This phrasing is clear but might be improved by emphasizing that the names are to be shown, not other details of the employees.",
            "The wording is a bit ambiguous. It might be clearer to ask explicitly to list the names of employees by age."
        ],
        "query": "SELECT name FROM employee ORDER BY age",
        "original_utterance": "Sort employee names by their age in ascending order."
    },
    {
        "init": [
            "Could you list all employees' names sorted by their age?",
            "Show me the names of employees arranged by age.",
            "Get the names of employees and order them by age."
        ],
        "final": [
            "List all employees' names sorted by their age.",
            "Show me the names of employees sorted by age.",
            "Show the names of employees ordered by age."
        ],
        "feedback": [
            "Clear and accurate, but 'Could you list' might be unnecessarily polite for technical contexts. Consider dropping 'Could you.'",
            "Good phrasing. Consider replacing 'arranged' with 'sorted' for consistency with Variation 1 and clarity.",
            "This variation mentions 'Get,' which may not be as user-friendly. Consider using 'Show' instead to keep it more conversational."
        ],
        "query": "SELECT name FROM employee ORDER BY age",
        "original_utterance": "List the names of employees and sort in ascending order of age."
    },
    {
        "init": [
            "How many employees are there in each city?",
            "Can you provide the number of employees grouped by city?",
            "Show me the count of employees for each individual city."
        ],
        "final": [
            "How many employees are there in each city?",
            "Can you provide the number of employees in each city?",
            "Show me the count of employees for each city."
        ],
        "feedback": [
            "Clear and accurate. It effectively conveys the idea of counting employees per city.",
            "The term 'grouped' might be too technical for some users. Could be simplified to 'per' or 'in each'.",
            "Accurate, but 'for each individual city' is a bit redundant. Simplifying it to 'for each city' would be better."
        ],
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "original_utterance": "What is the number of employees from each city?"
    },
    {
        "init": [
            "How many employees are there in each city?",
            "Can you give me the number of employees per city?",
            "What is the employee count for every city?"
        ],
        "final": [
            "How many employees are there in each city?",
            "Can you show me the number of employees per city?",
            "What is the employee count for every city?"
        ],
        "feedback": [
            "Clear and to the point. This variation correctly captures the intent of the original query without including technical jargon.",
            "Good phrasing, but the use of 'give me' can be replaced with a more query-oriented term such as 'show' to make it sound more formal.",
            "Accurate and brief. This appropriately reflects the original query's intent while avoiding any SQL-specific terms."
        ],
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "original_utterance": "Count the number of employees for each city."
    },
    {
        "init": [
            "Which cities have more than one employee under the age of 30?",
            "Show me the cities where there are multiple employees younger than 30 years old.",
            "List the cities that have a count of employees below 30 years old greater than one."
        ],
        "final": [
            "Which cities have more than one employee under the age of 30?",
            "Show me the cities where there are multiple employees younger than 30 years old.",
            "List the cities that have multiple employees younger than 30."
        ],
        "feedback": [
            "This variation is clear and directly conveys the intent of the query. No SQL-specific terminology is used, making it easily understandable.",
            "Good phrasing, but 'younger than 30 years old' is preferred for natural language flow. It clearly indicates the criteria of the employees' age.",
            "Accurate but uses a more technical phrase 'count of employees', which might not be as intuitive. The term 'below 30 years old' could be rephrased to 'younger than 30' for better clarity."
        ],
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_utterance": "Which cities do more than one employee under age 30 come from?"
    },
    {
        "init": [
            "Which cities have more than one employee under the age of 30?",
            "Can you list the cities that have multiple employees younger than 30?",
            "Identify cities with two or more employees who are below 30 years old."
        ],
        "final": [
            "Which cities have more than one employee currently under the age of 30?",
            "Can you list the cities that have multiple employees who are younger than 30?",
            "Identify cities with two or more employees who are below 30 years old."
        ],
        "feedback": [
            "This variation is clear and accurate, aligning well with the SQL query's intent. It clearly asks for cities with more than one employee under 30.",
            "This is a good variation, but for improved clarity, adding the word 'currently' could emphasize the present condition. The term 'multiple' is appropriate and non-technical.",
            "This variation is clear and accurate, though using 'two or more' instead of 'more than one' is slightly more formal. It still accurately represents the query."
        ],
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_utterance": "Find the cities that have more than one employee under age 30."
    },
    {
        "init": [
            "How many shops are there in each location?",
            "Can you provide the number of shops grouped by location?",
            "Show me the count of shops in each location."
        ],
        "final": [
            "How many shops or stores are there in each location?",
            "Can you provide the number of shops at each location?",
            "Show me how many shops there are in each area."
        ],
        "feedback": [
            "Good phrasing; it is clear and directly addresses the query intent. The term 'shops' might be perceived as individual stores rather than locations.",
            "Accurate and clear, but the mention of 'grouped' might align too closely with SQL terminology. Simplifying to natural language can improve clarity.",
            "Concise and to the point. The term 'count' aligns with the SQL function but might seem technical to non-SQL users."
        ],
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "original_utterance": "Find the number of shops in each location."
    },
    {
        "init": [
            "How many shops are there in each location?",
            "Can you provide the count of shops categorized by location?",
            "Show me the number of shops in each different location."
        ],
        "final": [
            "How many shops are there in each location?",
            "Can you provide the number of shops for each location?",
            "Show me the number of shops in each different location."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent of the SQL query, though it could specify it's a count.",
            "Good phrasing, but using 'categorized' might be more technical than necessary. Consider rephrasing to make it more natural.",
            "Accurate and concise. No changes needed, it avoids unnecessary complexity."
        ],
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "original_utterance": "How many shops are there in each location?"
    },
    {
        "init": [
            "Who is the manager of the shop with the highest number of products, and which district is it in?",
            "Show me the manager and district of the shop that has the most products.",
            "Find the manager and district for the shop with the largest inventory."
        ],
        "final": [
            "Who is the manager of the shop with the highest number of products, and in which district is it located?",
            "Show me the manager and district of the shop that has the most products.",
            "Find the manager and district for the shop with the largest inventory."
        ],
        "feedback": [
            "Clear and accurate. It captures the essence of the query but could be a bit more concise.",
            "This variation is clear and concise. It accurately reflects the original intent of the query.",
            "Good phrasing and clear. The term 'largest inventory' naturally translates to 'number_products DESC LIMIT 1.'"
        ],
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "original_utterance": "Find the manager name and district of the shop whose number of products is the largest."
    },
    {
        "init": [
            "Who is the manager of the shop with the highest number of products, and what district is it in?",
            "Can you tell me the manager's name and district for the shop that has the most products?",
            "Find the name of the manager and the district for the shop with the highest product count."
        ],
        "final": [
            "Who is the manager of the shop with the highest number of products, and what district is it in?",
            "Can you tell me the manager's name and district for the shop that has the most products?",
            "Find the name of the manager and the district for the shop with the highest product count."
        ],
        "feedback": [
            "This variation is accurate and clear. It effectively conveys the search for the manager and district of the shop with the most products. No need for changes.",
            "Good phrasing but could be more specific about 'the most products' to highlight the ordering by number of products. Consider rephrasing for more clarity.",
            "Accurate and concise. No technical jargon used. This variation maintains the natural language flow appropriately."
        ],
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "original_utterance": "What are the manager name and district of the shop that sells the largest number of products?"
    },
    {
        "init": [
            "What are the minimum and maximum numbers of products available in the shop?",
            "Show me the lowest and highest product counts in the shop.",
            "What is the range of product quantities in the shop, from the minimum to the maximum?"
        ],
        "final": [
            "What are the minimum and maximum amounts of products available in the shop?",
            "Show me the lowest and highest numbers of products in the shop.",
            "What is the range of quantities of products in the shop, from the minimum to the maximum?"
        ],
        "feedback": [
            "This variation accurately captures the intent of finding the minimum and maximum product numbers. However, the phrase could be improved for flow by specifying 'numbers of products available' more naturally.",
            "Good phrasing, but 'product counts' could be interpreted broadly. Specify 'number of products' for clarity.",
            "This variation is accurate and comprehensive. It could specify the word 'quantities' more naturally."
        ],
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "original_utterance": "find the minimum and maximum number of products of all stores."
    },
    {
        "init": [
            "What are the minimum and maximum number of products in the shop?",
            "Can you provide the range of the number of products available in the shop?",
            "Show me the lowest and highest count of products in the shop."
        ],
        "final": [
            "What are the minimum and maximum number of products in the shop?",
            "Can you provide the minimum and maximum number of products available in the shop?",
            "Show me the lowest and highest count of products in the shop."
        ],
        "feedback": [
            "Accurate and clear. This variation straightforwardly captures the intent of the query.",
            "Good phrasing, but the term 'range' might imply a numerical range rather than distinct minimum and maximum values. Could be clearer by explicitly mentioning minimum and maximum.",
            "Clear and concise. Captures the intent well without introducing unnecessary technical terms."
        ],
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "original_utterance": "What are the minimum and maximum number of products across all the shops?"
    },
    {
        "init": [
            "Show me the names, locations, and districts of shops sorted by the highest number of products.",
            "Can you list the shops with their names, locations, and districts in order of product count, starting with the highest?",
            "Find the shops along with their names and districts and sort them by the number of products in descending order."
        ],
        "final": [
            "Show me the names, locations, and districts of shops sorted by the number of products in descending order.",
            "Can you list the shops along with their names, locations, and districts sorted by the number of products, starting with the highest?",
            "Find the shops with their names, locations, and districts sorted by the number of products in descending order."
        ],
        "feedback": [
            "This variation effectively communicates the SQL query intent; however, it might be more concise to say 'sorted by the number of products in descending order.'",
            "The phrasing is a bit lengthy. Simplifying the sentence can make it more natural. An additional specific mention to 'descending order' can help clarify the intent.",
            "This variation is clear, but avoid redundancy by excluding 'along with their names and districts' since it is inherent in 'shops.' Also, omit 'in descending order' for simplicity."
        ],
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "original_utterance": "Return the name, location and district of all shops in descending order of number of products."
    },
    {
        "init": [
            "Show me the shops listed by the number of products they offer in descending order.",
            "Can you list all shops by name, location, and district, ordered by the products they have the most?",
            "Find the shops ordered by the highest number of products available, and show their names, locations, and districts."
        ],
        "final": [
            "Show me the shops, including their names, locations, and districts, listed by the number of products they offer in descending order.",
            "Can you list all shops by their names, locations, and districts, ordered by the most products they have?",
            "Find the shops, showing their names, locations, and districts, ordered by the highest number of products."
        ],
        "feedback": [
            "Clear and concise. It captures the essence of the SQL query but can mention the columns retrieved explicitly to fit the query structure better.",
            "Descriptive and accurate. However, it's a bit long; consider shortening while maintaining key details. Avoid mixing SQL column names directly to retain natural language flow.",
            "Good phrasing, but make it clear that the columns to be displayed are shop name, location, and district. Also, avoid SQL-specific terminology like 'available.' Use simpler terms."
        ],
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "original_utterance": "Sort all the shops by number products in descending order, and return the name, location and district of each shop."
    },
    {
        "init": [
            "Which shops have more products than the average number of products in all shops?",
            "Can you list the names of shops whose product count exceeds the average product count across all shops?",
            "Show me the shops where the number of products is higher than the average number of products in the shops."
        ],
        "final": [
            "Which shops have more products than the average number of products in all shops?",
            "Can you list the names of shops where the number of products exceeds the average across all shops?",
            "Show me the shops where the number of products exceeds the average in the shops."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the SQL query's intent. It effectively translates the SQL logic into natural language without using technical terms.",
            "This variation is also clear and specific. However, the phrase 'product count' might be simplified to 'number of products' for greater clarity to non-technical users.",
            "Good phrasing and clear intent. It could be slightly streamlined for brevity, changing 'is higher than' to 'exceeds' to match the style of the previous variations."
        ],
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "original_utterance": "Find the names of stores whose number products is more than the average number of products."
    },
    {
        "init": [
            "Show me the names of shops that have more products than the average number of products.",
            "Which shops have a higher number of products compared to the average?",
            "Find the names of shops where the number of products exceeds the average."
        ],
        "final": [
            "Show me the names of shops that have more products than the average number of products in the shop.",
            "Which shops have more products than the average?",
            "Find the names of shops where the number of products in the shop exceeds the average."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the logic of the SQL query. Good use of natural language, but including the context of 'shop' before 'products' would improve clarity.",
            "Good phrasing, but the term 'higher number' might be simplified to 'more' for better fluency. Avoid using comparative terms like 'compared to' that can introduce ambiguity.",
            "Accurately captures the SQL query's intention and is concise. However, it could mention 'the shop' earlier to avoid ambiguity."
        ],
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "original_utterance": "Which shops' number products is above the average? Give me the shop names."
    },
    {
        "init": [
            "Who is the employee with the highest number of evaluations?",
            "Show me the name of the employee who has the most evaluations.",
            "Which employee has received the most evaluations?"
        ],
        "final": [
            "Who is the employee with the highest number of evaluations?",
            "What is the name of the employee who has the most evaluations?",
            "Which employee currently has received the most evaluations?"
        ],
        "feedback": [
            "This variation is clear and accurately represents the query's intent. It captures the essence of 'ORDER BY count(*) DESC LIMIT 1' succinctly.",
            "This phrasing is also accurate but could be simplified further by removing 'show me' to make it more conversational. Consider specifying 'currently' to match availability contextually.",
            "This is clear and concise with no use of SQL jargon. It captures 'most evaluations' well but could include 'currently' for temporal clarity."
        ],
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "find the name of employee who was awarded the most times in the evaluation."
    },
    {
        "init": [
            "Who is the employee with the highest number of evaluations?",
            "Can you show me the employee who has received the most evaluations?",
            "Find the name of the employee with the maximum number of evaluations."
        ],
        "final": [
            "Who is the employee with the most evaluations?",
            "Can you show me the employee who has completed the most evaluations?",
            "Find the name of the employee with the most evaluations."
        ],
        "feedback": [
            "The question is clear and well-phrased, but it could be rephrased to sound more natural by avoiding 'highest number.'",
            "This variation is accurate, but 'received' might imply the evaluations are received passively. Consider using 'completed' to avoid ambiguity.",
            "The query is directly reflective of the SQL logic and is accurate. However, 'maximum number' could be simplified to make it more conversational."
        ],
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which employee received the most awards in evaluations? Give me the employee name."
    },
    {
        "init": [
            "Who is the employee with the highest bonus?",
            "Give me the name of the employee who has received the highest bonus.",
            "Which employee has earned the highest bonus?"
        ],
        "final": [
            "Who is the employee with the highest bonus?",
            "Give me the name of the employee who has received the highest bonus.",
            "Which employee has received the highest bonus?"
        ],
        "feedback": [
            "The variation is clear and accurate. It effectively captures the essence of the SQL query without any technical jargon.",
            "This variation is also clear and correct. It specifies 'name of the employee,' which aligns well with the SQL query's focus on selecting the employee's name.",
            "Accurate and concise. The use of 'earned' instead of 'received' may slightly alter the meaning but does not impact the SQL query's intent. Avoid using 'earned' if it ambiguates the context."
        ],
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "original_utterance": "Find the name of the employee who got the highest one time bonus."
    },
    {
        "init": [
            "Which employee received the highest bonus?",
            "Show me the name of the employee with the largest bonus.",
            "Can you find the employee who has the top bonus amount?"
        ],
        "final": [
            "Which employee received the highest bonus?",
            "Show me the name of the employee with the largest bonus.",
            "Can you find the employee who has the top bonus amount?"
        ],
        "feedback": [
            "This variation is clear and directly translates the query's intent. However, it's good to specify that we are looking at 'employee' bonuses.",
            "This phrasing is precise and eliminates any SQL jargon. It accurately captures the intent of the SQL query.",
            "While the variation is clear, it could be slightly more specific by mentioning 'employee' explicitly to avoid ambiguity."
        ],
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "original_utterance": "Which employee received the biggest bonus? Give me the employee name."
    },
    {
        "init": [
            "List the names of employees who haven't been evaluated.",
            "Can you provide the names of employees whose performance evaluations are missing?",
            "Show me the names of the employees who are yet to be evaluated."
        ],
        "final": [
            "List the names of employees who haven't been evaluated.",
            "Can you provide the names of employees whose performance evaluations are missing?",
            "Show me the names of the employees who are yet to be evaluated."
        ],
        "feedback": [
            "This variation is clear and straightforward. It accurately translates the SQL query into a natural language request.",
            "This phrasing is clear and captures the intent well. The phrase 'whose performance evaluations are missing' makes the context precise.",
            "This variation is also accurate. 'Yet to be evaluated' is a concise way to express employees who have not been evaluated."
        ],
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "original_utterance": "Find the names of employees who never won any award in the evaluation."
    },
    {
        "init": [
            "Which employees have not been evaluated?",
            "Can you list the names of employees who haven't received an evaluation?",
            "Find the employees who have yet to undergo an evaluation."
        ],
        "final": [
            "Which employees' names have not been evaluated?",
            "Can you list the names of employees who haven't been evaluated?",
            "Find the names of employees who have yet to undergo an evaluation."
        ],
        "feedback": [
            "This variation directly addresses the intent of the query. It is clear and concise but could be more specific about listing names.",
            "Well-phrased and explicitly mentions 'names,' which is accurate. Consider simplifying 'received an evaluation' to just 'been evaluated' to enhance brevity.",
            "Good phrasing with the concept 'yet to undergo.' It's clear and avoids technical jargon. However, mentioning 'names' would align closely with the query."
        ],
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "original_utterance": "What are the names of the employees who never received any evaluation?"
    },
    {
        "init": [
            "Which shop has done the most hiring?",
            "Can you tell me the shop name with the highest number of hires?",
            "Find the shop that is the top hirer."
        ],
        "final": [
            "Which shop currently has the highest number of hires?",
            "Can you tell me the shop name with the most hires currently?",
            "Find the shop that is the top hirer right now."
        ],
        "feedback": [
            "This variation is clear but could be more explicit about the data being counted (number of hires).",
            "This is a good, precise variation but can be slightly improved by emphasizing 'currently'.",
            "Good phrasing. It can be enhanced by specifying 'currently' to indicate the most recent data."
        ],
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the name of the shop that is hiring the largest number of employees?"
    },
    {
        "init": [
            "Which shop has conducted the most hiring?",
            "Can you find the name of the shop with the highest number of hires?",
            "Show me the shop that has hired the most employees."
        ],
        "final": [
            "Which shop has conducted the most employee hiring?",
            "Can you find the name of the shop with the highest number of hires?",
            "Show me the shop that has hired the most employees."
        ],
        "feedback": [
            "This variation is clear and concise. However, it could explicitly mention the context of hiring in terms of employees to avoid ambiguity.",
            "Good phrasing and clear in pointing out that it's the shop with the highest number of hires. No direct reference to SQL terms.",
            "Accurate and understandable. It specifies 'employees,' which aligns with the context of hiring, and avoids SQL jargon."
        ],
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which shop has the most employees? Give me the shop name."
    },
    {
        "init": [
            "Show me the names of shops that are not listed in the hiring table.",
            "Which shops are not part of the hiring table?",
            "Can you list the names of shops that don't appear in the hiring records?"
        ],
        "final": [
            "Show me the names of shops that are not listed in the hiring table.",
            "Which shop names are not part of the hiring table?",
            "Can you list the names of shops that are not in the hiring table?"
        ],
        "feedback": [
            "Clear and concise. The term 'not listed' accurately reflects the use of 'NOT IN' in the SQL query.",
            "Good phrasing but could be more specific by mentioning the 'names' of the shops. Adding 'names' will improve clarity.",
            "Accurate and detailed. However, 'don't appear in the hiring records' could be simplified to 'not in the hiring table' for better alignment with the SQL query."
        ],
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "original_utterance": "Find the name of the shops that do not hire any employee."
    },
    {
        "init": [
            "Which shops do not have any hiring records?",
            "Can you list the names of shops that are not in the hiring table?",
            "Find the shops whose IDs are not listed in the hiring database."
        ],
        "final": [
            "Which shops do not have any hiring records?",
            "Can you list the names of shops that aren\u2019t currently hiring?",
            "Find the shops that are not associated with any hiring records."
        ],
        "feedback": [
            "This variation is clear and accurate. It effectively conveys the meaning of the SQL query without using technical jargon. No major changes are needed.",
            "This variation is also accurate, but the phrase 'not in the hiring table' might confuse non-technical users. It would be better to avoid the direct reference to the 'hiring table' and use more natural language.",
            "This variation is accurate but could be improved by avoiding technical references like 'IDs' and 'database.' It is better to use more natural phrases to describe the shops and their relationship to the hiring records."
        ],
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "original_utterance": "Which shops run with no employees? Find the shop names"
    },
    {
        "init": [
            "How many hirings have been made for each shop?",
            "Can you provide the count of hirings grouped by each shop name?",
            "Show me the number of hirings for every shop, grouping them by shop name."
        ],
        "final": [
            "How many hirings have been made for each shop?",
            "Can you provide the count of hirings for each shop name?",
            "Show me the number of hirings for every shop."
        ],
        "feedback": [
            "This variation is clear and correctly reflects the SQL query's intent. It avoids technical jargon and is user-friendly.",
            "This phrasing is accurate but the term 'grouped by' might be too technical for non-SQL users. Consider simplifying it.",
            "This variation is good but could be more concise. The phrase 'grouping them by shop name' could be simplified to improve readability."
        ],
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "original_utterance": "Find the number of employees hired in each shop; show the shop name as well."
    },
    {
        "init": [
            "How many hirings have been made at each shop?",
            "Provide the number of hirings for every shop along with the shop's name.",
            "Can you list the shops and the total hirings for each one?"
        ],
        "final": [
            "How many hirings has each shop made?",
            "Provide the hirings count for each shop.",
            "Can you list each shop with its total number of hirings?"
        ],
        "feedback": [
            "This variation is clear and succinct. However, it might benefit from a slight rephrase to specify the output format more explicitly.",
            "Good phrasing, but it could be made more concise. The phrase 'along with the shop's name' feels redundant considering the intent.",
            "This variation is clear and properly conveys the intent of the query. No major changes needed."
        ],
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "original_utterance": "For each shop, return the number of employees working there and the name of the shop."
    },
    {
        "init": [
            "What is the total sum of bonuses recorded in the evaluation table?",
            "Can you calculate the cumulative bonus amount from the evaluations?",
            "Find the total bonus amount from the evaluation data."
        ],
        "final": [
            "What is the total amount of bonuses recorded?",
            "Can you calculate the total bonus amount from the records?",
            "Find the total amount of bonuses from the data."
        ],
        "feedback": [
            "This variation directly references the 'evaluation' table, which can be softened for better natural language flow. Also, 'sum' could be rephrased to 'total' for clarity and simplicity.",
            "The term 'cumulative' is accurate but may seem a bit technical. Rephrasing 'evaluations' to something more general, like 'records' or 'data,' could improve accessibility.",
            "This variation is clear and concise. However, 'evaluation data' might still sound technical; simplifying this could make it more user-friendly."
        ],
        "query": "SELECT sum(bonus) FROM evaluation",
        "original_utterance": "What is total bonus given in all evaluations?"
    },
    {
        "init": [
            "What is the total sum of bonuses from the evaluation?",
            "Can you calculate the total bonus amount from the evaluation data?",
            "Find the combined total of all bonuses listed in the evaluation."
        ],
        "final": [
            "What is the total sum of all bonuses recorded in the evaluation?",
            "Can you calculate the total amount of bonuses from the evaluation data?",
            "Find the combined total of bonuses listed in the evaluation records."
        ],
        "feedback": [
            "This variation is clear and succinct. However, it could further emphasize that we are looking at a summing action.",
            "Good phrasing but might benefit from specifying that it refers to specific evaluation records or data.",
            "Accurate and clear, yet adding a bit more context about the evaluation could enhance clarity."
        ],
        "query": "SELECT sum(bonus) FROM evaluation",
        "original_utterance": "Find the total amount of bonus given in all the evaluations."
    },
    {
        "init": [
            "Can you provide all the details from the hiring table?",
            "Show me all the information available in the hiring dataset.",
            "List everything contained within the hiring records."
        ],
        "final": [
            "Can you provide all the details about hiring?",
            "Show me all the information related to hiring.",
            "List all the hiring records."
        ],
        "feedback": [
            "This variation is clear in asking for all details but could avoid technical terminology like 'table'.",
            "Good phrasing but using 'dataset' might be too technical; 'information' is more accessible.",
            "Concise and accurate, but 'records' might be simpler and more user-friendly than 'contained within'."
        ],
        "query": "SELECT * FROM hiring",
        "original_utterance": "Give me all the information about hiring."
    },
    {
        "init": [
            "Show me all the records from the hiring table.",
            "Can you provide all the entries in the hiring dataset?",
            "Fetch all the information from the hiring table."
        ],
        "final": [
            "Show me all the records from hiring.",
            "Can you provide all the records in the hiring dataset?",
            "Fetch all the records from hiring."
        ],
        "feedback": [
            "Clear and straightforward, but explicitly mentioning 'table' could be simplified to avoid technical jargon.",
            "Using 'dataset' instead of 'table' may align better with natural language but 'entries' can be simplified to 'records' to align better with non-technical terms.",
            "Concise but could omit the term 'table' to avoid technical phrasing. Consider using 'records' instead of 'information' for consistency."
        ],
        "query": "SELECT * FROM hiring",
        "original_utterance": "What is all the information about hiring?"
    }
]