[
    {
        "init": [
            "Which country does JetBlue Airways belong to?",
            "Can you tell me the country of origin for JetBlue Airways?",
            "Find out the country associated with the airline JetBlue Airways."
        ],
        "final": [
            "Which country does JetBlue Airways belong to?",
            "Can you tell me the country associated with JetBlue Airways?",
            "Find the country associated with the airline JetBlue Airways."
        ],
        "feedback": [
            "Clear and concise. Perfectly aligns with the SQL query intent and avoids technical jargon.",
            "Good phrasing, but 'country of origin' might slightly confuse users who just want to know the country associated with JetBlue Airways.",
            "Accurate and clear, though the phrase 'find out' might be simplified for brevity and natural flow."
        ],
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_utterance": "What country is Jetblue Airways affiliated with?"
    },
    {
        "init": [
            "What is the abbreviation for JetBlue Airways?",
            "Can you provide the abbreviation of the airline JetBlue Airways?",
            "Find the abbreviation for the airline JetBlue Airways."
        ],
        "final": [
            "What is the abbreviation for JetBlue Airways?",
            "Can you provide the abbreviation for JetBlue Airways?",
            "Find the abbreviation for JetBlue Airways."
        ],
        "feedback": [
            "This variation is clear and concise. It accurately conveys the intent of the original query without any SQL-specific terminology.",
            "The phrase 'Can you provide' makes the request polite and formal, but it could be shortened for brevity. The term 'of the airline' can be implied and may be redundant.",
            "Accurate and clear. It captures the essence of the SQL query without including direct SQL terms. However, 'Find the abbreviation for JetBlue Airways' without 'the airline' also works and is more natural."
        ],
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_utterance": "Which abbreviation corresponds to Jetblue Airways?"
    },
    {
        "init": [
            "Show me all airlines and their abbreviations based in the USA.",
            "Which airlines and their codes are from the USA?",
            "Can you list the airlines and their abbreviations that are located in the USA?"
        ],
        "final": [
            "Show me all airlines and their abbreviations from the USA.",
            "Which airlines and their abbreviations are from the USA?",
            "Can you list the airlines and their abbreviations that are located in the USA?"
        ],
        "feedback": [
            "This variation is clear, but 'based in the USA' could be changed to 'from the USA' for better consistency with the query's intent.",
            "Accurate and clear. However, the term 'codes' might be less specific than 'abbreviations'. Stick to 'abbreviations' as mentioned in the SQL query.",
            "This is clear and accurate. No SQL terms are used, ensuring natural language flow."
        ],
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_utterance": "What are the airline names and abbreviations for airlines in the USA?"
    },
    {
        "init": [
            "Show me the airport codes and names for airports located in Anthony.",
            "Can you list the airport codes and names for all airports in the city of Anthony?",
            "Please provide the airport codes and names for airports in Anthony."
        ],
        "final": [
            "Show me the airport codes and names for the airports located in the city of Anthony.",
            "Can you list the airport codes and names for all airports in Anthony?",
            "Please provide the airport codes and names for airports located in the city of Anthony."
        ],
        "feedback": [
            "Clear and concise, but could specify more about what kind of information (both code and name) is requested.",
            "Good phrasing and specifies the city, but it could be slightly more direct for brevity.",
            "Accurate and straightforward. No significant changes needed, but might benefit from adding 'in the city of Anthony' for clarity."
        ],
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "original_utterance": "Give the airport code and airport name corresonding to the city Anthony."
    },
    {
        "init": [
            "How many airlines are there in the database?",
            "Can you tell me the total number of airlines?",
            "What is the total count of airlines in the system?"
        ],
        "final": [
            "How many airlines are there in the database?",
            "Can you tell me the total number of airlines?",
            "What is the total count of airlines in the system?"
        ],
        "feedback": [
            "This variation is clear and straightforward. No changes needed.",
            "Good phrasing. It remains direct and to the point. No changes needed.",
            "Accurate and concise. However, using 'in the system' instead of 'in the database' may be slightly more user-friendly."
        ],
        "query": "SELECT count(*) FROM AIRLINES",
        "original_utterance": "What is the total number of airlines?"
    },
    {
        "init": [
            "How many airports are in the database?",
            "Can you tell me the total number of airports?",
            "What is the count of airports recorded in the system?"
        ],
        "final": [
            "How many airports are in the database?",
            "Can you tell me the number of airports?",
            "What is the number of airports recorded in the system?"
        ],
        "feedback": [
            "This variation is clear and directly relates to the SQL query. No changes are needed.",
            "Good phrasing, but 'total number' could be redundant since 'number' implies a total count by default. Consider simplifying it.",
            "The term 'recorded in the system' is good to avoid technical jargon, but 'count of airports' might be more streamlined as 'number of airports.'"
        ],
        "query": "SELECT count(*) FROM AIRPORTS",
        "original_utterance": "Return the number of  airports."
    },
    {
        "init": [
            "How many flights are available in the database?",
            "Can you provide the total number of flights?",
            "What is the count of all flights recorded?"
        ],
        "final": [
            "How many flights are available in the database?",
            "Can you show the total number of flights?",
            "What is the total count of all flights?"
        ],
        "feedback": [
            "This variation is clear and correctly conveys the intent. No changes needed.",
            "This variation is accurate but could be slightly more natural by using 'show' instead of 'provide.'",
            "The phrasing is correct; however, it may sound slightly formal. Consider using simpler language."
        ],
        "query": "SELECT count(*) FROM FLIGHTS",
        "original_utterance": "Return the number of flights."
    },
    {
        "init": [
            "Which airline has the abbreviation 'UAL'?",
            "Can you find the airline with the abbreviation 'UAL'?",
            "Tell me the name of the airline abbreviated as 'UAL'."
        ],
        "final": [
            "Which airline has the abbreviation 'UAL'?",
            "Can you find the airline currently listed with the abbreviation 'UAL'?",
            "What is the name of the airline abbreviated as 'UAL'?"
        ],
        "feedback": [
            "This variation is clear and accurate. It effectively states the intent of the SQL query.",
            "Good phrasing, but it could specify 'currently listed' for more precision to avoid any ambiguity.",
            "The phrasing is appropriate, but it could be made more concise without changing the meaning."
        ],
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "original_utterance": "Give the airline with abbreviation 'UAL'."
    },
    {
        "init": [
            "How many airlines are based in the USA?",
            "Can you count the number of airlines that operate in the USA?",
            "Find the total number of airlines located in the USA."
        ],
        "final": [
            "How many airlines are based in the USA?",
            "Can you tell me the number of airlines headquartered in the USA?",
            "Find the total number of airlines based in the USA."
        ],
        "feedback": [
            "Clear and accurate. No changes needed as it directly asks for the count of airlines based in the USA without any SQL-specific terms.",
            "The mention of 'operate' could cause slight ambiguity as it implies active operation rather than being based. Avoid SQL terminology like 'count' and consider specifying 'based in.'",
            "Natural language flow is good, but it uses 'located' which could be synonymous with being 'based' or physically present. A slight shift from SQL terms would make it more natural."
        ],
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_utterance": "Return the number of airlines in the USA."
    },
    {
        "init": [
            "Which city and country is the Alton airport located in?",
            "Provide the city and country for the airport named Alton.",
            "Can you tell me the city and country where the Alton airport is situated?"
        ],
        "final": [
            "Which city and country is the Alton airport located in?",
            "Provide the city and country where the airport named Alton is located.",
            "Can you tell me the city and country where the Alton airport is situated?"
        ],
        "feedback": [
            "This variation accurately captures the query's intent. The mention of 'Alton airport' is clear and aligns well with the SQL query.",
            "This phrasing is clear but could perhaps include a little more context such as using 'where' instead of 'for', which is more natural in human language.",
            "This variation is accurate and natural. It avoids SQL-specific terminology and confirms the intent effectively."
        ],
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "original_utterance": "Give the city and country for the Alton airport."
    },
    {
        "init": [
            "What is the name of the airport with the code 'AKO'?",
            "Can you tell me the airport name for the code 'AKO'?",
            "Find the airport name that corresponds to the airport code 'AKO'."
        ],
        "final": [
            "What is the airport name for the code 'AKO'?",
            "Can you tell me the airport name for the code 'AKO'?",
            "Find the name of the airport with the code 'AKO'."
        ],
        "feedback": [
            "This variation clearly asks for the airport name but could be briefly more specific that it's an airport code being referenced.",
            "Very clear and accurate. This variation properly specifies what information is being sought.",
            "Accurate and concise. However, 'corresponds to' could be simplified to make it more conversational."
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "original_utterance": "Return the name of the airport with code 'AKO'."
    },
    {
        "init": [
            "Which airport is located in Aberdeen?",
            "Can you tell me the name of the airport in Aberdeen?",
            "What is the name of the airport in Aberdeen?"
        ],
        "final": [
            "Which airport is located in Aberdeen?",
            "Can you tell me the name of the airport in Aberdeen?",
            "What is the name of the airport in Aberdeen?"
        ],
        "feedback": [
            "The variation is clear and accurately represents the SQL query's intent. No technical jargon is present, and no changes are needed.",
            "This is also precise and easily understandable. The phrasing 'tell me' makes it sound more conversational and removes any technicality.",
            "This variation is straightforward and retains the query's intent without any SQL-specific language. No changes are needed."
        ],
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "original_utterance": "What are the names of airports in Aberdeen?"
    },
    {
        "init": [
            "How many flights depart from APG airport?",
            "What's the total number of flights with APG as the departure airport?",
            "Can you count the flights that take off from APG?"
        ],
        "final": [
            "How many flights depart from APG airport?",
            "What's the total number of flights that depart from APG?",
            "Can you count the flights that depart from APG?"
        ],
        "feedback": [
            "This variation is clear and directly asks for the count of flights departing from APG. No changes needed.",
            "Good phrasing, but consider using 'depart from' instead of 'as the departure airport' to improve natural flow.",
            "Accurate and concise. It avoids using technical jargon but could benefit from just a tiny tweak for natural language fluency, such as replacing 'take off' with 'depart'."
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_utterance": "Count the number of flights departing from 'APG'."
    },
    {
        "init": [
            "How many flights are arriving at ATO airport?",
            "Can you tell me the number of flights headed to ATO airport?",
            "Find the total count of flights with ATO as their destination."
        ],
        "final": [
            "How many flights are arriving at ATO airport?",
            "Can you tell me the number of flights with ATO as their destination?",
            "Find the count of flights with ATO as their destination."
        ],
        "feedback": [
            "This variation is clear and concise. It correctly captures the query's intent without using SQL jargon.",
            "Good phrasing, but 'headed to' can be misinterpreted. 'Arriving at' or 'with ATO as a destination' provides better clarity.",
            "Accurate and concise. It effectively captures the original query's essence. Removing the term 'total' might improve brevity and clarity."
        ],
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "original_utterance": "Count the number of flights into ATO."
    },
    {
        "init": [
            "How many flights depart from airports located in Aberdeen?",
            "Can you provide the total number of flights that take off from Aberdeen?",
            "What is the count of all flights originating from Aberdeen's airports?"
        ],
        "final": [
            "How many flights depart from airports in Aberdeen?",
            "Can you provide the total number of flights departing from airports in Aberdeen?",
            "What is the count of all flights originating from Aberdeen's airports?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the query's intent. The phrase 'flights depart from airports' is a bit redundant but still understandable.",
            "The phrase 'total number of flights' is precise, but 'take off from Aberdeen' might be less formal. Consider using 'depart from airports in Aberdeen' for clarity.",
            "Clear and concise. The term 'originating from Aberdeen's airports' is accurate and natural, avoiding any SQL jargon."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "Return the number of flights departing from Aberdeen."
    },
    {
        "init": [
            "How many flights have a destination airport located in Aberdeen?",
            "Count the number of flights that land in Aberdeen.",
            "Show me the total number of flights arriving in Aberdeen."
        ],
        "final": [
            "How many flights have a destination airport located in Aberdeen?",
            "Count the number of flights that land in Aberdeen.",
            "Show me the total count of flights currently arriving in Aberdeen."
        ],
        "feedback": [
            "This variation is clear and matches the SQL query's intent. No changes needed, but it might be less formal than necessary.",
            "This is a precise phrasing that parallels the SQL query accurately. No changes needed.",
            "Good phrasing, but adding 'currently' might offer more clarity that it refers to present data. Otherwise, no technical terms are used, which is good."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "Return the number of flights arriving in Aberdeen."
    },
    {
        "init": [
            "How many flights are there from Aberdeen to Ashley?",
            "Can you count the flights that go from Aberdeen to Ashley?",
            "Show me the total number of flights traveling from Aberdeen to Ashley."
        ],
        "final": [
            "How many total flights are there from Aberdeen to Ashley?",
            "Can you count the number of flights from Aberdeen to Ashley?",
            "Show me the total count of flights traveling from Aberdeen to Ashley."
        ],
        "feedback": [
            "This question is clear and directly relevant to the original SQL query, but it could specify that you are counting the flights to avoid ambiguity.",
            "Accurate and clear. It effectively matches the SQL intent, but 'count the flights' can be more direct by asking 'how many flights'.",
            "Shows clarity and assures the user of the exhaustive nature of the count. It's a good and comprehensive variation."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "original_utterance": "How many flights fly from Aberdeen to Ashley?"
    },
    {
        "init": [
            "How many flights are operated by JetBlue Airways?",
            "Can you tell me the number of flights available from JetBlue Airways?",
            "Find the total count of flights provided by JetBlue Airways."
        ],
        "final": [
            "How many flights are operated by JetBlue Airways?",
            "Can you tell me the number of flights from JetBlue Airways?",
            "Find the total count of flights operated by JetBlue Airways."
        ],
        "feedback": [
            "This variation is clear and directly aligns with the original SQL query. No mentions of SQL-specific language or structure.",
            "This phrasing is good but could be slightly more concise by omitting 'available', which might suggest flight availability status rather than a count.",
            "Accurate and clear, but the word 'provided' could be replaced with 'operated' to better reflect the original query's intent."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "original_utterance": "Give the number of Jetblue Airways flights."
    },
    {
        "init": [
            "How many flights are there from United Airlines that are destined for ASY?",
            "Can you count the number of United Airlines flights landing at ASY?",
            "Show me the total number of flights operated by United Airlines that arrive at ASY."
        ],
        "final": [
            "How many United Airlines flights are destined for ASY?",
            "Can you count the number of United Airlines flights arriving at ASY?",
            "Show me the total number of United Airlines flights that arrive at ASY."
        ],
        "feedback": [
            "This variation captures the intent accurately but could be slightly more concise by removing 'are there'.",
            "It accurately reflects the query but can be improved by rephrasing 'landing at' to 'arriving at' for better natural flow.",
            "Clear and concise, capturing all key elements. No major improvements needed, but consider a slight rephrasing for consistency with the other variations."
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "original_utterance": "Count the number of United Airlines flights arriving in ASY Airport."
    },
    {
        "init": [
            "How many flights are operated by United Airlines from the AHD airport?",
            "Can you count the number of United Airlines flights departing from AHD?",
            "What is the total number of flights United Airlines has departing from AHD airport?"
        ],
        "final": [
            "How many flights are operated by United Airlines from the AHD airport?",
            "Can you provide the total number of United Airlines flights departing from AHD airport?",
            "What is the total number of flights United Airlines has departing from AHD airport?"
        ],
        "feedback": [
            "Clear and concise. It accurately captures the original query's intent without using technical jargon. No changes needed.",
            "Good phrasing, but 'count' can be replaced with a more natural term like 'total number' for improved clarity. Also, make it explicit by mentioning 'airport' after 'AHD'.",
            "Clear and precise in asking for the total number of flights. Avoids technical mentions entirely. No changes needed."
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "original_utterance": "Return the number of United Airlines flights leaving from AHD Airport."
    },
    {
        "init": [
            "How many flights by United Airlines are landing in Aberdeen?",
            "Count the number of United Airlines flights arriving at Aberdeen.",
            "Show the total number of United Airlines flights with Aberdeen as their destination."
        ],
        "final": [
            "How many flights by United Airlines are landing in Aberdeen?",
            "Count the number of United Airlines flights arriving at Aberdeen.",
            "Show the total number of United Airlines flights with Aberdeen as their destination."
        ],
        "feedback": [
            "This variation is clear and accurate but could specify that the flights are counted. 'Landing in Aberdeen' is a good natural language translation of the SQL condition.",
            "Good phrasing. It\u2019s straightforward and precise. Just ensure 'arriving at Aberdeen' is equivalent to 'DestAirport = Aberdeen'.",
            "This variation is also accurate but needs to better emphasize the counting aspect. 'Show the total number' is a good natural language phrase that correctly translates 'count(*)'."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "original_utterance": "Count the number of United Airlines flights that arrive in Aberdeen."
    },
    {
        "init": [
            "Which city has the highest number of flights arriving?",
            "Can you find the city with the most incoming flights?",
            "Show me the city that receives the most flights."
        ],
        "final": [
            "Which city currently has the highest number of flights arriving?",
            "Can you find the city that currently has the most incoming flights?",
            "Show me the city that currently receives the most flights."
        ],
        "feedback": [
            "This variation is clear and directly addresses the query, but specifying that it is based on the number of flights observed would improve clarity.",
            "Good phrasing overall but could benefit by explicitly stating that it\u2019s about the city with the most flights arriving currently recorded.",
            "Accurate and concise, but adding 'currently' will clarify that it's based on present data."
        ],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which city has the most frequent destination airport?"
    },
    {
        "init": [
            "Which city has the airport with the highest number of departing flights?",
            "Show me the city with the most departures from its airport.",
            "What city has the airport where the most flights are departing from?"
        ],
        "final": [
            "Which city has the highest number of departing flights from its airports?",
            "Show me the city with the most flights departing from its airports.",
            "What city has the most departing flights from its airports?"
        ],
        "feedback": [
            "Clear and accurately captures the intent of the SQL query. No mention of technical terms like 'GROUP BY' or 'ORDER BY'.",
            "Good variation, but it could be phrased to avoid potential confusion. Instead of 'departures from its airport,' it could explicitly mention 'from its airports'.",
            "Accurate and concise but could avoid the term 'airport' twice. Consider making it simpler for clarity."
        ],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which city is the most frequent source airport?"
    },
    {
        "init": [
            "Which airport appears most frequently in the flights database, either as a source or destination?",
            "What's the airport code of the most frequently used airport in flight records?",
            "Identify the airport with the highest number of appearances in the flight schedules as a departure or arrival location."
        ],
        "final": [
            "Which airport is mentioned most frequently as either a source or destination in flight records?",
            "What's the code of the most frequently used airport in flight records?",
            "Find the airport with the highest number of mentions as a departure or arrival location."
        ],
        "feedback": [
            "This variation is clear and directly asks for the information but could avoid mentioning the 'flights database' for better natural language flow.",
            "Good phrasing, but it may be improved by specifying that it is about the 'most frequently used airport' without the database terminology.",
            "This is clear and avoids technical jargon, but it could be phrased more concisely. 'Identify' sounds formal for natural conversation."
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the airport code of the airport with the most flights?"
    },
    {
        "init": [
            "Which airport code appears the most frequently as either a destination or source in flights?",
            "Find the airport code that comes up the most in flight records, either as a source or a destination.",
            "What is the airport code with the highest number of flights listed, regardless of being a source or destination?"
        ],
        "final": [
            "Which airport code appears most frequently as either a destination or source in flight records?",
            "Find the airport code that appears the most in flights, either as a source or destination.",
            "What is the airport code with the highest number of flights logged as either the starting point or endpoint?"
        ],
        "feedback": [
            "This variation is clear and captures the logic well. However, it's better to clarify that it is looking for the 'most frequently' occurring airport in this context.",
            "Good representation of the SQL query intent. Avoid using 'records' and stick to familiar concepts for non-technical users, such as 'flights.'",
            "This version is quite accurate and explicitly mentions 'source' and 'destination.' No substantial changes are needed but you can emphasize the high number of flights."
        ],
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "original_utterance": "Give the code of the airport with the least flights."
    },
    {
        "init": [
            "Which airline has the most flights?",
            "Which airline offers the highest number of flights?",
            "Can you tell me the airline with the maximum number of flights?"
        ],
        "final": [
            "Which airline has the most flights?",
            "Which airline offers the highest number of flights?",
            "Can you tell me the airline with the maximum number of flights currently?"
        ],
        "feedback": [
            "This variation is clear and concise. However, 'most flights' should be clarified as 'the most flights' to align more closely with the intent.",
            "This is a precise and accurate variation. It captures the intent without any SQL-specific jargon. No changes are needed.",
            "The phrase 'maximum number of flights' correctly conveys the query's purpose. However, adding 'currently' could make it clearer that it's based on current data."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What airline serves the most flights?"
    },
    {
        "init": [
            "Which airline, with its abbreviation and country, has the fewest flights?",
            "Show the airline abbreviation and country with the minimum number of flights.",
            "Find the airline with the least number of flights including its abbreviation and country."
        ],
        "final": [
            "Which airline has the fewest number of flights? Please provide its abbreviation and country.",
            "Show the airline abbreviation and country with the least number of flights.",
            "Find the airline with the fewest flights including its abbreviation and country."
        ],
        "feedback": [
            "This variation is accurate but could be more precise by specifying it is the airline with the fewest number of flights.",
            "Clear and concise, but it can specify that it is a search for the airline with the minimum number of flights in a comparative sense.",
            "This phrasing is good, but 'least number of flights' should be clarified as the 'fewest number of flights' for more natural phrasing."
        ],
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_utterance": "What is the abbreviation of the airilne has the fewest flights and what country is it in?"
    },
    {
        "init": [
            "Which airlines operate flights from AHD airport?",
            "Can you list the airlines that have flights departing from AHD airport?",
            "Show me the airlines that have their flights leaving from AHD airport."
        ],
        "final": [
            "Which airlines operate flights from AHD Airport?",
            "Can you list the airlines that have flights departing from AHD Airport?",
            "Show me the airlines that have their flights leaving from AHD Airport."
        ],
        "feedback": [
            "This variation is straightforward and captures the intent well. The term 'operate' might be slightly ambiguous, but it generally works.",
            "Accurate and clear. It would be helpful to use the full name of the airport for better understanding, as 'AHD' might not be well-known.",
            "Good wording with 'leaving from,' making it sound natural. However, like the previous variation, it might benefit from clarifying what 'AHD' stands for."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "original_utterance": "Which airlines have a flight with source airport AHD?"
    },
    {
        "init": [
            "Which airlines have flights that land at AHD airport?",
            "Can you list the airlines operating flights to AHD airport?",
            "Show me the names of airlines that fly to AHD."
        ],
        "final": [
            "Which airlines have flights that land at AHD airport?",
            "Can you list the airlines with flights to AHD airport?",
            "Show me the names of airlines that fly to AHD."
        ],
        "feedback": [
            "This variation is clear and correct but can be refined to use full names instead of abbreviations, like 'AHD airport.' Remember that users might not know the airport code.",
            "Good phrasing but can avoid the term 'operating,' which is technical. Simplify the language to make it more user-friendly.",
            "Concise and correct. No mention of SQL terms, which is good, but ensure it explicitly states it's about flights to avoid ambiguity."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "original_utterance": "Which airlines have a flight with destination airport AHD?"
    },
    {
        "init": [
            "Which airlines operate flights from both APG and CVO airports?",
            "Show me the airlines that have flights departing from APG and CVO.",
            "Find the airlines that fly out from both APG and CVO airports."
        ],
        "final": [
            "Which airlines fly from both APG and CVO airports?",
            "Show me the airlines that have flights from APG and CVO.",
            "Find the airlines that fly from both APG and CVO airports."
        ],
        "feedback": [
            "Clear and accurate, but 'operate flights' could be phrased more naturally as 'fly from'.",
            "Good phrasing, but consider removing 'departing' to make it simpler and more general.",
            "Accurate and concise. No major changes needed, but simplify 'fly out from' to just 'fly from'."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "original_utterance": "Which airlines have departing flights from both APG and CVO airports?"
    },
    {
        "init": [
            "Which airlines operate from CVO but not from APG?",
            "Can you list the airlines that fly out of CVO but do not fly out of APG?",
            "Find the airlines that have flights departing from CVO but not from APG."
        ],
        "final": [
            "Which airlines operate from CVO but not from APG?",
            "Can you list the airlines that fly out of CVO but don't have flights from APG?",
            "Find the airlines that have flights leaving CVO but not APG."
        ],
        "feedback": [
            "This variation is clear and succinct. It accurately conveys the query's intent without any technical jargon. No significant changes needed.",
            "The phrase 'fly out of' is more conversational and clear. However, 'do not fly out of APG' could be slightly refined to enhance clarity.",
            "This is a very close match to the SQL query's intent. However, consider rephrasing 'departing from' to make it a little more conversational and less technical."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "original_utterance": "Which airlines have departures from CVO but not from APG airports?"
    },
    {
        "init": [
            "Which airlines have more than ten flights?",
            "Can you provide a list of airlines that operate more than ten flights?",
            "Identify airlines with flight counts exceeding ten."
        ],
        "final": [
            "Which airlines operate more than ten flights each?",
            "Can you provide a list of airlines that have more than ten flights in total?",
            "Identify airlines with more than ten flights."
        ],
        "feedback": [
            "This variation is clear and concise. It directly asks for the airline count but could use slightly more detail specifying that it is the total flights operated by each airline.",
            "Accurate phrasing, but 'operate' might be less clear in certain contexts. Consider rephrasing to indicate it's about the total number of flights per airline.",
            "Good clarity and conveys the intent well. It uses the term 'flight counts' which might be slightly technical. Simplifying this would be beneficial."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "original_utterance": "Which airlines have at least 10 flights?"
    },
    {
        "init": [
            "Which airlines have fewer than 200 flights?",
            "List the airlines that operate under 200 flights.",
            "Show me the airlines that have less than 200 total flights."
        ],
        "final": [
            "Which airlines have fewer than 200 flights?",
            "List the airlines that have fewer than 200 total flights.",
            "Show me the airlines that currently operate fewer than 200 flights."
        ],
        "feedback": [
            "This variation is clear and accurate. No changes are necessary.",
            "The term 'operate' ties well into the context. It's clear but could be confused with active operations rather than total flights historically. Maybe specify 'total flights' for clarity.",
            "This variation is accurate and concise but could specify 'currently operate' to avoid historical ambiguity."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "original_utterance": "Which airlines have less than 200 flights?"
    },
    {
        "init": [
            "List the flight numbers of all flights operated by United Airlines.",
            "Can you show me the flight numbers for flights run by United Airlines?",
            "Provide the flight numbers for flights scheduled by United Airlines."
        ],
        "final": [
            "List the flight numbers of all flights operated by United Airlines.",
            "Can you show me the flight numbers for flights run by United Airlines?",
            "Provide the flight numbers for all flights operated by United Airlines."
        ],
        "feedback": [
            "Clear and accurate. It mentions the key elements: flight numbers and United Airlines. No reference to specific SQL structure, making it accessible.",
            "Also clear and relevant, though 'run by' is slightly less formal but still acceptable. It keeps away from SQL jargon, maintaining natural language.",
            "Accurate and easy to understand. The term 'scheduled by' could be misinterpreted as focusing on future flights, but it generally fits the context without using SQL-specific terms."
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "original_utterance": "Which flight numbers correspond to United Airlines flights?"
    },
    {
        "init": [
            "Show me the flight numbers for flights departing from APG.",
            "Can you list the flight numbers that take off from APG airport?",
            "Which flights have APG as their source airport?"
        ],
        "final": [
            "Show me the flight numbers departing from APG.",
            "Can you list the flight numbers departing from APG airport?",
            "Which flight numbers have APG as their source airport?"
        ],
        "feedback": [
            "The variation is clear and accurate; however, it might be more natural to phrase it as a request for 'departing' rather than 'for flights departing'.",
            "This variation is good but can be simplified for better readability by changing 'that take off' to 'departing'.",
            "This variation is clear, but adding the word 'numbers' can make it more precise and directly aligned with the query."
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_utterance": "Give the flight numbers of flights leaving from APG."
    },
    {
        "init": [
            "Show me the flight numbers for flights arriving at APG airport.",
            "Can you list the flights that are destined for APG airport?",
            "Find the flight numbers of flights going to APG."
        ],
        "final": [
            "Show me the flight numbers for flights arriving at APG airport.",
            "Can you list the flight numbers of flights destined for APG airport?",
            "Find the flight numbers of flights headed to APG."
        ],
        "feedback": [
            "This variation is clear and appropriately captures the intent of the SQL query. Mentioning 'flight numbers' removes ambiguity.",
            "The term 'destined for' is a clear way to convey the query intent, but adding 'flight numbers' would improve clarity.",
            "This variation directly addresses the query and is clear. However, the word 'going' could be seen as informal, so refining this could be beneficial."
        ],
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "original_utterance": "Give the flight numbers of flights landing at APG."
    },
    {
        "init": [
            "Show me the flight numbers of flights departing from Aberdeen.",
            "What are the flight numbers for flights that depart from Aberdeen?",
            "List the flight numbers of all flights leaving from Aberdeen."
        ],
        "final": [
            "Show me the flight numbers of flights departing from Aberdeen.",
            "What are the flight numbers for flights that depart from Aberdeen?",
            "List the flight numbers of all flights leaving from Aberdeen."
        ],
        "feedback": [
            "This variation is clear and straightforward but could specify 'flight numbers' for clarity instead of just saying 'flights'.",
            "This variation uses natural language effectively. It avoids SQL-specific terms, maintaining user-friendly phrasing.",
            "Accurate and concise. No SQL-specific technical jargon is used, making it user-friendly."
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "Give the flight numbers of flights leaving from Aberdeen."
    },
    {
        "init": [
            "Can you list the flight numbers for flights landing in Aberdeen?",
            "What are the flight numbers for planes arriving at Aberdeen's airport?",
            "Show me the flight numbers of all flights whose destination is Aberdeen."
        ],
        "final": [
            "Can you list the flight numbers for flights arriving in Aberdeen?",
            "What are the flight numbers for planes arriving at the Aberdeen airport?",
            "Show me the flight numbers of all flights whose destination is Aberdeen."
        ],
        "feedback": [
            "This variation is specific and clear, but 'landing in' might be too informal; 'arriving in' can be more precise.",
            "Good phrasing, but it presumes there's a single airport in Aberdeen. It might be more precise to specify 'Aberdeen airport' without assuming uniqueness.",
            "Accurate and concise. Good use of 'destination is Aberdeen' to match the SQL query intent without technical language."
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "Give the flight numbers of flights arriving in Aberdeen."
    },
    {
        "init": [
            "How many flights land in either Aberdeen or Abilene?",
            "Can you tell me the total number of flights arriving at airports in Aberdeen and Abilene?",
            "Find the count of flights whose destinations are either in Aberdeen or Abilene."
        ],
        "final": [
            "How many flights land in all airports either in Aberdeen or Abilene?",
            "Can you tell me the total number of flights arriving at airports in Aberdeen and Abilene?",
            "Find the count of flights whose destinations are either in Aberdeen or Abilene."
        ],
        "feedback": [
            "Clear and concise, but it could be more specific by mentioning 'all' flights to avoid ambiguity.",
            "Accurate and detailed. No major changes needed. It avoids SQL-specific jargon and is easy to understand.",
            "Very accurate and clear. The term 'count' is appropriate in natural language here. No changes needed."
        ],
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "original_utterance": "How many flights land in Aberdeen or Abilene?"
    },
    {
        "init": [
            "Which airports don't have any outgoing or incoming flights?",
            "List all airports that are not used as a source or destination in any flight.",
            "Can you find the names of airports that are not involved in any flight routes?"
        ],
        "final": [
            "Which airports currently don't have any outgoing or incoming flights?",
            "List all airports that are not used as a source or destination in any flight.",
            "Can you find the names of airports that are not involved in any flight routes?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the query intent but could be made slightly more precise by mentioning 'currently don't have.'",
            "The phrase 'not used as a source or destination in any flight' is exact and aligns well with the SQL query. It's very clear.",
            "This variation is accurate and clear. It avoids technical jargon and remains relevant to the SQL query intent. No changes needed."
        ],
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "original_utterance": "Which airports do not have departing or arriving flights?"
    },
    {
        "init": [
            "How many pets weigh more than 10 units?",
            "Can you tell me the number of pets that have a weight greater than 10?",
            "Count all the pets whose weight exceeds 10."
        ],
        "final": [
            "How many pets weigh more than 10?",
            "Can you tell me the number of pets that have a weight greater than 10?",
            "Count all the pets that weigh over 10."
        ],
        "feedback": [
            "The term 'units' might be unnecessary or ambiguous. Consider simplifying it by just stating the weight.",
            "This variation is clear and precise. It avoids SQL jargon and accurately conveys the query's intent.",
            "This variation is also clear and concise but could benefit from a slight rephrasing to sound more natural."
        ],
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "original_utterance": "How many pets have a greater weight than 10?"
    },
    {
        "init": [
            "What is the weight of the youngest pet?",
            "Can you give me the weight of the pet with the least age?",
            "Show me the weight of the pet that is the youngest."
        ],
        "final": [
            "What is the weight of the youngest pet?",
            "Can you give me the weight of the youngest pet?",
            "Show me the weight of the youngest pet."
        ],
        "feedback": [
            "This variation is clear and accurately captures the essence of the SQL query. No changes needed.",
            "The phrase 'least age' is less natural than 'youngest.' Changing it to 'youngest' will make it more clear.",
            "This variation is clear but could be slightly refined for better flow. The phrase 'that is the youngest' could be simplified to 'the youngest pet'."
        ],
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_utterance": "How much does the youngest dog weigh?"
    },
    {
        "init": [
            "What is the maximum weight recorded for each type of pet?",
            "Show me the heaviest pet for each pet type.",
            "Which type of pet has the highest maximum weight?"
        ],
        "final": [
            "What is the maximum weight recorded for each type of pet?",
            "Show me the highest weight for each pet type.",
            "What is the maximum weight for pets of each type?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the essence of the query.",
            "The wording 'heaviest pet' suggests a single pet rather than a weight category. Rephrasing might help to align it better with the query that seeks max weight for each type.",
            "This variation slightly suggests a comparison among types rather than listing each type's maximum weight. It needs clarification to match the SQL query more precisely."
        ],
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "original_utterance": "List the maximum weight and type for each type of pet."
    },
    {
        "init": [
            "How many students over the age of 20 have pets?",
            "Count the number of students older than 20 who own pets.",
            "Can you tell me the total number of students above 20 years old who have pets?"
        ],
        "final": [
            "How many students over the age of 20 have pets?",
            "Count the number of students older than 20 who own pets.",
            "Can you tell me the number of students above 20 years old who have pets?"
        ],
        "feedback": [
            "Clear and accurate, but could be slightly more explicit in describing the relationship between students and pets to avoid confusion.",
            "Good phrasing, straightforward and gets straight to the point. It avoids SQL-specific terminology, ensuring ease of understanding for non-technical users.",
            "Accurate and concise, but slightly wordy. The term 'total number' is clear but can be simplified to 'number of.'"
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "original_utterance": "How many pets are owned by students that have an age greater than 20?"
    },
    {
        "init": [
            "How many female students have dogs as pets?",
            "Count the number of female students who own dogs.",
            "What is the total number of female students with dogs?"
        ],
        "final": [
            "How many female students have dogs as pets?",
            "Count the number of female students who own dogs.",
            "How many female students have dogs?"
        ],
        "feedback": [
            "This is clear and communicates the query intent. No SQL-specific terms are used, which is good.",
            "This phrasing is accurate and concise, but the term 'own' might slightly imply ownership rather than merely having. The natural language flow is good.",
            "Accurate and clear, though it's a bit longer than necessary. The term 'total number' adds redundancy and could be shortened for brevity."
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "original_utterance": "How many dog pets are raised by female students?"
    },
    {
        "init": [
            "How many distinct types of pets are there?",
            "Can you tell me the number of unique pet types in the database?",
            "What is the total count of different pet types recorded?"
        ],
        "final": [
            "How many distinct types of pets are there?",
            "Can you tell me the number of unique pet types?",
            "What is the total count of different pet types?"
        ],
        "feedback": [
            "This variation is clear and concise, capturing the intention of counting distinct pet types without technical jargon.",
            "This phrasing is good but could be made more concise. The term 'in the database' is superfluous and can be omitted to improve naturalness.",
            "The wording 'total count of different pet types' is slightly verbose. The word 'recorded' might be unnecessary and could be omitted to improve brevity."
        ],
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "original_utterance": "How many different types of pet are there?"
    },
    {
        "init": [
            "Which students have either a cat or a dog as a pet?",
            "Can you list the names of students who own a cat or a dog?",
            "Show me the students who have pets that are either cats or dogs."
        ],
        "final": [
            "Which students have a cat or a dog as a pet?",
            "Can you name the students who own a cat or a dog?",
            "Show me the students who have cats or dogs as pets."
        ],
        "feedback": [
            "This variation is clear and accurately asks for the students with either a cat or dog. No changes needed, but consider rephrasing to avoid using 'either' for simplicity.",
            "Good phrasing and clear intention, however, it could be more concise. Consider rephrasing for simplicity and clarity.",
            "This variation accurately reflects the SQL query but could be shortened without losing meaning. Consider simplifying."
        ],
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "original_utterance": "What are the first names of every student who has a cat or dog as a pet?"
    },
    {
        "init": [
            "Find the names of students who own both a cat and a dog.",
            "Show me the students who have both a cat and a dog.",
            "Which students have both cats and dogs as pets?"
        ],
        "final": [
            "Find the names of students who own both a cat and a dog.",
            "Show me the students who have both a cat and a dog.",
            "Which students have both cats and dogs as pets?"
        ],
        "feedback": [
            "The variation is precise and clear. No improvements necessary. The direct statement 'students who own both a cat and a dog' correctly captures the INTERSECT logic.",
            "The phrasing is accurate and clear. It correctly conveys the query's intent. However, the word 'both' can be emphasized to ensure clarity.",
            "This variation is clear and concise. It captures the intent of the SQL query perfectly. No further improvements required."
        ],
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "original_utterance": "What are the students' first names who have both cats and dogs as pets?"
    },
    {
        "init": [
            "Show the major and age of students who do not own a cat.",
            "What are the major and age of students without a cat as a pet?",
            "Find the major and age information for students who have no cats."
        ],
        "final": [
            "Show the major and age of students who do not have cats.",
            "What are the major and age of students without a cat as a pet?",
            "Find the major and age information for students who do not have cats."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query. However, the term 'do not own' might slightly imply ownership, whereas the SQL query checks for students who do not have cats.",
            "Effective and accurate. Explicitly mentioning 'without a cat as a pet' aligns well with the intent of the original SQL query.",
            "This is clear and concise, but the terms 'have no cats' might be more natural as 'do not have cats' to improve readability."
        ],
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "original_utterance": "What major is every student who does not own a cat as a pet, and also how old are they?"
    },
    {
        "init": [
            "Which students do not have a cat as a pet?",
            "Can you find the students who don't own a cat?",
            "Show me the list of students without a cat."
        ],
        "final": [
            "Which students do not have a cat as a pet?",
            "Can you find the students who don't have a cat?",
            "Show me the students who do not have a cat."
        ],
        "feedback": [
            "Clear and directly addresses the query intent by focusing on students who do not have a cat as a pet. Avoids technical terms and remains natural.",
            "Good phrasing, but the word 'own' might imply ownership in a more personal sense; 'have' might be more precise in this context.",
            "Concise and accurate. However, 'list of students' might suggest a broader outcome. Adding specificity about not having a cat would improve clarity."
        ],
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "original_utterance": "What are the ids of the students who do not own cats as pets?"
    },
    {
        "init": [
            "List the names and ages of students who own a dog but do not own a cat.",
            "Can you show me which students have a dog but no cat, including their names and ages?",
            "Find students with a dog and without a cat, and display their first names and ages."
        ],
        "final": [
            "List the names and ages of students who own a dog but do not own a cat.",
            "Show me the students who have a dog but don't have a cat, including their names and ages.",
            "Find students with a dog but without a cat, and display their first names and ages."
        ],
        "feedback": [
            "This variation is clear and straightforward. It accurately captures the SQL query's intent without using technical jargon. No changes needed.",
            "This version is also clear but feels a bit wordier. Consider simplifying the phrasing while maintaining accuracy.",
            "Accurate and concise. It effectively conveys the SQL query's intent without introducing any unnecessary complexity."
        ],
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "original_utterance": "What is the first name of every student who has a dog but does not have a cat?"
    },
    {
        "init": [
            "What type and weight of pet is the youngest in the dataset?",
            "Show me the pet type and weight of the youngest pet recorded.",
            "Find the type and weight of the youngest pet listed."
        ],
        "final": [
            "What type and weight of pet is the youngest?",
            "Show me the pet type and weight of the youngest pet.",
            "Find the type and weight of the youngest pet listed."
        ],
        "feedback": [
            "This variation clearly conveys the intent but mentioning the 'dataset' might be unnecessary for a non-technical user.",
            "Good phrasing, but 'recorded' could imply more technical database language. Simplifying it might improve clarity.",
            "Concise and clear. No changes needed, this version avoids technical jargon effectively."
        ],
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_utterance": "What type of pet is the youngest animal, and how much does it weigh?"
    },
    {
        "init": [
            "Show me the IDs and weights of pets that are older than one year.",
            "Can you list the pet IDs and their weights for all pets aged above one year?",
            "Find the pet IDs and weights for pets whose age is greater than one year."
        ],
        "final": [
            "Show me the IDs and weights of pets that are older than one year.",
            "Can you list the pet IDs and their weights for pets aged above one year?",
            "Find the pet IDs and weights for pets whose age is greater than one year."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the intent. No changes needed.",
            "This variation is good but could be slightly more concise. The phrase 'for all pets aged above one year' is accurate but slightly verbose.",
            "Accurate and concise. No changes needed."
        ],
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "original_utterance": "What is the id and weight of every pet who is older than 1?"
    },
    {
        "init": [
            "What is the average and maximum age of pets for each pet type?",
            "Show me the average age and the oldest pet for every type of pet.",
            "Find the average age and the maximum age for pets grouped by their type."
        ],
        "final": [
            "What is the average and maximum age of pets for each pet type?",
            "Show me the average age and the highest age for every type of pet.",
            "Find the average and maximum ages for pets grouped by their type."
        ],
        "feedback": [
            "Clear and precise. It accurately represents both the average and maximum age for each pet type.",
            "Good phrasing, but using 'oldest pet' could imply looking for a specific pet rather than the age. It might be better to retain the concept of ages.",
            "Accurate but a bit wordy. Simplifying the phrasing could make it more concise while maintaining the query's intent."
        ],
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "original_utterance": "What is the average and maximum age for each pet type?"
    },
    {
        "init": [
            "What is the average weight of each type of pet?",
            "Can you provide the average weight for each pet category?",
            "Find the average weights for all pet types."
        ],
        "final": [
            "What is the average weight of each type of pet?",
            "Can you provide the average weight for each type of pet?",
            "Find the average weight for all pet types."
        ],
        "feedback": [
            "Clearly conveys the query's purpose. It captures the key elements and phrasing is natural. No major improvements needed.",
            "Good variation but 'category' might be interpreted differently. 'Type' is more consistent with the schema terminology 'pettype'.",
            "Concise and accurate but consider changing 'weights' to 'weight' for grammatical correctness and to align more closely with the SQL query's return."
        ],
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "original_utterance": "What is the average weight for each type of pet?"
    },
    {
        "init": [
            "List the unique names and ages of students who have pets.",
            "Show the distinct first names and ages of students who own a pet.",
            "Retrieve distinct names and ages of students associated with pets."
        ],
        "final": [
            "List the distinct names and ages of students who have pets.",
            "Show the distinct names and ages of students who own a pet.",
            "Retrieve distinct names and ages of students who have pets."
        ],
        "feedback": [
            "This variation is clear and expresses the query well. No changes needed, but 'unique' can be changed to 'distinct' for consistency with SQL terminology.",
            "Good phrasing, but 'first names' is more specific than needed. 'Names' would suffice and maintain more generality.",
            "Good variation, but 'associated with' can sound slightly ambiguous. Consider using 'who have' to make it clearer."
        ],
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "original_utterance": "What are the different first names and ages of the students who do have pets?"
    },
    {
        "init": [
            "List the pet IDs for students whose last name is Smith.",
            "Can you find the pet IDs of students with the surname Smith?",
            "Show me the IDs of pets owned by students named Smith."
        ],
        "final": [
            "List the pets for students named Smith.",
            "Can you find the pets of students with the last name Smith?",
            "Show me the pets owned by students named Smith."
        ],
        "feedback": [
            "This variation is clear, but 'the pet IDs' could be changed to 'pets' to be less technical. The phrase 'students whose last name is Smith' could be rephrased for brevity.",
            "The phrase 'the pet IDs of students with the surname Smith' may be improved by simplifying it to avoid ambiguity. 'Find' is a good choice here.",
            "This variation is clear and concise. 'Pets owned by students named Smith' can be shortened slightly to improve flow."
        ],
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "original_utterance": "What is the id of the pet owned by the student whose last name is 'Smith'?"
    },
    {
        "init": [
            "How many pets does each student have?",
            "List the number of pets owned by each student.",
            "Show the count of pets for every student."
        ],
        "final": [
            "How many pets does each student have in the database?",
            "List the number of pets owned by each student in the database.",
            "Show the count of pets for every student in the database."
        ],
        "feedback": [
            "Clear and accurate, but adding a context like 'in the database' may provide more detail and avoid ambiguity.",
            "The phrase 'number of pets owned' is clear, but can be improved by specifying 'each student' for clarity.",
            "Concise and aligns well with the SQL query, but mentioning 'in the database' can help to convey the context better."
        ],
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "original_utterance": "For students who have pets, how many pets does each student have?"
    },
    {
        "init": [
            "Show the names and sex of students who have more than one pet.",
            "Which students have more than one pet along with their gender?",
            "List the first names and genders of students owning multiple pets."
        ],
        "final": [
            "Show the names and sex of students who have more than one pet.",
            "Which students have more than one pet along with their sex?",
            "List the first names and sex of students owning multiple pets."
        ],
        "feedback": [
            "This variation is clear and accurately captures the essence of the SQL query. It avoids technical terms, making it accessible.",
            "The term 'gender' could be replaced with 'sex' to match the schema. Adding 'more than one' helps to be precise.",
            "It's accurate and clear. The usage of 'owning multiple pets' aligns well with the HAVING clause. No changes are necessary."
        ],
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "original_utterance": "What is the first name and gender of the all the students who have more than one pet?"
    },
    {
        "init": [
            "List the last names of students who have a 3-year-old cat.",
            "Which students have a 3-year-old cat as a pet and what are their last names?",
            "Provide the surnames of the students who own a cat that is three years old."
        ],
        "final": [
            "List the last names of students who have a 3-year-old cat.",
            "Which students have a 3-year-old cat and what are their last names?",
            "Provide the last names of the students who own a cat that is three years old."
        ],
        "feedback": [
            "This variation accurately captures the query's intent and uses natural language effectively. It is clear and concise.",
            "This utterance is also clear but could be slightly more concise by removing 'as a pet.' However, it's accurate and provides the necessary information.",
            "This phrasing is clear and accurate, but 'surnames' and 'last names' are equivalent terms and should remain consistent. The phrase 'three years old' captures the specific age well."
        ],
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "original_utterance": "What is the last name of the student who has a cat that is 3 years old?"
    },
    {
        "init": [
            "What is the average age of students who do not have pets?",
            "Find the average age for students without any pets.",
            "Can you calculate the average age of students who are not pet owners?"
        ],
        "final": [
            "What is the average age of students who do not own any pets?",
            "Find the average age for students without pets.",
            "Can you calculate the average age of students who are not pet owners?"
        ],
        "feedback": [
            "Clear and accurately captures the query's intent. It could add a hint about excluding pet owners to avoid any ambiguity.",
            "Good phrasing, but 'without any pets' is slightly redundant. Simplifying to 'without pets' can enhance brevity.",
            "Accurate and detailed. Retains the query's meaning well without using technical jargon. No major changes needed."
        ],
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "original_utterance": "What is the average age for all students who do not own any pets?"
    },
    {
        "init": [
            "Show me the countries that gained independence after 1950.",
            "Which countries became independent after the year 1950?",
            "List the countries that declared independence post-1950."
        ],
        "final": [
            "Show me the countries that gained independence after 1950.",
            "Which countries became independent after the year 1950?",
            "List the countries that gained independence post-1950."
        ],
        "feedback": [
            "This variation is clear and accurate. It maintains the original query's intent and avoids any SQL jargon. No significant changes needed.",
            "This is also clear and accurate. It uses natural language and effectively captures the query's intent. Maintain this phrasing.",
            "Good variation, but the use of 'declared' might imply a specific action rather than the general status of independence. Consider rephrasing to make it less ambiguous."
        ],
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "original_utterance": "Give the names of the nations that were founded after 1950."
    },
    {
        "init": [
            "How many countries have a government form of a Republic?",
            "Can you tell me the number of countries governed as a Republic?",
            "What is the count of countries with a Republican form of government?"
        ],
        "final": [
            "How many countries have a republican form of government?",
            "Can you tell me the current number of countries governed as a Republic?",
            "What is the count of countries with a Republic form of government?"
        ],
        "feedback": [
            "This variation is clear but can be slightly improved by specifying 'form of government' to avoid redundancy.",
            "Good phrasing, but it could specify 'currently' to indicate current data. The phrase 'governed as a Republic' may be confused with 'currently governed,' which may not always align with static database records.",
            "Accurate and concise, but 'Republican' might be interpreted differently in various contexts. Clarifying 'Republic form of government' could improve clarity."
        ],
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "original_utterance": "How many countries have governments that are republics?"
    },
    {
        "init": [
            "What is the total surface area of all countries in the Caribbean?",
            "Can you determine the sum of the surface areas of countries located in the Caribbean?",
            "Find the combined surface area of countries in the Caribbean region."
        ],
        "final": [
            "What is the total surface area of all countries in the Caribbean?",
            "Can you find the total surface area of countries located in the Caribbean?",
            "Find the combined surface area of countries in the Caribbean region."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the intent of the SQL query. It effectively translates the SQL logic into natural language.",
            "The phrase 'determine the sum' is slightly more formal but still accurate. It could be simplified to make it more conversational.",
            "This variation is also clear and concise. It correctly avoids SQL-specific terminology and focuses on the natural language flow."
        ],
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "original_utterance": "How much surface area do the countires in the Carribean cover together?"
    },
    {
        "init": [
            "Which continent is Anguilla located in?",
            "Can you tell me the continent that Anguilla belongs to?",
            "On which continent can you find the country Anguilla?"
        ],
        "final": [
            "Which continent is Anguilla located in?",
            "Can you tell me the continent that Anguilla belongs to?",
            "Which continent is the country of Anguilla part of?"
        ],
        "feedback": [
            "This variation is clear and concise. It asks directly for the continent where Anguilla is located, which aligns well with the SQL query.",
            "The phrasing 'belongs to' might imply political or cultural aspects rather than geographical, but it is generally understood and relevant. No need for significant changes.",
            "This variation is clear but can be made more conversational by rephrasing. Avoid the academic-sounding 'can you find' with a simpler expression."
        ],
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "original_utterance": "What is the continent name which Anguilla belongs to?"
    },
    {
        "init": [
            "What region does the city of Kabul belong to?",
            "Can you tell me the region for the city named Kabul?",
            "Find the region associated with Kabul city."
        ],
        "final": [
            "What region does Kabul belong to in the database?",
            "Can you tell me the region for Kabul?",
            "Find the region associated with Kabul city."
        ],
        "feedback": [
            "This variation is clear and straightforward but could explicitly mention it is querying a database.",
            "Good phrasing, but 'city named Kabul' could be shortened to 'Kabul'.",
            "Accurate and concise. No significant changes needed."
        ],
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "original_utterance": "What region is Kabul in?"
    },
    {
        "init": [
            "What is the most spoken language in Aruba?",
            "Can you tell me the top language spoken in Aruba?",
            "Which language is spoken the most in Aruba?"
        ],
        "final": [
            "What is the predominantly spoken language in Aruba?",
            "Can you tell me the top language spoken in Aruba?",
            "Which language is spoken the most in Aruba?"
        ],
        "feedback": [
            "This variation is clear and directly aligns with the query. However, the term 'most spoken' might be better clarified as 'predominantly spoken' for precision.",
            "This variation is natural and clear, expressing the intent accurately. It avoids technical jargon well.",
            "This is concise and accurate. Ensure that 'spoken the most' is understood as the language with the highest percentage."
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "original_utterance": "What language is predominantly spoken in Aruba?"
    },
    {
        "init": [
            "What are the population and life expectancy details for Brazil?",
            "Can you provide Brazil's population and life expectancy?",
            "Show me the population and life expectancy of Brazil."
        ],
        "final": [
            "What are the population and life expectancy for Brazil?",
            "Can you provide Brazil's population and life expectancy?",
            "Show me the population and life expectancy of Brazil."
        ],
        "feedback": [
            "The phrasing is clear and accurate but could be more concise. Using 'details' may be superfluous.",
            "This variation is clear and precise. It directly queries the population and life expectancy of Brazil without extra words.",
            "This is concise and accurate, maintaining a conversational form suitable for a general audience."
        ],
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "original_utterance": "Give me Brazil\u2019s population and life expectancies."
    },
    {
        "init": [
            "What is the population and region of Angola?",
            "Can you provide the population and the region details for Angola?",
            "Show the population and region information of Angola."
        ],
        "final": [
            "What is the population and region of Angola?",
            "Can you provide the population and region for Angola?",
            "Show the population and region of Angola."
        ],
        "feedback": [
            "This variation is straightforward and clear, accurately reflecting the query's intent. No major issues.",
            "This is clear but slightly redundant with the phrase 'population and the region details.' It could be simplified.",
            "Accurate and concise, but mentioning 'information' might be unnecessary."
        ],
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "original_utterance": "What region does Angola belong to and what is its population?"
    },
    {
        "init": [
            "What is the average life expectancy in Central Africa?",
            "Can you provide the mean life expectancy for countries in Central Africa?",
            "Tell me the average lifespan in the region of Central Africa."
        ],
        "final": [
            "What is the average life expectancy in Central Africa?",
            "Can you provide the average life expectancy for countries in Central Africa?",
            "Tell me the average lifespan in the region of Central Africa."
        ],
        "feedback": [
            "This variation is clear and straightforward. It accurately captures the intent and logic of the original query.",
            "Good phrasing, but 'mean' could be simplified to 'average' for better accessibility for users who might not be familiar with statistical terminology.",
            "This variation is also accurate. The term 'lifespan' can be used interchangeably with 'life expectancy,' although the latter is more precise."
        ],
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "original_utterance": "How long is the people\u2019s average life expectancy in Central Africa?"
    },
    {
        "init": [
            "What is the name of the country in Asia with the lowest life expectancy?",
            "Which Asian country has the shortest life expectancy?",
            "Show me the country in Asia with the minimum life expectancy."
        ],
        "final": [
            "What is the name of the country in Asia with the lowest life expectancy?",
            "Which Asian country currently has the lowest life expectancy?",
            "Show me the country in Asia with the lowest life expectancy."
        ],
        "feedback": [
            "Clear and accurate. The phrase 'the lowest life expectancy' effectively captures the intent of 'ORDER BY LifeExpectancy LIMIT 1'.",
            "Phrasing is good but could be improved by specifying that it is currently recorded data. The word 'shortest' is generally clear, but 'lowest' might be more precise in this context.",
            "Clear and to the point. However, 'the minimum life expectancy' might be slightly less natural than using 'the lowest life expectancy'."
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "original_utterance": "Give the name of the country in Asia with the lowest life expectancy."
    },
    {
        "init": [
            "What is the total population and the highest GNP of countries in Asia?",
            "Give me the sum of the population and the maximum GNP for countries located in Asia.",
            "Can you find the total population and the largest GNP of all Asian countries?"
        ],
        "final": [
            "What is the total population and the highest GNP of countries in Asia?",
            "Give me the sum of the population and the maximum GNP for countries in Asia.",
            "Can you show the total population and the highest GNP of all Asian countries?"
        ],
        "feedback": [
            "This variation accurately captures the query's intent but could be slightly refined to enhance clarity regarding the GNP being the highest value.",
            "Well-phrased, though 'located in Asia' might be redundant. Simplifying it to just 'in Asia' would improve brevity and natural flow.",
            "The question is clear and understandable, but 'find' could be replaced with 'show' for a more natural language interpretation. Also, the term 'largest' should be changed to 'highest' for consistency."
        ],
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "original_utterance": "How many people live in Asia, and what is the largest GNP among them?"
    },
    {
        "init": [
            "What is the average life expectancy in African countries that have a republic government?",
            "Can you tell me the average life expectancy for African republics?",
            "Find the mean life expectancy for countries in Africa with a republican form of government."
        ],
        "final": [
            "What is the average life expectancy in African republics?",
            "Can you tell me the average life expectancy for African republic countries?",
            "Find the average life expectancy for countries in Africa with a republic government."
        ],
        "feedback": [
            "This variation is clear and accurately captures the original query's intent. However, it could be slightly more concise while retaining clarity.",
            "Good phrasing and succinct. It maintains the focus on African republics but could explicitly mention 'countries' for more precision.",
            "Accurate and clear. No major issues, but using 'mean' instead of 'average' might be less intuitive for some users. Consider using simpler language."
        ],
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "original_utterance": "Give the average life expectancy for countries in Africa which are republics?"
    },
    {
        "init": [
            "How much total surface area is covered by countries in Asia and Europe?",
            "What is the combined surface area of all countries located in Asia and Europe?",
            "Can you calculate the total surface area of countries that are either in Asia or Europe?"
        ],
        "final": [
            "What is the total surface area covered by countries in Asia and Europe?",
            "What is the combined surface area of all countries in Asia and Europe?",
            "Can you calculate the total surface area of countries in Asia or Europe?"
        ],
        "feedback": [
            "This variation is clear, but it might be even more precise if it mentions the total surface area of countries, not just any area.",
            "Good phrasing and it explicitly captures the intent to combine the areas, but could be shorter without losing clarity.",
            "Accurate and includes the necessary detail, but the phrase 'either in Asia or Europe' could be simplified to 'in Asia or Europe' for better readability."
        ],
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "original_utterance": "Give the total surface area covered by countries in Asia or Europe."
    },
    {
        "init": [
            "What is the total population of cities in the district of Gelderland?",
            "Can you calculate the sum of the population for all cities located in Gelderland district?",
            "Find the combined population of all cities in the Gelderland district."
        ],
        "final": [
            "What is the total population of cities in the district of Gelderland?",
            "Can you find the sum of the population for all cities located in Gelderland district?",
            "Show the combined population of all cities in the Gelderland district."
        ],
        "feedback": [
            "Clear and concise. It accurately captures the essence of the SQL query without using SQL-specific terms.",
            "While accurate, the term 'calculate' may sound a bit technical. Consider using 'find' or 'show' for more natural language. That said, the phrasing still correctly reflects the SQL query.",
            "This phrasing is good and avoids technical jargon, although the term 'combined' may add a slight complexity. Still, it is accurate and natural-sounding."
        ],
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "original_utterance": "What is the total population of Gelderland district?"
    },
    {
        "init": [
            "What is the average GNP and total population of countries with a government form of 'US Territory'?",
            "Can you provide the average GNP and the sum of the population for countries that are US Territories?",
            "Find the average GNP and total number of people for US territories."
        ],
        "final": [
            "What is the average GNP and total population of US Territories?",
            "Can you provide the average GNP and the sum of the population for US Territories?",
            "Find the average GNP and total population for US Territories."
        ],
        "feedback": [
            "Clear, but could be more concise by removing 'a government form of' and just using 'US Territories'.",
            "Well-phrased, but specifying 'countries that are' can be simplified to just 'US Territories'.",
            "Concise and clear. However, 'total number of people' can be replaced with 'total population' for consistency with the original query."
        ],
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "original_utterance": "Give the mean GNP and total population of nations which are considered US territory."
    },
    {
        "init": [
            "How many unique languages are spoken across different countries?",
            "Can you tell me the total number of distinct languages listed in the country language records?",
            "What is the count of different languages in the country language table?"
        ],
        "final": [
            "How many unique languages are recorded across different countries?",
            "Can you tell me the total number of distinct languages?",
            "What is the count of different languages recorded?"
        ],
        "feedback": [
            "This is clear and captures the essence of the SQL query. However, it could be slightly refined for readability by specifying languages 'listed' or 'recorded'.",
            "Solid phrasing, but avoid referencing 'records' which might imply a specific database context to non-technical users.",
            "Good, but directly references 'table,' which might be too technical. Simplifying this can make it more user-friendly."
        ],
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "original_utterance": "What is the number of distinct languages used around the world?"
    },
    {
        "init": [
            "How many unique forms of government are there in African countries?",
            "Can you count the distinct types of government systems found in African nations?",
            "What is the number of different government forms present in Africa?"
        ],
        "final": [
            "How many unique forms of government are there in African countries?",
            "Can you count the distinct types of government systems in African countries?",
            "What is the number of different kinds of governments present in Africa?"
        ],
        "feedback": [
            "This variation accurately captures the intent and is clearly phrased. It avoids SQL-specific jargon and directly asks for the required information.",
            "This phrasing is clear but could improve by using simpler terminology like 'in African countries' instead of 'found in African nations' for better flow.",
            "The variation is concise and clear. It might benefit from slight simplification by removing 'forms' to be more naturally sounding: 'kinds of governments present in Africa.'"
        ],
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "original_utterance": "How many different forms of governments are there in Africa?"
    },
    {
        "init": [
            "How many different languages are spoken in Aruba?",
            "Can you tell me the number of languages spoken in the country of Aruba?",
            "Find out the total count of languages that are spoken in Aruba."
        ],
        "final": [
            "How many different languages are spoken in Aruba?",
            "What is the number of languages spoken in Aruba?",
            "Get the total number of languages that are spoken in Aruba."
        ],
        "feedback": [
            "This variation is clear and concise. It accurately conveys the query's intent without any technical jargon. No changes needed.",
            "This variation is good but slightly verbose. Using 'number of languages spoken' is clear and natural, but could be shortened for brevity.",
            "This variation is clear but a bit wordy. The phrase 'find out the total count of' can be simplified for better readability."
        ],
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "original_utterance": "How many languages are spoken in Aruba?"
    },
    {
        "init": [
            "How many official languages are there in Afghanistan?",
            "Can you tell me the number of official languages spoken in Afghanistan?",
            "What is the count of official languages for Afghanistan?"
        ],
        "final": [
            "How many official languages are there in Afghanistan?",
            "Can you tell me the number of official languages in Afghanistan?",
            "What is the count of official languages for Afghanistan?"
        ],
        "feedback": [
            "This variation is clear and directly reflects the query. No major issues, but it could specify that the count refers to languages.",
            "Good phrasing, but it might be clearer if 'spoken' is replaced to avoid any possible ambiguities. Consider simplifying the phrasing slightly.",
            "Accurate and concise without technical SQL terms. Perfectly aligned with the query's intent."
        ],
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "original_utterance": "How many official languages are spoken in Afghanistan?"
    },
    {
        "init": [
            "Which country has the highest number of spoken languages?",
            "Can you find the country that speaks the most languages?",
            "Identify the country with the most languages spoken."
        ],
        "final": [
            "Which country has the highest number of languages?",
            "Can you find the country that speaks the most languages?",
            "Identify the country with the most languages spoken."
        ],
        "feedback": [
            "The phrasing is clear and accurately represents the query's intent. However, 'spoken languages' might overly specify, while the query simply counts languages associated with each country.",
            "This variation is clear and sufficiently specific. The phrasing avoids any direct SQL terminology and maintains the correct interpretation.",
            "Accurate and concise. No changes needed, and it avoids technical SQL terms while keeping to the query's purpose."
        ],
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "original_utterance": "Give the name of the nation that uses the greatest amount of languages."
    },
    {
        "init": [
            "Which continent has the highest number of countries grouped by their official languages?",
            "Find the continent that appears most frequently when countries are grouped by their languages.",
            "What is the continent with the largest number of countries according to the language spoken in each country?"
        ],
        "final": [
            "Which continent has the most countries based on their languages?",
            "Find the continent that has the most countries based on language.",
            "What is the continent with the most countries according to the languages spoken in each country?"
        ],
        "feedback": [
            "Clear and straightforward. It captures the SQL intent well but could be simplified by removing the phrase 'grouped by their official languages,' which may introduce unnecessary complexity.",
            "The wording is good but specifying 'countries appear most frequently' could add clarity. Avoiding SQL-specific terms like 'grouped' will make it more accessible.",
            "Accurately reflects the query's purpose. However, it would benefit from saying 'the most countries' instead of 'the largest number of countries' for brevity."
        ],
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "original_utterance": "Which continent speaks the most languages?"
    },
    {
        "init": [
            "How many countries have both English and Dutch as official languages?",
            "Count the number of countries where both English and Dutch are spoken.",
            "Give me the number of countries that have English and Dutch as their languages."
        ],
        "final": [
            "How many countries have both English and Dutch as official languages?",
            "Count the number of countries where both English and Dutch are official languages.",
            "Give me the number of countries that have both English and Dutch as official languages."
        ],
        "feedback": [
            "This variation is clear and accurately represents the query's intent. No changes needed.",
            "Good phrasing, but 'spoken' might imply general use rather than official status. Consider specifying 'official languages' for clarity.",
            "The phrasing is clear, but changing 'have English and Dutch as their languages' to 'have both English and Dutch as official languages' would add clarity."
        ],
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "original_utterance": "What is the number of nations that use English and Dutch?"
    },
    {
        "init": [
            "Which countries have both English and French as languages?",
            "List the countries where both English and French are spoken.",
            "Find the names of countries that speak both English and French."
        ],
        "final": [
            "Which countries have both English and French as languages?",
            "List the countries where both English and French are spoken.",
            "Find the names of countries where both English and French are spoken."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent of the SQL query. The structure is natural, and no direct SQL references are included.",
            "This is also clear and concise. Mentioning 'spoken' makes the meaning more explicit. There's no SQL-specific jargon, which is good.",
            "This variation is accurate but could slightly improve fluency by rephrasing 'speak both English and French' to 'where both English and French are spoken.'"
        ],
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "original_utterance": "Give the names of nations that speak both English and French."
    },
    {
        "init": [
            "Which countries have both English and French as official languages?",
            "Can you list the countries where both English and French are official languages?",
            "Find the countries that officially speak both English and French."
        ],
        "final": [
            "Which countries have both English and French as official languages?",
            "Can you show me the countries where both English and French are official languages?",
            "Find the countries that have English and French as official languages."
        ],
        "feedback": [
            "This variation is concise and clearly conveys the intent of the SQL query. No changes are needed.",
            "Clear and precise. It mirrors the intent of the query well, but 'list' can be made more generic to avoid implying a specific SQL command.",
            "The request is clear, but 'officially speak' could be better phrased as 'have both as official languages' for greater clarity and alignment with the query's conditions."
        ],
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "original_utterance": "Give the names of countries with English and French as official languages."
    },
    {
        "init": [
            "How many distinct continents have countries where Chinese is spoken?",
            "Count the number of unique continents with countries speaking Chinese.",
            "Show me the number of distinct continents that have countries where Chinese is a spoken language."
        ],
        "final": [
            "How many distinct continents have countries where Chinese is spoken?",
            "Count the number of distinct continents with countries speaking Chinese.",
            "Show me the number of distinct continents that have countries where Chinese is a spoken language."
        ],
        "feedback": [
            "This variation is accurate and clear. It maintains the SQL query's intent and is phrased in a natural language format.",
            "Clear and precise, but the phrase 'unique continents' might be slightly less accessible. Consider using 'distinct continents' to align with common usage.",
            "Accurate and easily understood. It could be slightly more concise, but it is clear and avoids unnecessary jargon."
        ],
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "original_utterance": "How many continents speak Chinese?"
    },
    {
        "init": [
            "Show me the distinct regions of countries where the languages spoken include English or Dutch.",
            "Which regions have countries that speak either English or Dutch?",
            "List the unique regions of countries where English or Dutch are spoken languages."
        ],
        "final": [
            "Show me the distinct regions of countries where the languages spoken include English or Dutch.",
            "Which regions have countries where English or Dutch are official languages spoken?",
            "List the unique regions of countries where English or Dutch are spoken languages."
        ],
        "feedback": [
            "This variation effectively conveys the query's intent and structure. No major changes needed.",
            "Good phrasing, but could be slightly clearer by adding 'official languages spoken' for more context on the languages queried.",
            "Accurate and concise. It avoids direct SQL terms, making it user-friendly. No changes needed."
        ],
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "original_utterance": "Which regions speak Dutch or English?"
    },
    {
        "init": [
            "Find all countries where the official language is either English or Dutch.",
            "Show me the list of countries that have English or Dutch as an official language.",
            "Retrieve all countries where the official languages include English and Dutch."
        ],
        "final": [
            "Find all countries where the official language is either English or Dutch.",
            "Show me the list of countries that have either English or Dutch as an official language.",
            "Retrieve all countries where English or Dutch is an officially recognized language."
        ],
        "feedback": [
            "This variation covers the essential elements but could be more explicit about the 'official' nature of the languages.",
            "Well-phrased and clear; however, adding 'currently recognized' or 'officially recognized' could improve clarity.",
            "Slightly ambiguous as 'include' might imply that both languages are official in each country. Use 'or' to match the intent of the query."
        ],
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "original_utterance": "Which countries have either English or Dutch as an official language?"
    },
    {
        "init": [
            "What is the most commonly spoken language in Asia?",
            "Can you tell me the language that is spoken by the most people in Asia?",
            "Which language has the highest number of speakers in Asian countries?"
        ],
        "final": [
            "What is the most spoken language in Asia?",
            "Can you tell me the most popular language in Asia?",
            "Which language has the highest number of speakers in Asian countries?"
        ],
        "feedback": [
            "The variation is clear and correctly captures the query's intent. However, it may be improved slightly for brevity.",
            "This variation is also good but could be more concise by using 'most popular' instead of explaining about people.",
            "Accurate and concise. The phrase 'Asian countries' is appropriately used instead of 'Asia' to ensure clarity."
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "original_utterance": "What is the language that is used by the largest number of Asian nations?"
    },
    {
        "init": [
            "Which languages are spoken in only one republic country?",
            "List the languages that are unique to a single country with a republican government.",
            "What languages are specific to just one republic-type government country?"
        ],
        "final": [
            "Which languages are unique to just one republic?",
            "List the languages that are specific to a single republic.",
            "What languages are unique to one republic country?"
        ],
        "feedback": [
            "Clear and concise, but specifying 'in only one country' can be further clarified to mean 'unique to one republic'.",
            "Good phrasing, but mentioning 'a republican government' could be simplified to 'a republic'.",
            "Accurate but could clarify by using 'republic country' instead of 'republic-type government country' for better natural language flow."
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "original_utterance": "What languages are only used by a single country with a republic government?"
    },
    {
        "init": [
            "What city with an English-speaking population has the highest population?",
            "Find the city where English is spoken that has the largest population.",
            "Which is the most populated city where English is the official language?"
        ],
        "final": [
            "What city that speaks English has the highest population?",
            "Find the English-speaking city with the largest population.",
            "Which is the most populated city where English is spoken?"
        ],
        "feedback": [
            "This variation is clear but can be improved for natural language fluency by removing redundant words like 'population' twice. Also, it could specify it is looking for the city with highest population.",
            "Clear and relevant but can be made more concise by eliminating the word 'where.'",
            "Good phrasing, but 'official language' might imply the language has official status, which is not clear in the SQL query. It should just mention 'spoken.'"
        ],
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "original_utterance": "What is the most populace city that speaks English?"
    },
    {
        "init": [
            "Which Asian country has the largest surface area?",
            "Show me the country with the largest area in Asia, including its population and life expectancy.",
            "Find the Asian country with the most significant land surface, and provide its name, population, and life expectancy."
        ],
        "final": [
            "Which Asian country has the largest surface area, along with its population and life expectancy?",
            "Show me the country with the largest surface area in Asia, including its population and life expectancy.",
            "Find the Asian country with the largest surface area, and provide its name, population, and life expectancy."
        ],
        "feedback": [
            "This variation is clear and precise but does not explicitly mention the need for population and life expectancy information.",
            "Well-phrased and includes all desired details. However, 'largest area' could be more naturally phrased as 'largest surface area.'",
            "Comprehensive and detailed, but the term 'most significant land surface' could be simplified to 'largest surface area' for better clarity."
        ],
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "original_utterance": "What are the name, population, and life expectancy of the largest Asian country by land?"
    },
    {
        "init": [
            "What is the average life expectancy in countries where English is not an official language?",
            "Find the average life expectancy for countries that do not have English as an official language.",
            "Show the average lifespan in countries where English isn't the officially recognized language."
        ],
        "final": [
            "What is the average life expectancy in countries where English is not the official language?",
            "Find the average life expectancy for countries that do not have English as an official language.",
            "Show the average lifespan in countries where English is not an official language."
        ],
        "feedback": [
            "The variation is accurate and clear. However, it could be shortened a bit for brevity.",
            "The phrasing is precise and clear. It aligns well with the original query's intent and avoids technical jargon.",
            "While accurate, the term 'officially recognized language' could be simplified to 'official language' for better clarity and brevity."
        ],
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "original_utterance": "Give the mean life expectancy of countries in which English is not the official language."
    },
    {
        "init": [
            "What is the total population of countries where English is not spoken?",
            "Calculate the combined population of all countries that do not have English listed as a language.",
            "Give me the sum of the population for countries that do not use English."
        ],
        "final": [
            "What is the total population of countries where English is not officially spoken?",
            "Calculate the combined population of all countries that do not have English as an official language.",
            "Give me the sum of the population for countries that do not officially use English."
        ],
        "feedback": [
            "Clear and accurate, but it could specify that it's specifically about countries where English is not officially spoken or listed.",
            "Good phrasing, but 'listed as a language' could be clearer if phrased as an official language to avoid SQL interpretation.",
            "Concise and accurate. Avoids technical jargon well but could be refined to ensure clarity by specifying 'officially used'."
        ],
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "original_utterance": "How many people live in countries that do not speak English?"
    },
    {
        "init": [
            "Which official languages are spoken in countries where Beatrix is the head of state?",
            "Can you list the official languages of countries governed by Beatrix?",
            "Find the official languages in the countries where the head of state is Beatrix."
        ],
        "final": [
            "What are the official languages spoken in countries where Beatrix is currently the head of state?",
            "Can you list the official languages of countries currently governed by Beatrix?",
            "Find the official languages spoken in countries with Beatrix as the current head of state."
        ],
        "feedback": [
            "Clear and concise. It accurately reflects the query's intent. A small improvement would be to rephrase it to enhance readability.",
            "This variation is good but could be slightly more specific by mentioning 'current' head of state to match the potentially dynamic nature of the database.",
            "Accurate and clear, but the phrase could benefit from a more natural flow, such as avoiding the technical term 'head of state'."
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "original_utterance": "What is the official language used in the country the name of whose head of state is Beatrix."
    },
    {
        "init": [
            "How many distinct official languages are spoken in countries that gained independence before 1930?",
            "Count the unique number of official languages in countries that became independent before 1930.",
            "Can you tell me the number of different official languages in countries with independence dates before 1930?"
        ],
        "final": [
            "How many distinct official languages are spoken in countries that gained independence before 1930?",
            "Count the number of official languages in countries that became independent before 1930.",
            "How many different official languages are there in countries that became independent before 1930?"
        ],
        "feedback": [
            "This variation is clear and correctly restates the SQL query without technical jargon. It accurately captures the intent and necessary conditions.",
            "Also accurate, but the term 'unique number' could simply be 'number' for conciseness. 'Became independent' is a good natural language phrase.",
            "Good clarity and accurate restatement. The phrase 'with independence dates' is slightly verbose and could be simplified for better fluency."
        ],
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "original_utterance": "For the countries founded before 1930, what is the total number of distinct official languages?"
    },
    {
        "init": [
            "Which countries have a larger surface area than the smallest country in Europe?",
            "List the countries that have a surface area greater than the smallest country in Europe.",
            "Can you show me the countries whose surface area exceeds that of the smallest European country?"
        ],
        "final": [
            "Which countries have a larger surface area than the smallest country by surface area in Europe?",
            "List the countries that have a surface area greater than the smallest European country by surface area.",
            "Can you show me the countries with a surface area larger than the smallest European country by surface area?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the query's intent. It poses a natural query but could be slightly improved for clarity.",
            "This variation is concise and clear. However, the phrase 'smallest country in Europe' may be ambiguous; specifying 'by surface area' could provide better clarity.",
            "This variation is good but contains an extra clause 'whose surface area exceeds that of' which could be simplified. It's accurate but could be more straightforward."
        ],
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "original_utterance": "Which countries have greater area than that of any country in Europe?"
    },
    {
        "init": [
            "Which countries in Africa have a population smaller than the largest country in Asia?",
            "Show me the names of African countries with populations less than the most populated country in Asia.",
            "List all countries in Africa whose populations are lower than the highest population in Asia."
        ],
        "final": [
            "Which countries in Africa have a population smaller than the most populous country in Asia?",
            "Show me the names of African countries with populations less than the most populous country in Asia.",
            "List all countries in Africa whose populations are lower than the highest population in Asia."
        ],
        "feedback": [
            "This variation is clear, but 'largest country' could be misinterpreted as referring to geographical size rather than population.",
            "Well-phrased and clear, but 'most populated' could be simplified to 'most populous' for better clarity.",
            "Accurate and concise. The phrasing 'highest population' is clear and appropriate."
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "original_utterance": "Which African countries have a smaller population than that of any country in Asia?"
    },
    {
        "init": [
            "List the countries in Asia with a population greater than the smallest population of an African country.",
            "Which countries in Asia have a population higher than the minimum population of any African country?",
            "Show me the names of Asian countries with populations exceeding the smallest population in African countries."
        ],
        "final": [
            "Which countries in Asia have populations greater than the smallest in Africa?",
            "What are the Asian countries with a population higher than the smallest in Africa?",
            "Show the names of countries in Asia with populations larger than the minimum in Africa."
        ],
        "feedback": [
            "The phrase 'smallest population of an African country' is clear, but can be shortened for clarity. The word 'List' is functional but can be made more conversational.",
            "This variation is good, however, 'minimum population of any African country' can be a bit wordy. Rephrasing to be more concise would improve readability.",
            "This variation is accurate and clear. However, it\u2019s a bit formal. Consider using simpler language to make it more conversational."
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "original_utterance": "What are the Asian countries which have a population larger than that of any country in Africa?"
    },
    {
        "init": [
            "List all country codes that do not have English as a language.",
            "Find the country codes of countries where English is not spoken.",
            "Show me the country codes from countries that don't use English as a language."
        ],
        "final": [
            "What are the country codes of countries that do not have English as an official language?",
            "Can you find the country codes of countries where English is not the official language?",
            "Show me the country codes from countries that don't use English as their official language."
        ],
        "feedback": [
            "This variation is straightforward and accurate, but could be slightly more conversational.",
            "Well-phrased and clear. Consider adding 'the official' before 'language' for added clarity.",
            "Good paraphrasing. It avoids SQL-specific technical terms. It's clear and concise."
        ],
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "original_utterance": "Return the country codes for countries that do not speak English."
    },
    {
        "init": [
            "List all the distinct country codes where the language is not English.",
            "Show me all unique country codes for countries where English is not spoken.",
            "Which country codes are distinct and have languages other than English?"
        ],
        "final": [
            "List all the distinct country codes where the language is not English.",
            "Show me all unique country codes for countries where English is not the official language.",
            "Which country codes are unique and have languages other than English?"
        ],
        "feedback": [
            "This variation is accurate and clear. It avoids any SQL-specific terminology and clearly states the criteria of the query in natural language.",
            "This variation accurately captures the intent but using 'spoken' might change the interpretation slightly, as it implies spoken languages rather than official languages. Consider 'official' to align it more closely with most people's understanding of such queries.",
            "The wording is concise but 'distinct' might be less intuitive for some users. Consider 'unique' instead. The phrase 'languages other than English' is clear and avoids technical SQL terms."
        ],
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE ! =  \"English\"",
        "original_utterance": "Give the country codes for countries in which people speak langauges that are not English."
    },
    {
        "init": [
            "Which countries do not have a republic government form and do not list English as a language?",
            "Can you provide the codes of countries that are not republics and where English is not spoken?",
            "List the country codes for non-republic governments that do not have English as one of their languages."
        ],
        "final": [
            "Which countries do not have a republic government type and do not list English as a language?",
            "Can you provide the country codes of nations that are not republics and where English is not spoken?",
            "List the country codes for countries that do not have a republic government and do not have English as one of their languages."
        ],
        "feedback": [
            "This variation accurately captures the intention of the query, but using 'government type' could be more natural than 'government form'.",
            "Clear and achieves the desired result, but specifying 'country codes' at the beginning could make it clearer that a code is being requested.",
            "Accurate and concise. Explicitly mentioning 'country codes' is clear, but consider rephrasing \u2018non-republic governments\u2019 to \u2018countries that do not have a republic government\u2019. This makes it more straightforward."
        ],
        "query": "SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "original_utterance": "Return the codes of countries that do not speak English and do not have Republics for governments."
    },
    {
        "init": [
            "List all European cities in countries where English is not an official language.",
            "Can you show me the names of cities in Europe located in non-English-speaking countries?",
            "Find cities in Europe that belong to countries where English isn't an official language."
        ],
        "final": [
            "List all European cities where English is not an official language.",
            "Can you show me the cities in Europe located in non-English-speaking countries?",
            "Find cities in Europe that belong to countries where English isn't an official language."
        ],
        "feedback": [
            "This variation is accurate and clear. However, it can omit the phrase 'in countries' to be more concise. ",
            "Good phrasing and specificity, but \u2018names of cities\u2019 can be shortened to just 'cities'.",
            "Accurate and concise. The use of 'isn't' makes it more conversational compared to 'is not'. Both are acceptable."
        ],
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "original_utterance": "What are the names of cities in Europe for which English is not the official language?"
    },
    {
        "init": [
            "Find the names of cities in Asia where Chinese is spoken as the official language.",
            "Show me the distinct city names in Asian countries where Chinese is the official language.",
            "List the cities in Asia where Chinese is an official language."
        ],
        "final": [
            "Find the names of cities in Asian countries where Chinese is the official language.",
            "Show me the unique city names in Asian countries where Chinese is the official language.",
            "List the cities in Asian countries where Chinese is an official language."
        ],
        "feedback": [
            "This variation is clear but could benefit from specifying that the cities are in countries where Chinese is officially spoken, not just any place in Asia.",
            "Good phrasing, but the term 'distinct' could be replaced with 'unique' to sound more natural in conversational language.",
            "Accurate and concise, though it would be improved with clearer language indicating the link between cities and the countries where Chinese is official."
        ],
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "original_utterance": "Return the different names of cities that are in Asia and for which Chinese is the official language."
    },
    {
        "init": [
            "Which country has the smallest population, and what are its name, surface area, and year of independence?",
            "Show me the country with the lowest population along with its surface area and year of independence.",
            "Can you provide the name, surface area, and independence year of the country with the least population?"
        ],
        "final": [
            "Which country has the least populated, and what are its name, surface area, and year of independence?",
            "Show me the country with the lowest population along with its surface area and year of independence.",
            "Can you provide the name, surface area, and year of independence of the country with the lowest population?"
        ],
        "feedback": [
            "This variation correctly captures the intent of the query. However, 'smallest population' might be more naturally phrased as 'least populated'.",
            "This phrasing is clear and avoids technical jargon, making it suitable for a general audience. No major changes needed.",
            "The wording is mostly accurate, but 'least population' can be simplified to 'lowest population' for better readability. Additionally, rephrasing it slightly can make it sound less formal."
        ],
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "original_utterance": "Give the name, year of independence, and surface area of the country that has the lowest population."
    },
    {
        "init": [
            "Which country has the largest surface area, and what are its population and head of state?",
            "Can you provide the name, population, and head of state of the country with the biggest surface area?",
            "Find the country with the largest land area and give me its name, population, and head of state."
        ],
        "final": [
            "Which country has the largest surface area, and what is its population and head of state?",
            "Can you give me the name, population, and head of state of the country with the largest surface area?",
            "Find the country with the largest land area and give me its name, population, and head of state."
        ],
        "feedback": [
            "This variation is clear and concise but doesn't mention the specific population detail.",
            "Good phrasing, but it mentions 'biggest surface area' which might be more naturally phrased as 'largest surface area'. The request to 'provide' could be worded more casually.",
            "Accurate and concise. The phrasing 'give me' is friendly and natural."
        ],
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "original_utterance": "Give the name, population, and head of state for the country that has the largest area."
    },
    {
        "init": [
            "List countries that have more than two languages spoken, along with the count of languages spoken.",
            "Can you give me the names of countries where more than two languages are spoken and the number of languages spoken in these countries?",
            "Show me the names of countries and the number of languages they speak, but only if they have more than two languages."
        ],
        "final": [
            "List countries that have more than two languages spoken, along with the count of spoken languages.",
            "Can you give me the names of countries where more than two languages are spoken and the count of languages spoken there?",
            "Show me the names of countries and the number of languages spoken in each, but only if they have more than two languages spoken."
        ],
        "feedback": [
            "This variation is clear and aligns well with the SQL query's intent. Ensure clarity by explicitly stating that the count is for languages spoken.",
            "This variation is accurate and detailed, but consider rephrasing 'number of languages spoken in these countries' to make it more concise.",
            "While this variation is correct, 'they speak' might be ambiguous. It would be clearer to specify that the count is for the number of languages spoken in the countries."
        ],
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "original_utterance": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?"
    },
    {
        "init": [
            "How many cities in each district have a population above the average city population?",
            "Provide the count of cities for each district where the population exceeds the average population of all cities.",
            "Show the number of cities per district that have populations greater than the overall city average."
        ],
        "final": [
            "How many cities are there in each district where the population is above the average population of all cities?",
            "Provide the count of cities for each district where the population exceeds the average population of all cities.",
            "Show the number of cities per district that have populations greater than the average population of all cities."
        ],
        "feedback": [
            "Clear and straightforward, but the phrase 'how many cities in each district' could be slightly rephrased for better clarity regarding the grouping aspect.",
            "Accurate and clear. The phrase 'for each district' helps specify the grouping condition well.",
            "Concise and clear. The term 'overall city average' can be refined to specify it's about population, but still clear."
        ],
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "original_utterance": "How many cities in each district have a population that is above the average population across all cities?"
    },
    {
        "init": [
            "What is the total population of countries grouped by their government form where the average life expectancy is more than 72?",
            "Show me the sum of populations and their government form for countries with an average life expectancy greater than 72.",
            "Find the total populations and corresponding government forms for countries that have an average life expectancy over 72 years."
        ],
        "final": [
            "What is the total population for each government form where the average life expectancy is more than 72?",
            "Show me the total population and government form for countries with an average life expectancy greater than 72 years.",
            "Find the total population and corresponding government form for countries that have an average life expectancy over 72 years."
        ],
        "feedback": [
            "Clear and accurate. However, it could mention 'countries' explicitly once instead of assuming it is known from context.",
            "Good phrasing but could simplify language by avoiding 'sum' and 'avg' which are directly SQL-related terms.",
            "Accurate and concise. However, 'total populations' should be singular 'total population' to improve grammatical clarity."
        ],
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "original_utterance": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?"
    },
    {
        "init": [
            "What is the total population and average life expectancy for each continent where the average life expectancy is below 72 years?",
            "Can you provide the sum of the population and the average life expectancy for continents with an average life expectancy of less than 72?",
            "List the total population and average life expectancy for continents whose average life expectancy is under 72 years."
        ],
        "final": [
            "What is the total population and average life expectancy for each continent where the average life expectancy is below 72 years?",
            "Can you provide the sum of the population and the average life expectancy for each continent with an average life expectancy of less than 72?",
            "List the total population and average life expectancy for continents whose average life expectancy is under 72 years."
        ],
        "feedback": [
            "This variation is clear and captures the original query's intent accurately. No changes needed.",
            "This version is accurate but could be slightly improved by specifying 'for each continent' to avoid ambiguity.",
            "This variation is clear and captures the intent. It effectively avoids technical jargon."
        ],
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "original_utterance": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?"
    },
    {
        "init": [
            "What are the names and surface areas of the five largest countries?",
            "Can you list the top five countries by surface area in descending order?",
            "Show me the five countries with the largest surface areas."
        ],
        "final": [
            "What are the names and surface areas of the five largest countries?",
            "Can you list the top five largest countries by surface area?",
            "Show me the five countries with the biggest surface areas."
        ],
        "feedback": [
            "This is precise and clear, effectively capturing the intent of the query. No significant improvements needed.",
            "This variation is clear, but the phrase 'in descending order' might be unnecessary for natural language. Instead, emphasizing 'largest' could be more intuitive.",
            "Concise and accurate, but it could be improved by specifying 'surface areas' more naturally, such as 'biggest' or 'largest' countries."
        ],
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "original_utterance": "Return the names and surface areas of the 5 largest countries."
    },
    {
        "init": [
            "Show me the names of the three most populated countries.",
            "Can you list the top three countries by population?",
            "Which are the top three countries with the highest population?"
        ],
        "final": [
            "Show me the names of the three most populated countries.",
            "Can you list the names of the top three countries by population?",
            "Which are the names of the top three countries with the highest population?"
        ],
        "feedback": [
            "Clear and precise. The variation captures the SQL query's intent well.",
            "Good phrasing, but it might benefit from explicitly asking for the names of the countries.",
            "This is accurate and understandable but adding an explicit mention of 'names' might make it slightly clearer."
        ],
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "original_utterance": "Return the names of the 3 most populated countries."
    },
    {
        "init": [
            "What are the names of the three least populated countries?",
            "Can you list the top three countries with the smallest populations?",
            "Find the names of the three countries with the lowest populations."
        ],
        "final": [
            "What are the names of the three least populated countries?",
            "Can you list the three countries with the smallest populations?",
            "Find the names of the three countries with the lowest populations."
        ],
        "feedback": [
            "This variation clearly conveys the intent of the query. No ambiguities or technical jargon are present.",
            "Good phrasing and aligns well with the query. The term 'top three' might be slightly confusing since it usually implies descending order, but it is mostly clear.",
            "Accurate and clear. The use of 'lowest populations' perfectly matches the SQL intent without technical jargon."
        ],
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "original_utterance": "Return the names of the 3 countries with the fewest people."
    },
    {
        "init": [
            "How many countries are in Asia?",
            "Can you count the number of countries located in Asia?",
            "What is the total number of countries within the continent of Asia?"
        ],
        "final": [
            "How many countries are in Asia?",
            "Can you count the number of countries in Asia?",
            "What is the total number of countries in Asia?"
        ],
        "feedback": [
            "This variation is clear and precise. No further changes are needed.",
            "It's well-phrased, but the word 'located' might be redundant here. Removing it may make the query more concise.",
            "Good phrasing, but using 'within the continent of Asia' might be a bit verbose. Simplifying it while keeping the meaning intact can improve readability."
        ],
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "original_utterance": "Count the number of countries in Asia."
    },
    {
        "init": [
            "List the names of countries in Europe with a population of 80,000.",
            "Which countries are located in Europe and have a population of 80,000?",
            "Show me the countries in Europe that have a population exactly equal to 80,000."
        ],
        "final": [
            "List the names of countries in Europe with a population of exactly 80,000.",
            "Which countries are located in Europe and have a population of 80,000?",
            "Show me the countries in Europe with a population of exactly 80,000."
        ],
        "feedback": [],
        "query": "SELECT Name FROM country WHERE  continent  =  \"Europe\" AND Population  =  \"80000\"",
        "original_utterance": "Give the names of countries that are in Europe and have a population equal to 80000."
    },
    {
        "init": [
            "What is the total population and the average surface area of countries in North America with a surface area greater than 3000?",
            "Show me the sum of the population and the average surface area of North American countries that have an area larger than 3000.",
            "Can you provide the total population and the average surface area for countries in North America with more than 3000 square kilometers?"
        ],
        "final": [
            "What is the total population and average surface area of North American countries with a surface area greater than 3000?",
            "Show me the population sum and average surface area of North American countries with an area larger than 3000.",
            "Can you provide the total population and average surface area for North American countries with over 3000 square kilometers?"
        ],
        "feedback": [
            "This variation is clear but a bit wordy. It could be more concise by eliminating redundant words.",
            "Good phrasing, but specifying 'North American countries' without making it lengthy could improve clarity.",
            "Accurate but could be simplified. The addition of 'square kilometers' is good and adds clarity but can be rephrased more naturally."
        ],
        "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "original_utterance": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000."
    },
    {
        "init": [
            "List the names of cities with a population between 160,000 and 90,000.",
            "Can you provide the names of cities where the population ranges between 160,000 and 90,000?",
            "Show me the names of cities that have a population between 90,000 and 160,000."
        ],
        "final": [
            "List the names of cities with a population between 160,000 and 90,000.",
            "Can you provide the names of cities where the population currently ranges between 160,000 and 90,000?",
            "Show me the names of cities that have a population currently between 160,000 and 90,000."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the SQL query's logic. No changes needed.",
            "This phrasing is also clear but could be improved by specifying 'currently' to make it more precise.",
            "This variation accurately reflects the original query's intent, although it reverses the population range order. The format is more natural but should keep the specified order."
        ],
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000",
        "original_utterance": "Return the names of cities that have a population between 160000 and 900000."
    },
    {
        "init": [
            "What is the most commonly spoken language across all countries?",
            "Show me the language that is spoken in the highest number of countries.",
            "Which language is the most prevalent across different countries?"
        ],
        "final": [
            "What is the most commonly spoken language in terms of the number of countries?",
            "Show me the language that is spoken in the highest number of countries.",
            "Which language is the most widely spoken across different countries?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent of the query. However, it could explicitly mention that it is based on the number of countries.",
            "Good phrasing and clear. It correctly avoids SQL-specific terminology and directly addresses the highest number of countries.",
            "Accurate and concise. It captures the essence of the query without introducing SQL-related terms. However, 'prevalent' could be replaced with a simpler term like 'spoken' for better clarity."
        ],
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Give the language that is spoken in the most countries."
    },
    {
        "init": [
            "Show me all cartoons directed by either Ben Jones or Brandon Vietti.",
            "Can you list the titles of cartoons directed by Ben Jones or Brandon Vietti?",
            "Give me the titles of cartoons that were directed by Ben Jones or Brandon Vietti."
        ],
        "final": [
            "Show me all the cartoon titles directed by either Ben Jones or Brandon Vietti.",
            "Can you list the titles of cartoons directed by Ben Jones or Brandon Vietti?",
            "Give me the list of cartoon titles that were directed by Ben Jones or Brandon Vietti."
        ],
        "feedback": [
            "This variation is clear and concise. It appropriately uses 'either' to indicate the OR condition in the SQL query.",
            "The phrase 'can you list' is polite and natural. Including 'titles' makes it clear that a list is expected.",
            "The use of 'give me the titles' is straightforward and clear, though it could be slightly more explicit about listing the titles."
        ],
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "original_utterance": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"."
    },
    {
        "init": [
            "Which country has the highest number of TV channels?",
            "Can you tell me the country with the most TV channels?",
            "Find the country that has the largest number of TV channels."
        ],
        "final": [
            "Which country has the most TV channels?",
            "Can you identify the country with the most TV channels?",
            "Find the country that has the most TV channels."
        ],
        "feedback": [
            "Clear and precise, but could replace 'highest' for 'most' to make it slightly more natural.",
            "Good phrasing, but 'tell me' is a bit informal; consider 'identify' or 'show me'.",
            "Accurate and well-phrased, but 'largest' could be replaced with 'most' for better clarity."
        ],
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "original_utterance": "Which country has the most of TV Channels? List the country and number of TV Channels it has."
    },
    {
        "init": [
            "How many distinct series names and unique content pieces are there in the TV Channel database?",
            "Can you provide the count of unique series and distinct content in the TV Channel?",
            "Find the number of distinct series names and unique content entries in the TV Channel."
        ],
        "final": [
            "How many distinct series names and unique content pieces are there in the TV Channel database?",
            "Can you provide the count of series and content in the TV Channel?",
            "Find the number of series names and content entries in the TV Channel."
        ],
        "feedback": [
            "This variation is clear and provides the necessary context. No change needed.",
            "This is accurate but consider rephrasing to avoid repetition of the term 'unique' and 'distinct'.",
            "Clear and concise but consider simplifying for better natural flow by removing the redundancy of 'unique' and 'distinct'."
        ],
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "original_utterance": "List the number of different series names and contents in the TV Channel table."
    },
    {
        "init": [
            "What is the language with the fewest TV channels?",
            "Which language is represented by the least number of TV channels?",
            "Show me the language that has the smallest number of TV channels available."
        ],
        "final": [
            "What language has the least number of TV channels?",
            "Which language is represented by the fewest number of TV channels?",
            "Show me the language with the smallest number of TV channels."
        ],
        "feedback": [
            "The variation captures the intent well. However, the term 'fewest' is slightly less common than 'least'.",
            "Clear and precise, but adding 'most' before 'represented' can enhance clarity. Consider removing technical jargon such as 'represented.'",
            "Accurate and comprehensive. It could benefit from more brevity by avoiding redundancies like 'available,' which is implied."
        ],
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "original_utterance": "List the language used least number of TV Channel. List language and number of TV Channel."
    },
    {
        "init": [
            "Which TV channel broadcasts the cartoon titled 'The Rise of the Blue Beetle!'?",
            "Find the TV series name that airs the cartoon 'The Rise of the Blue Beetle!'.",
            "What is the series name of the TV channel showing 'The Rise of the Blue Beetle!'?"
        ],
        "final": [
            "Which TV channel airs the cartoon titled 'The Rise of the Blue Beetle!'?",
            "Find the TV channel's series name that airs the cartoon 'The Rise of the Blue Beetle!'.",
            "What is the name of the TV channel that airs 'The Rise of the Blue Beetle!'?"
        ],
        "feedback": [
            "This variation is clear and directly maps to the SQL query. However, replacing 'broadcasts' with 'airs' might improve naturalness.",
            "This phrasing is good but ensure it is clear that 'series name' refers to the TV channel's series. The term 'airs' can enhance comprehension.",
            "This variation is accurate but could replace 'series name' with 'name' for simplicity. Also, 'showing' could be replaced with 'airs' for better clarity."
        ],
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "original_utterance": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name."
    },
    {
        "init": [
            "What are the titles of cartoons aired on the TV channel called Sky Radio?",
            "Can you list the cartoon titles broadcasted on the Sky Radio channel?",
            "Show me the names of cartoons that are shown on Sky Radio."
        ],
        "final": [
            "What are the titles of cartoons currently aired on the TV channel called Sky Radio?",
            "Can you list the cartoon titles aired on the Sky Radio channel?",
            "Show me the names of cartoons that are currently shown on Sky Radio."
        ],
        "feedback": [
            "Accurate and clear. It might be beneficial to specify that these are current titles for added clarity, although it's not strictly necessary.",
            "Good phrasing but 'broadcasted' could be simplified to 'aired' to make it sound more natural. The phrase 'cartoon titles' is clear and specific.",
            "This is concise and direct. Specifying 'currently shown' could provide more clarity, but it is still effectively understood."
        ],
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_utterance": "List the title of all Cartoons showed on TV Channel with series name \"Sky Radio\"."
    },
    {
        "init": [
            "What are the top three highest-rated episodes in the TV series?",
            "Can you show me the three episodes with the highest ratings in the TV series?",
            "Find the three best-rated episodes from the TV series."
        ],
        "final": [
            "What are the top three highest-rated episodes in the TV series?",
            "Can you show me the three episodes with the highest ratings in the TV series?",
            "Find the three best-rated episodes from the TV series."
        ],
        "feedback": [
            "This variation accurately captures the intent of the query and avoids technical jargon. It is clear and concise.",
            "This phrasing is good. However, adding the word 'episodes' after 'three' would make it even clearer.",
            "This is accurate and concise. It clearly communicates the query's intention without unnecessary SQL-specific terminology."
        ],
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "original_utterance": "List top 3 highest Rating TV series. List the TV series's Episode and Rating."
    },
    {
        "init": [
            "What are the highest and lowest shares for any TV series?",
            "Can you provide the TV series with the maximum and minimum share values?",
            "Find the maximum and minimum shares from the TV series dataset."
        ],
        "final": [
            "What are the highest and lowest shares for any TV series?",
            "Can you provide the highest and lowest share values among TV series?",
            "Find the maximum and minimum shares of all TV series."
        ],
        "feedback": [
            "This variation is clear and captures the intent accurately. The usage of shares is natural. No changes needed.",
            "The phrasing is good, but it explicitly mentions TV series, which is fine if specificity is desired. Consider avoiding the potential ambiguity of 'TV series with the maximum and minimum share values,' implying individual series rather than overall values.",
            "This is clear and concise but includes 'dataset,' which might be unnecessarily technical. Simplifying it for natural conversation flow would be better."
        ],
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "original_utterance": "What is minimum and maximum share of TV series?"
    },
    {
        "init": [
            "Which TV channel is airing the episode titled 'A Love of a Lifetime'?",
            "Show me the TV channel that broadcasted the episode called 'A Love of a Lifetime'.",
            "Find the TV channel that features the episode named 'A Love of a Lifetime'."
        ],
        "final": [
            "Which TV channel is currently airing the episode titled 'A Love of a Lifetime'?",
            "Show me the TV channel that airs the episode called 'A Love of a Lifetime'.",
            "Find the TV channel that features the episode named 'A Love of a Lifetime'."
        ],
        "feedback": [
            "This variation is clear and accurate, but adding 'currently' could improve clarity. The term 'airing' is suitable for present broadcasts, while other variations suggest past broadcasts.",
            "The phrase 'broadcasted' is slightly past-tense biased. Using 'airs' or 'featuring' would cater to both present and past contexts.",
            "Good phrasing and accurate. It avoids the potential past-tense bias of 'broadcasted'. Focus on the present, such as 'features' the episode."
        ],
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "original_utterance": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name."
    },
    {
        "init": [
            "Which episodes are available for the series named 'Sky Radio'?",
            "Can you list all episodes of the TV series 'Sky Radio'?",
            "Show me the episodes from the TV series called 'Sky Radio'."
        ],
        "final": [
            "Which episodes are available for the series named 'Sky Radio'?",
            "Can you show me all episodes of the TV series 'Sky Radio'?",
            "Show me the episodes from the TV series called 'Sky Radio'."
        ],
        "feedback": [
            "Accurate and clear. No direct reference to SQL schema or jargon is present.",
            "Phrasing is good, but the word 'list' might suggest a formatting that isn't necessary. Consider simplifying.",
            "Clear and accurate. Aligns well with the original query's intent without utilizing any SQL-specific terms."
        ],
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_utterance": "List the Episode of all TV series showed on TV Channel with series name \"Sky Radio\"."
    },
    {
        "init": [
            "Which cartoon has the earliest original air date and what is its production code and channel?",
            "Can you provide the production code and channel of the cartoon that aired first?",
            "Find the earliest aired cartoon and give me its production code and channel."
        ],
        "final": [
            "Which cartoon originally aired first, and what are its production code and channel?",
            "Can you provide the production code and the channel of the cartoon that originally aired first?",
            "Find the first originally aired cartoon and give me its production code and channel."
        ],
        "feedback": [
            "This variation is clear and correctly captures the query's requirements. However, it could be slightly more concise by removing redundant phrases.",
            "Good phrasing but adding 'the' before 'production code and channel' would improve the flow. Also, specifying 'originally aired first' makes it clearer.",
            "This variation is accurate and concise. The phrase 'earliest aired cartoon' could be rewritten for better flow, such as 'first aired cartoon.' Adding 'originally' can improve clarity."
        ],
        "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "original_utterance": "Find the production code and channel of the most recently aired cartoon."
    },
    {
        "init": [
            "Which countries have TV channels airing cartoons written by Todd Casey?",
            "List the countries with TV channels that broadcast cartoons by Todd Casey.",
            "Show me the countries where TV channels feature cartoons written by Todd Casey."
        ],
        "final": [
            "Which countries have TV channels that air cartoons written by Todd Casey?",
            "List the countries with TV channels that show cartoons by Todd Casey.",
            "Show me the countries where TV channels feature cartoons written by Todd Casey."
        ],
        "feedback": [
            "This variation is clear and directly addresses the query. However, specifying 'airing' might imply currently, which isn't specified in the SQL query.",
            "This phrasing captures the intent well, but 'broadcast' might be slightly ambiguous. Otherwise, it's clear and precise.",
            "There is a good use of 'feature\u2019 to indicate the airing of cartoons. It's clear and avoids any possible confusion."
        ],
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Todd Casey'",
        "original_utterance": "which countries' tv channels are playing some cartoon written by Todd Casey?"
    },
    {
        "init": [
            "Show me the countries that have TV channels which do not air cartoons written by Todd Casey.",
            "Which countries have TV channels that don't broadcast any cartoons written by Todd Casey?",
            "Find the countries with TV channels that are not associated with any cartoons written by Todd Casey."
        ],
        "final": [
            "Show me the countries that have TV channels which do not broadcast cartoons written by Todd Casey.",
            "Which countries have TV channels that don't broadcast any cartoons written by Todd Casey?",
            "Find the countries with TV channels that are not broadcasting any cartoons written by Todd Casey."
        ],
        "feedback": [
            "This variation is clear but could potentially broaden the user's understanding by explicitly mentioning 'broadcast' instead of 'air.' Additionally, it accurately captures the intent of the query.",
            "The term 'broadcast' is more clear than 'air.' This version is quite accurate and precise, maintaining the original query's logic while translating it into natural language.",
            "Good phrasing, but the term 'associated' might add some ambiguity. It might be helpful to reinforce the idea that these channels do not broadcast Todd Casey's cartoons."
        ],
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "original_utterance": "which countries' tv channels are not playing any cartoon written by Todd Casey?"
    },
    {
        "init": [
            "Which TV series are directed by both Michael Chang and Ben Jones, and what countries do they originate from?",
            "Can you list the TV series along with their countries that have both Michael Chang and Ben Jones as directors?",
            "Find the TV series names and their countries for shows directed by both Michael Chang and Ben Jones."
        ],
        "final": [
            "Which TV series directed by both Michael Chang and Ben Jones, and which countries do they originate from?",
            "Can you list the TV series along with their countries that were directed by both Michael Chang and Ben Jones?",
            "Find the TV series names and the countries they originate from for shows directed by both Michael Chang and Ben Jones."
        ],
        "feedback": [
            "This variation is clear and accurately captures the SQL query's intent. However, explicitly mentioning 'TV series' and their 'countries' ensures the request is specific.",
            "Good phrasing, but consider mentioning TV series and countries explicitly to avoid any ambiguity. The phrase 'list the TV series' is specific and suitable.",
            "This is accurate and clear but could benefit from mentioning 'originate from' or 'produced in' to highlight the country information explicitly."
        ],
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "original_utterance": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?"
    },
    {
        "init": [
            "Which TV channel IDs come from countries with more than two channels?",
            "Can you list the IDs of TV channels from countries that have more than two channels?",
            "Show the IDs of TV channels grouped by countries where the number of channels exceeds two."
        ],
        "final": [
            "Which TV channel IDs are in countries with more than two channels?",
            "Can you list the IDs of unique TV channels from countries that have more than two channels?",
            "Show the IDs of TV channels in countries where the number of channels exceeds two."
        ],
        "feedback": [
            "This variation is clear but could be made more natural by replacing 'come from' with 'are in'.",
            "Good phrasing, but it could be even clearer by specifying 'unique' for channels and avoiding repetitive use of 'channels'.",
            "Accurate and conveys the intent, but could be simplified to avoid over-specification of 'grouped' concept."
        ],
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "original_utterance": "find id of the tv channels that from the countries where have more than two tv channels."
    },
    {
        "init": [
            "Show me the IDs of TV Channels that do not have cartoons directed by Ben Jones.",
            "List the TV Channel IDs that exclude cartoons directed by Ben Jones.",
            "Which TV Channel IDs are not associated with any cartoons directed by Ben Jones?"
        ],
        "final": [
            "Show me the TV Channels that do not have cartoons directed by Ben Jones.",
            "List the TV Channels that do not include cartoons directed by Ben Jones.",
            "Which TV Channels do not include any cartoons directed by Ben Jones?"
        ],
        "feedback": [
            "Clear and precise, but it might be better to omit 'IDs' and simply refer to 'TV Channels' for a more natural query.",
            "This variation is accurate but could be refined for fluency. The term 'exclude' might be confusing; consider using 'do not include'.",
            "Good phrasing but slightly verbose. Simplifying 'are not associated with any' to 'do not include' might improve clarity."
        ],
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "original_utterance": "find the id of tv channels that do not play any cartoon directed by Ben Jones."
    },
    {
        "init": [
            "How many poker players are there?",
            "Can you provide the total number of poker players?",
            "What is the count of all poker players?"
        ],
        "final": [
            "How many poker players are there?",
            "Tell me the total number of poker players?",
            "What is the total number of poker players?"
        ],
        "feedback": [
            "This variation is clear and appropriately captures the intent of counting poker players. No changes are needed.",
            "This variation is good, but the phrasing could be simplified for better readability. Consider using 'Tell me the total number of poker players.'",
            "The term 'count' is correct but could be made more conversational by changing it to 'total number.' Consider rephrasing to combine both clarity and natural speech."
        ],
        "query": "SELECT count(*) FROM poker_player",
        "original_utterance": "How many poker players are there?"
    },
    {
        "init": [
            "Can you list the earnings of poker players in descending order?",
            "Show me the poker players' earnings sorted from highest to lowest.",
            "What are the earnings of all poker players arranged in decreasing order?"
        ],
        "final": [
            "Can you list the poker players' earnings in descending order?",
            "Show me the earnings of poker players sorted from highest to lowest.",
            "What are the poker players' earnings sorted in decreasing order?"
        ],
        "feedback": [
            "Clear and concise. However, it can be improved by explicitly requesting the earnings data only.",
            "This variation is well-phrased but could clarify that only earnings are being shown, without needing player names.",
            "Good and clear, but it might be simpler while still conveying the same intent."
        ],
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "original_utterance": "List the earnings of poker players in descending order."
    },
    {
        "init": [
            "Show me the final table appearances and best finish for each poker player.",
            "Can you provide the list of poker players with their final table appearances and best finishes?",
            "What are the final table appearances and best finishes for poker players?"
        ],
        "final": [
            "Show me the number of final table appearances and best finish for each poker player.",
            "Can you provide the list of poker players with their number of final table appearances and best finishes?",
            "What are the number of final table appearances and best finishes for poker players?"
        ],
        "feedback": [
            "This variation is clear and straightforward but could be slightly improved by specifying it means 'number' of final table appearances.",
            "Accurate and clear but slightly verbose. It benefits from specifying it lists 'number of' final table appearances.",
            "This is accurate and concise. No changes are needed, but specifying 'number of' appearances might add clarity."
        ],
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "original_utterance": "List the final tables made and the best finishes of poker players."
    },
    {
        "init": [
            "What is the average earnings of poker players?",
            "Can you tell me the average earnings for a poker player?",
            "Find the average earnings of all poker players."
        ],
        "final": [
            "What is the average earnings for a poker player?",
            "Can you show me the average earnings for a poker player?",
            "Find the average earnings of all poker players."
        ],
        "feedback": [
            "Clear and accurate, but the plural form 'poker players' could be simplified to 'a poker player' to match the SQL query more closely.",
            "Good phrasing. It is clear and avoids any technical jargon, but 'tell me' could be replaced with 'show me' for a slightly more formal tone.",
            "Accurate and concise. The term 'all poker players' adds clarity and aligns well with the SQL query. No changes needed."
        ],
        "query": "SELECT avg(Earnings) FROM poker_player",
        "original_utterance": "What is the average earnings of poker players?"
    },
    {
        "init": [
            "Who is the top-ranked poker player in terms of earnings?",
            "Can you tell me the money rank of the poker player with the highest earnings?",
            "Find the money rank of the poker player who has the most earnings."
        ],
        "final": [
            "Who holds the highest money rank in poker based on earnings?",
            "Can you tell me the money rank of the poker player with the highest earnings?",
            "Find the money rank of the poker player with the highest earnings."
        ],
        "feedback": [
            "Clear and accurate but does not mention 'Money_Rank' explicitly, which is part of the original intent.",
            "This is a good variation, but be careful with phrasing to avoid confusion between 'money rank' and 'earnings.' Consider rephrasing for clarity.",
            "Accurate and well-phrased. Though it could rephrase 'most earnings' to 'highest earnings' for better clarity."
        ],
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "original_utterance": "What is the money rank of the poker player with the highest earnings?"
    },
    {
        "init": [
            "What is the highest number of final tables made by a poker player whose earnings are less than $200,000?",
            "Can you find the poker player with the maximum final tables made who earned less than $200,000?",
            "Find out the maximum number of final tables a poker player has made with earnings under $200,000."
        ],
        "final": [
            "What is the highest number of final tables made by a poker player with career earnings under $200,000?",
            "Can you find the maximum number of final tables made by a poker player whose career earnings are less than $200,000?",
            "Find out the maximum number of final tables a poker player has made with earnings under $200,000."
        ],
        "feedback": [
            "This variation is clear and directly asks for the maximum number of final tables; however, it could be improved by making it more conversational and specifying 'career earnings' for clarity.",
            "The phrase 'find the poker player' might imply seeking a specific player rather than the number of tables. It should focus on the number of final tables instead.",
            "This variation is accurate and concise but could be enhanced by making it more conversational. The use of 'under' instead of 'less than' feels more natural."
        ],
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "original_utterance": "What is the maximum number of final tables made among poker players with earnings less than 200000?"
    },
    {
        "init": [
            "Show me the names of people who are poker players.",
            "List all the individuals who also play poker.",
            "Who amongst the people are listed as poker players?"
        ],
        "final": [
            "Show me the names of people who are also poker players.",
            "List all the people who are poker players.",
            "Who amongst the people are poker players?"
        ],
        "feedback": [
            "This variation is clear and directly addresses the SQL query. However, it might be improved by explicitly using 'are also', ensuring the relationship between 'people' and 'poker players' is emphasized.",
            "Good phrasing, but 'individuals who also play poker' could be refined for clarity. The term 'also' might imply individuals have another role besides being poker players.",
            "This is an accurate and concise variation, it is clear and to the point. No major changes needed, although rephrasing 'listed as' might make it smoother."
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "original_utterance": "What are the names of poker players?"
    },
    {
        "init": [
            "Can you provide the names of people whose earnings in poker exceed 300,000?",
            "Show me the list of names of people with poker earnings greater than 300,000.",
            "Who are the individuals earning more than 300,000 from poker?"
        ],
        "final": [
            "Can you list the names of people whose poker earnings exceed 300,000?",
            "Show me the names of people with poker earnings over 300,000.",
            "Who are the individuals earning more than 300,000 from poker?"
        ],
        "feedback": [
            "Clear and accurate, but it could be more straightforward by explicitly specifying that these are poker players' earnings.",
            "Good phrasing but could be improved by making it more concise and directly relevant to poker players.",
            "Concise and clear. Directly addresses the query. No issues found."
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "original_utterance": "What are the names of poker players whose earnings is higher than 300000?"
    },
    {
        "init": [
            "Can you list the names of people who have made the final table in a poker tournament, sorted by the number of times?",
            "Show me the names of poker players, sorted by the number of final tables they have made.",
            "Find and list the names of individuals who have reached the final table in poker, ordered by their final table appearances."
        ],
        "final": [
            "Can you list the names of people who have made the final table in a poker tournament?",
            "Show me the names of poker players, ordered by the number of final tables they have made.",
            "Find and list the names of individuals who have reached the final table in poker, sorted by their final table appearances."
        ],
        "feedback": [
            "This variation is clear and captures the primary intent well but could be more concise. Mentioning 'number of times' might not align accurately with the SQL query directly.",
            "Good phrasing and correctly mentions the key intent. No significant changes needed although 'show' might be preferred over 'sorted' to keep it non-technical.",
            "Accurate and concise. No changes needed. Avoids technical SQL terms and captures the query intent well."
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "original_utterance": "List the names of poker players ordered by the final tables made in ascending order."
    },
    {
        "init": [
            "What is the birth date of the poker player with the lowest earnings?",
            "Show me the birthdate of the least earning poker player.",
            "Find the date of birth for the poker player who has earned the least."
        ],
        "final": [
            "What is the birth date of the poker player with the lowest earnings?",
            "Show me the birth date of the poker player with the lowest earnings.",
            "Find the birth date for the poker player who has the lowest earnings."
        ],
        "feedback": [
            "This variation is accurate and clearly conveys the intent of the SQL query. It effectively captures the idea of finding the poker player with the lowest earnings.",
            "Good variation, but 'least earning' could be replaced with 'lowest earning' for better clarity. Also, 'birthdate' should be two words: 'birth date'.",
            "The variation is accurate but could be improved in terms of fluency. 'Least earning' can be rephrased as 'lowest earnings' for more natural language."
        ],
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "original_utterance": "What is the birth date of the poker player with the lowest earnings?"
    },
    {
        "init": [
            "What is the money rank of the tallest poker player?",
            "Show me the money rank for the poker player who is the tallest.",
            "Find the money rank of the poker player with the greatest height."
        ],
        "final": [
            "What is the money rank of the poker player with the greatest current height?",
            "Show me the money rank for the poker player who has the tallest height currently.",
            "Find the money rank of the poker player with the greatest height."
        ],
        "feedback": [
            "This variation accurately captures the intent of finding the money rank but could be more specific by mentioning 'current' height to avoid ambiguity.",
            "Clear and precise; however, it could detail 'current' height of the poker player to avoid confusion with historical data.",
            "Good phrasing and completely accurate. The use of 'greatest height' is clear and avoids technical jargon."
        ],
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "original_utterance": "What is the money rank of the tallest poker player?"
    },
    {
        "init": [
            "What is the average earnings of poker players who are taller than 200 cm?",
            "Can you find the mean earnings for poker players whose height exceeds 200 cm?",
            "Show me the average earnings for poker players with a height over 200 cm."
        ],
        "final": [
            "What is the average earnings of poker players who are taller than 200 cm?",
            "Can you find the average earnings for poker players whose height exceeds 200 cm?",
            "Show me the average earnings for poker players with a height over 200 cm."
        ],
        "feedback": [
            "This variation is clear and accurate. It maintains the intent of the original query well.",
            "The use of 'mean earnings' is technically correct but may feel less natural. Consider using 'average earnings' to align better with natural language.",
            "Clear and concise. This variation captures the intent without any technical jargon and is easy to understand."
        ],
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "original_utterance": "What is the average earnings of poker players with height higher than 200?"
    },
    {
        "init": [
            "Can you list the names of poker players in descending order of their earnings?",
            "Show me the names of poker players sorted by their earnings in descending order.",
            "Which poker players have earned the most money, listed from highest to lowest?"
        ],
        "final": [
            "Can you list the names of poker players from the highest earners to the lowest?",
            "Show me the names of poker players ordered by their earnings from highest to lowest.",
            "Which poker players have earned the most money, sorted by earnings from highest to lowest?"
        ],
        "feedback": [
            "Clear and accurate, but the phrase 'in descending order' can be made more natural by rephrasing.",
            "Good phrasing, but 'sorted by their earnings in descending order' could be simplified for better clarity.",
            "The variation is accurate and avoids technical terminology, although 'listed from highest to lowest' could be simplified to improve readability."
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "original_utterance": "What are the names of poker players in descending order of earnings?"
    },
    {
        "init": [
            "How many people are there from each nationality?",
            "Show me the count of people grouped by their nationality.",
            "Can you provide the number of individuals for each nationality?"
        ],
        "final": [
            "How many people are there from each nationality?",
            "Show me the count of people by their nationality.",
            "Can you provide the number of people for each nationality?"
        ],
        "feedback": [
            "This variation is clear and directly asks for the count of people by nationality. No improvement needed.",
            "Good phrasing with the term 'grouped by' which matches the SQL structure, but this can be simplified to sound more natural.",
            "The phrasing is accurate and clear. Consider replacing 'individuals' with a more common term like 'people' to enhance accessibility."
        ],
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "original_utterance": "What are different nationalities of people and the corresponding number of people from each nation?"
    },
    {
        "init": [
            "Which nationality has the highest number of people?",
            "Can you tell me the most common nationality in the people table?",
            "Find the nationality with the most entries in the database."
        ],
        "final": [
            "Which nationality has the highest number of people recorded?",
            "Can you tell me the most common nationality among all people?",
            "Find the nationality with the most records in the people data."
        ],
        "feedback": [
            "This variation is clear and addresses the key elements; however, it could be more explicit about the source.",
            "Good phrasing, but it could be clearer by specifying the source more precisely instead of 'people table'.",
            "Accurate and concise, but the term 'entries in the database' might be too technical. Consider referring to 'people data' instead."
        ],
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "original_utterance": "What is the most common nationality of people?"
    },
    {
        "init": [
            "Can you list the nationalities that have at least two people?",
            "Which nationalities are represented by two or more individuals?",
            "Show me the nationalities of the people where there are at least two members of that nationality."
        ],
        "final": [
            "Can you list the nationalities that have at least two people?",
            "Which nationalities are currently represented by two or more individuals?",
            "Show the nationalities that have at least two members."
        ],
        "feedback": [
            "This variation is clear and aligns with the intent of the query. It avoids technical terms and is easy to understand. No changes needed.",
            "Good phrasing but adding 'currently' before 'represented' might improve clarity regarding the data's timeframe. Otherwise, it's clear and concise.",
            "This variation is accurate but a bit wordy. Simplifying the phrasing could improve readability. Also, specifying 'shows nationalities with at least two members' might make it clearer."
        ],
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "original_utterance": "What are the nationalities that are shared by at least two people?"
    },
    {
        "init": [
            "Can you list the names and birth dates of all people sorted alphabetically?",
            "Show me the names and birth dates of everyone in alphabetical order.",
            "Get the names and birth dates of all individuals sorted by name."
        ],
        "final": [
            "Can you list the names and birth dates of all people sorted alphabetically by name?",
            "Show me the names and birth dates of everyone sorted by name in ascending order.",
            "Get the names and birth dates of all individuals sorted by name in ascending order."
        ],
        "feedback": [
            "This variation is clear and concise, but 'alphabetically' can be confused with 'ASC'. Explicitly referencing sorting helps.",
            "Good phrasing, but adding 'sorted by name' would make it clearer that the ordering is by the Name field.",
            "Accurate and concise, but 'sorted by name in ascending order' could provide more precision."
        ],
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "original_utterance": "List the names and birth dates of people in ascending alphabetical order of name."
    },
    {
        "init": [
            "Can you list the names of people who are not from Russia?",
            "Show me the names of individuals whose nationality is not Russian.",
            "Which people have a nationality other than Russian?"
        ],
        "final": [
            "Can you list the names of people who are not from Russia?",
            "Show me the names of individuals whose nationality is not Russian.",
            "Which people have a nationality other than Russian?"
        ],
        "feedback": [
            "This variation is straightforward and clear but could be slightly refined for fluency. The phrase 'who are not from Russia' works well, but specifying 'names' before 'people' could emphasize the request.",
            "Accurate and clear. This phrasing is good as it avoids SQL-specific terms and directly states 'nationality is not Russian', which matches the query intent well.",
            "This variation is also precise and understandable. It uses a different structure but clearly conveys the query's purpose. Using 'nationality other than Russian' is clean and mirrors natural language."
        ],
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "original_utterance": "Show names of people whose nationality is not \"Russia\"."
    },
    {
        "init": [
            "Show me the names of people who are not poker players.",
            "Can you list the people who are not involved in poker?",
            "Which people do not have a record as poker players?"
        ],
        "final": [
            "Show me the names of people who are not poker players.",
            "Can you list the people who are not poker players?",
            "Which people are not poker players?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the SQL query. No changes needed.",
            "The phrasing is good, but 'involved in poker' could be misinterpreted. It's better to specify non-players directly.",
            "This variation is precise. However, the mention of 'a record as poker players' can be simplified to avoid ambiguity."
        ],
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "original_utterance": "List the names of people that are not poker players."
    },
    {
        "init": [
            "What is the maximum and minimum number of people killed from the death records?",
            "Can you provide the highest and lowest number of fatalities from the death dataset?",
            "Show me the record with the most and the least number of deaths."
        ],
        "final": [
            "What is the maximum and minimum number of people killed from the death records?",
            "Can you provide the highest and lowest number of deaths from the death records?",
            "Show me the highest and lowest number of deaths recorded."
        ],
        "feedback": [
            "This variation is clear and aligns well with the original query. It's straightforward and specifies the data source, death records.",
            "Good phrasing, but the term 'dataset' could be rephrased to make it less technical. Consider specifying 'deaths' instead of 'fatalities' to align terminology more closely with the SQL query.",
            "This variation mentions 'the record,' which could imply a single record rather than evaluating across all records. Consider rephrasing to reflect the aggregate nature of the query more clearly."
        ],
        "query": "SELECT max(killed) ,  min(killed) FROM death",
        "original_utterance": "What is maximum and minimum death toll caused each time?"
    },
    {
        "init": [
            "Show me the number of people killed and injured by a ship with a tonnage of 't'.",
            "Can you provide the details of deaths and injuries caused by ships with a tonnage of 't'?",
            "Retrieve the counts of killed and injured individuals from incidents involving ships with a tonnage of 't'."
        ],
        "final": [
            "Show the number of people killed and injured by a ship with a tonnage of 't'.",
            "Can you provide details of deaths and injuries caused by ships with a tonnage of 't'?",
            "Retrieve the numbers of people killed and injured in incidents involving ships with a tonnage of 't'."
        ],
        "feedback": [
            "This variation is clear and accurate, but the phrasing could be smoother. The phrase 'killed and injured by a ship' is appropriate but could be more naturally phrased.",
            "This variation is clear but might be too verbose. Consider simplifying the phrasing while keeping the context intact.",
            "This variation correctly conveys the information, though it could be a bit more succinct. Ensure the phrasing remains natural and avoids any overly technical language."
        ],
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "original_utterance": "What are the death and injury situations caused by the ship with tonnage 't'?"
    },
    {
        "init": [
            "Which battles involved the loss of Brig-class ships?",
            "Can you list the battles where Brig-type ships were lost?",
            "Show me the battles that had losses of ships classified as Brig."
        ],
        "final": [
            "Which distinct battles involved the loss of Brig-class ships?",
            "Can you list the distinct battles where Brig-type ships were lost?",
            "Show me the battles that had losses of ships classified as Brig."
        ],
        "feedback": [
            "This variation is clear but could specify involving only the distinct battles to add precision.",
            "Good phrasing, but it could be clearer by mentioning unique or distinct battles to reflect the SQL query better.",
            "Accurate and concise. No changes needed, but it avoids technical SQL terms like 'DISTINCT' and the SQL structure 'JOIN', which is a good practice."
        ],
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "original_utterance": "What are the different ids and names of the battles that lost any 'Brig' type ships?"
    },
    {
        "init": [
            "List the battles and their IDs where more than 10 people were killed, considering the ships involved in those battles.",
            "Which battles resulted in a total of more than 10 deaths, and what are their names and IDs?",
            "Show battles where the total number of deaths exceeds 10, including the battle names and IDs."
        ],
        "final": [
            "List the battles and their IDs where more than 10 people were killed due to the ships involved.",
            "Which battles resulted in a total of more than 10 deaths caused by ships, and what are their names and IDs?",
            "Show battles where the total number of deaths caused by ships exceeds 10, including the battle names and IDs."
        ],
        "feedback": [
            "This variation is quite accurate but might benefit from explicitly mentioning that the deaths are caused by ships in those battles.",
            "Good phrasing and clear intent. However, it could be clearer by specifying that the deaths are attributable to ships.",
            "Accurately conveys the intent of the query but should emphasize deaths related to ships in the battles for better clarity."
        ],
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "original_utterance": "What are the ids and names of the battles that led to more than 10 people killed in total."
    },
    {
        "init": [
            "Which ship caused the highest number of injuries?",
            "Identify the ship with the most injuries associated with it.",
            "Show me the ship responsible for the most injuries."
        ],
        "final": [
            "Which ship caused the highest number of recorded injuries?",
            "Identify the ship with the most recorded injuries associated with it.",
            "Show me the ship resulting in the most injuries recorded."
        ],
        "feedback": [
            "This variation accurately captures the intent of the query but could be made more precise by specifying 'recorded injuries' instead of just 'injuries'.",
            "Clear and specific, this variation is accurate but could include the word 'recorded' to emphasize the data source.",
            "This variation is concise and clear, but the term 'responsible for the most injuries' could be interpreted ambiguously. Consider specifying 'resulting in the most injuries recorded'."
        ],
        "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured) DESC LIMIT 1",
        "original_utterance": "What is the ship id and name that caused most total injuries?"
    },
    {
        "init": [
            "What are the names of battles where Kaloyan was the Bulgarian commander and Baldwin I was the Latin commander?",
            "Can you list the battles commanded by Kaloyan for Bulgaria and Baldwin I for the Latin Empire?",
            "Find the battle names where the Bulgarian commander was Kaloyan and the Latin commander was Baldwin I."
        ],
        "final": [
            "What are the names of battles where Kaloyan was the Bulgarian commander and Baldwin I was the Latin commander?",
            "Can you list the names of battles commanded by Kaloyan for Bulgaria and Baldwin I for the Latin Empire?",
            "Find the battle names where the Bulgarian commander was Kaloyan and the Latin commander was Baldwin I."
        ],
        "feedback": [
            "Clear and accurate. It captures the essence of the query with no SQL-specific terminology.",
            "Precise and avoids SQL jargon well. Adding 'the' before 'battles' could improve clarity.",
            "Accurate and concise. No SQL jargon present, making it user-friendly."
        ],
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "original_utterance": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?"
    },
    {
        "init": [
            "How many battles are there where no 225-ton ships were lost?",
            "Count the number of battles that did not have any ships with a tonnage of 225 lost.",
            "Show the total number of battles excluding those where a ship weighing 225 tons was destroyed."
        ],
        "final": [
            "How many battles are there where no ships weighing 225 tons were lost?",
            "Count the number of battles without any ships with a tonnage of 225 lost.",
            "Show the total number of battles excluding those where a ship weighing 225 tons was lost."
        ],
        "feedback": [
            "This variation is clear and concise but could specify 'ships weighing 225 tons' for better clarity.",
            "This is accurate but slightly wordy. Simplify to improve readability and avoid ambiguous terminology such as 'any ships'.",
            "Accurate and clear. No need for changes, though simplifying 'excluding those' can make it more concise."
        ],
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "original_utterance": "How many battles did not lose any ship with tonnage '225'?"
    },
    {
        "init": [
            "Which battles involved both the ships named 'Lettice' and 'HMS Atalanta'?",
            "Find the battles where both 'Lettice' and 'HMS Atalanta' were lost.",
            "Show me the dates and names of battles in which both ships, 'Lettice' and 'HMS Atalanta', were involved."
        ],
        "final": [
            "Which battles involved the loss of both 'Lettice' and 'HMS Atalanta'?",
            "Find the battles where both ships named 'Lettice' and 'HMS Atalanta' were lost.",
            "Show me the dates and names of battles in which both 'Lettice' and 'HMS Atalanta' were involved and lost."
        ],
        "feedback": [
            "Clear and to the point. The term 'involved' can be retained but can specify losses for clarity.",
            "Accurate but could benefit from more natural phrasing. 'Lost' could be replaced to avoid ambiguity.",
            "Good detail provided. The term 'involved' is appropriate and avoids direct SQL reference."
        ],
        "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "original_utterance": "List the name and date of the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'"
    },
    {
        "init": [
            "List the battle names, results, and Bulgarian commanders of battles that didn't take place in the English Channel.",
            "Show the names, outcomes, and Bulgarian commanders of battles, excluding those associated with ships lost in the English Channel.",
            "Provide the names, results, and Bulgarian commanders of battles, except those linked to a ship lost in the English Channel."
        ],
        "final": [
            "List the battle names, results, and Bulgarian commanders excluding those where ships were lost in the English Channel.",
            "Show the names, results, and Bulgarian commanders of battles, excluding those involving ships lost in the English Channel.",
            "Provide the names, results, and Bulgarian commanders of battles, except those linked to a ship lost in the English Channel."
        ],
        "feedback": [
            "This variation implies battles took place in specific locations, which isn't entirely accurate. It should focus on excluding battles where ships were lost in the English Channel instead.",
            "This phrasing is clear but 'associated with ships lost in the English Channel' might not emphasize the exclusion aspect properly.",
            "This variation is accurate and clear, aligning well with the original query's intent. The term 'linked' effectively replaces technical SQL references."
        ],
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "original_utterance": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'."
    },
    {
        "init": [
            "How many countries are in each continent and what are their ContId and names?",
            "List the ContId, name, and number of countries for each continent.",
            "Provide the ContId, continent name, and a country count for each continent."
        ],
        "final": [
            "How many countries are in each continent and what are their names? Please include the continent ID.",
            "List the continent ID, name, and number of countries for each continent.",
            "Provide the ID, continent name, and number of countries for each continent."
        ],
        "feedback": [
            "This variation conveys the query well, but 'ContId' is technical jargon. Consider simplifying it. Mentioning 'names' can cause misunderstanding as multiple names can be interpreted. Use 'continent name' instead.",
            "This variation is clear and avoids much technical jargon but still includes 'ContId,' which might be unclear for non-technical users.",
            "This variation straightforwardly conveys the SQL query's intent without too much technical detail. However, the term 'ContId' could be simplified."
        ],
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "original_utterance": "How many countries does each continent have? List the continent id, continent name and the number of countries."
    },
    {
        "init": [
            "Can you list each car maker along with their ID and the total number of models they have?",
            "Show me the full names and IDs of car makers along with a count of how many models each one has.",
            "Provide the ID, name, and the number of models for each car maker."
        ],
        "final": [
            "Can you list each car maker along with their ID and the total number of models?",
            "Show me the full names and IDs of each car maker along with a count of how many models they have.",
            "Provide the number of models, ID, and full name for each car maker."
        ],
        "feedback": [
            "This variation is clear and covers all necessary details. It could be slightly more concise.",
            "Accurate and direct, but adding 'each' before 'car makers' would improve clarity.",
            "This is accurate and concise. It could benefit from rearranging for better flow."
        ],
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "original_utterance": "How many models does each car maker produce? List maker full name, id and the number."
    },
    {
        "init": [
            "What is the car model with the lowest horsepower?",
            "Can you find the car model with the least horsepower?",
            "Show me the car model that comes with the minimum horsepower."
        ],
        "final": [
            "What is the car model with the lowest horsepower?",
            "Can you find the car model with the least horsepower currently available?",
            "Show me the car model that has the lowest horsepower."
        ],
        "feedback": [
            "This variation is clear and aligned with the SQL query's intent. It doesn't need any changes.",
            "This variation is also accurate. Consider specifying 'currently available' to make it clearer that we are looking at the present data.",
            "This variation accurately captures the query's intent but could be slightly refined for brevity by revising 'comes with the minimum' to 'has the lowest.'"
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "original_utterance": "Which model of the car has the minimum horsepower?"
    },
    {
        "init": [
            "Which car models are lighter than the average weight?",
            "Show me the car models where the weight is below the average weight from the dataset.",
            "List all car models that have a weight less than the average weight of all cars."
        ],
        "final": [
            "Which car models have a weight below the average?",
            "Show me the car models where the weight is below the average weight.",
            "List all car models that are lighter than the average weight of the cars."
        ],
        "feedback": [
            "This variation is clear and concise but does not explicitly mention that the average weight is calculated from the dataset.",
            "This is a clear and accurate variation, but it would be better to replace 'from the dataset' with more natural phrasing.",
            "Accurate and informative. The phrase 'all cars' is slightly redundant since it's implied."
        ],
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "original_utterance": "Find the model of the car whose weight is below the average weight."
    },
    {
        "init": [
            "Which car makers produced models in the year 1970?",
            "List all distinct car manufacturers that had models released in 1970.",
            "Find all unique makers of cars that dated back to the year 1970."
        ],
        "final": [
            "Which car makers released models in the year 1970?",
            "List all distinct car manufacturers that had models released in 1970.",
            "Find all unique makers of cars that were released in the year 1970."
        ],
        "feedback": [
            "Clear and concise. It accurately conveys the intent of the original SQL query. It may benefit from the word 'released' being added for clarity.",
            "The phrasing is precise and clear. No changes needed. It avoids technical jargon and is straightforward.",
            "This variation is slightly ambiguous due to 'dated back to,' which can imply older models still existing in 1970. The term 'released' should be used to match the intent precisely."
        ],
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "original_utterance": "Find the name of the makers that produced some cars in the year of 1970?"
    },
    {
        "init": [
            "Show the car make and the year for the car with the earliest manufacturing year in the records.",
            "Can you provide the make and year of the car that has the oldest manufacturing year?",
            "Find the make and manufacturing year of the car produced earliest from the available data."
        ],
        "final": [
            "Show the car make and the year for the car with the earliest manufacturing year in the records?",
            "Can you provide the make and the year of the car with the earliest manufacturing year?",
            "Find the make and manufacturing year of the car produced earliest from the available data."
        ],
        "feedback": [
            "This variation is clear and captures the intent of retrieving the car with the earliest manufacturing year. However, it could specify 'manufacturing' to avoid ambiguity.",
            "Good phrasing, but 'oldest manufacturing year' is a bit verbose. 'Earliest year' might flow better. Ensure it\u2019s clear that make and year are being retrieved from the earliest year.",
            "Accurate and concise. This variation avoids redundancy but could explicitly mention 'from the available data' towards the end for clarity."
        ],
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "original_utterance": "Find the make and production time of the cars that were produced in the earliest year?"
    },
    {
        "init": [
            "Show me a list of distinct car models from the MODEL_LIST table that were manufactured after 1980.",
            "What are the unique car models available in the database for cars made after 1980?",
            "Can you find all distinct car models from the MODEL_LIST table where the cars are newer than 1980?"
        ],
        "final": [
            "Show me a list of distinct car models that were manufactured after 1980.",
            "What are the unique car models available for cars made after 1980?",
            "Can you find all distinct car models where the cars are newer than 1980?"
        ],
        "feedback": [
            "Using 'table' in the natural language utterance is a bit technical. Overall, it captures the intent but can be simplified for better readability.",
            "This variation is clear and avoids technical terms, but could be more specific about the tables being joined to derive the query result.",
            "While accurate, mentioning 'table' makes it slightly technical. Also, a minor improvement could be to specify that it refers to distinct models."
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "original_utterance": "Which distinct car models are the produced after 1980?"
    },
    {
        "init": [
            "How many car makers are there in each continent?",
            "Can you provide the count of car manufacturers grouped by continent?",
            "Show me the number of car makers in different continents."
        ],
        "final": [
            "How many car makers exist in each continent?",
            "Can you provide the count of car manufacturers for each continent?",
            "Show me the number of car makers in each continent."
        ],
        "feedback": [
            "Accurate and clear, but changing 'there are' to 'exist' could make it slightly more formal and focused.",
            "This phrasing is good, but 'grouped by continent' could be replaced with 'for each continent' to be more natural.",
            "Clear and concise. No changes needed, but consider rephrasing 'different continents' to 'each continent' for alignment with grouping."
        ],
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "original_utterance": "How many car makers are there in each continents? List the continent name and the count."
    },
    {
        "init": [
            "Which country has the highest number of car makers?",
            "Identify the country with the most car manufacturers.",
            "Find the country that has the largest number of car production companies."
        ],
        "final": [
            "Which country has the most car makers?",
            "Name the country with the most car manufacturers.",
            "Find the country that has the largest number of car production companies."
        ],
        "feedback": [
            "This variation is clear, but it could specify explicitly that it's seeking the country with the highest number of car makers. Consider removing the term 'highest' as it directly correlates with 'ORDER BY Count(*) DESC' in SQL.",
            "Good phrasing. It effectively describes the query, but could be a bit more fluid. The term 'identify' can be replaced with 'name' for clarity.",
            "Accurate and concise. It clearly translates the SQL query into a natural language question without any technical jargon. No changes needed."
        ],
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "original_utterance": "Which of the countries has the most car makers? List the country name."
    },
    {
        "init": [
            "How many models does each car maker have?",
            "Can you provide a count of car models for every car manufacturer along with their names?",
            "Show me the number of models each car manufacturer has, along with the manufacturer names."
        ],
        "final": [
            "How many models does each car maker have?",
            "Can you provide a count of car models for each car manufacturer?",
            "Show me the number of models each car manufacturer has, including the manufacturer names."
        ],
        "feedback": [
            "Clear and concise. This variation is good as it directly ties to the count of models per car maker with a simple phrasing.",
            "Accurate but a bit lengthy. It effectively captures the intent but could be made slightly more concise by eliminating 'along with their names.'",
            "This variation is also accurate. It is clear and specifies both the count of models and the manufacturer names, making it sufficiently descriptive."
        ],
        "query": "SELECT Count(*) ,  T2.FullName FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "original_utterance": "How many car models are produced by each maker? List the count and the maker full name."
    },
    {
        "init": [
            "What is the acceleration rate for the AMC Hornet Sportabout (SW)?",
            "Can you provide the acceleration details for the AMC Hornet Sportabout (SW)?",
            "Find the acceleration performance for the AMC Hornet Sportabout (SW)."
        ],
        "final": [
            "What is the acceleration rate for the AMC Hornet Sportabout (SW)?",
            "Can you provide the acceleration rate for the AMC Hornet Sportabout (SW)?",
            "Find the acceleration rate for the AMC Hornet Sportabout (SW)."
        ],
        "feedback": [
            "This variation is clear and accurate, although it might benefit from explicitly mentioning 'acceleration rate' as opposed to just 'acceleration.'",
            "Good phrasing, but the word 'details' might imply more information beyond just the acceleration rate. Consider making it more specific to avoid ambiguity.",
            "Accurate and concise. No significant changes needed, but consider replacing 'performance' with 'rate' for better alignment with the SQL query."
        ],
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "original_utterance": "What is the accelerate of the car make amc hornet sportabout (sw)?"
    },
    {
        "init": [
            "How many car manufacturers are there in France?",
            "What is the total number of car makers located in France?",
            "Can you give the count of car manufacturers based in France?"
        ],
        "final": [
            "How many car manufacturers are there in France?",
            "What is the total number of car makers in France?",
            "Can you count the car manufacturers based in France?"
        ],
        "feedback": [
            "This is clear and directly maps to the SQL query. No ambiguities or SQL jargon present.",
            "Accurate and clear. Consider rephrasing 'located in' to 'in' for brevity.",
            "Good phrasing, but 'give the count' is slightly less natural than simply asking 'how many'. Consider simplifying for clearer expression."
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "original_utterance": "How many car makers are there in france?"
    },
    {
        "init": [
            "How many car models are produced by makers located in the USA?",
            "Can you count the number of car models from manufacturers based in the USA?",
            "Find the total number of car models made by US car manufacturers."
        ],
        "final": [
            "How many car models are produced by makers based in the USA?",
            "Can you count the number of car models from manufacturers based in the USA?",
            "Find the total number of car models made by car manufacturers in the USA."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the SQL query. It is concise and avoids SQL-specific terminology effectively.",
            "This is also clear, but the phrase 'based in the USA' is slightly more precise than 'located.' It ensures there's no ambiguity about the location of the manufacturers.",
            "This variation is accurate and natural but could replace 'US' with 'USA' for consistency. It effectively avoids any SQL jargon."
        ],
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "original_utterance": "How many car models are produced in the usa?"
    },
    {
        "init": [
            "What is the weight of the lightest car with 8 cylinders from the year 1974?",
            "Show me the least heavy car from 1974 that has 8 cylinders.",
            "Find the car with the minimum weight from 1974 that has 8 cylinders."
        ],
        "final": [
            "What is the lightest car with 8 cylinders from the year 1974?",
            "Show me the lightest car from 1974 that has 8 cylinders.",
            "Find the lightest car from 1974 that has 8 cylinders."
        ],
        "feedback": [
            "This variation is clear and correctly conveys the query intent, though 'lightest' might be slightly more accessible than 'minimum weight'.",
            "The phrasing 'least heavy car' is a bit unconventional; 'lightest' might be a simpler and more natural term.",
            "This variation is accurate but could be more concise by using simpler terms like 'lightest'. Avoid using 'minimum weight', which feels technical."
        ],
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "original_utterance": "What is the smallest weight of the car produced with 8 cylinders in 1974?"
    },
    {
        "init": [
            "Which countries have at least one car maker?",
            "List the countries that have one or more car manufacturers.",
            "Can you show me the names and IDs of countries with car makers?"
        ],
        "final": [
            "Which countries (with their names and IDs) have at least one car maker?",
            "List the countries with their names and IDs that have at least one car manufacturer.",
            "Can you show me the names and IDs of countries that have car makers?"
        ],
        "feedback": [
            "This variation is clear and concise, but it could specify the need for the CountryName and CountryId to avoid losing any detail from the query.",
            "Good phrasing but 'one or more' could be replaced with 'at least one' for better clarity. Explicitly mentioning the need for both CountryName and CountryId would enhance it.",
            "This variation accurately captures the query's details. No significant changes needed, but clarity can be improved slightly by rephrasing."
        ],
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "original_utterance": "What are the countries having at least one car maker? List name and id."
    },
    {
        "init": [
            "Which countries in Europe have at least three car makers?",
            "List the European countries that have three or more car manufacturers.",
            "Can you provide the names of European countries with a minimum of three car producers?"
        ],
        "final": [
            "Which countries in Europe have at least three car manufacturers?",
            "List the European countries that have three or more car manufacturers.",
            "Can you provide the names of European countries with a minimum of three car manufacturers?"
        ],
        "feedback": [
            "This variation effectively captures the intent of the SQL query. However, the term 'car makers' could be interpreted in multiple ways. It might be clearer to use 'car manufacturers' for consistency.",
            "This version is very clear and accurately summarizes the query. The term 'car manufacturers' is very appropriate. No changes needed.",
            "The term 'producers' is acceptable but 'manufacturers' is generally more precise in this context. Overall, the sentence is clear and concise."
        ],
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_utterance": "Which countries in europe have at least 3 car manufacturers?"
    },
    {
        "init": [
            "Which car make has the highest horsepower among those with 3 cylinders?",
            "Show the car make and its horsepower for the car with the highest horsepower that has 3 cylinders.",
            "Find the car make and horsepower for the top horsepower 3-cylinder car."
        ],
        "final": [
            "Which car make has the highest horsepower among those with 3 cylinders?",
            "Show the car make and its highest horsepower for a 3-cylinder car.",
            "Find the car make and horsepower for the car with the highest horsepower and 3 cylinders."
        ],
        "feedback": [
            "This variation is clear and avoids SQL-specific terms. The intent and key elements are well-retained.",
            "The query's intent is captured accurately. It could be simplified slightly for ease of understanding. Additionally, can mention that it shows the highest horsepower explicitly.",
            "Accurate and concise. Avoiding the term 'top horsepower' in favor of more colloquial language might enhance readability."
        ],
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_utterance": "What is the maximum horsepower and the make of the car models with 3 cylinders?"
    },
    {
        "init": [
            "Which car model has the highest miles per gallon?",
            "Show me the car model with the best fuel efficiency.",
            "What is the car model with the top fuel economy?"
        ],
        "final": [
            "Which car model currently has the best miles per gallon rating?",
            "Show me the car model with the highest fuel efficiency.",
            "What is the car model with the best fuel economy?"
        ],
        "feedback": [
            "This variation clearly asks for the car model with the highest miles per gallon. It's accurate but could be more conversational.",
            "Good phrasing, but 'fuel efficiency' is a bit less direct than 'miles per gallon'. It is still easily understood, though.",
            "The term 'top fuel economy' is accurate but less commonly used in casual conversation compared to 'best fuel efficiency'."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "original_utterance": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon."
    },
    {
        "init": [
            "What is the average engine displacement for Volvo cars?",
            "Can you tell me the average engine size of Volvo models?",
            "Find the average displacement of engines in Volvo vehicles."
        ],
        "final": [
            "What is the average engine displacement for Volvo cars?",
            "Can you tell me the average engine size of Volvo models?",
            "Find the average displacement of engines in Volvo vehicles."
        ],
        "feedback": [
            "This variation is clear and directly aligned with the original SQL query. No changes needed but mentioning 'displacement' instead of technical 'edispl' is good.",
            "Good phrasing. It is relatively human-friendly and avoids technical jargon. No change is necessary.",
            "Clear and concise. It keeps the same meaning, and there's no jargony mention like 'edispl' in the origin query."
        ],
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "original_utterance": "What is the average edispl of the cars of model volvo?"
    },
    {
        "init": [
            "What is the most common car model?",
            "Which car model appears most frequently in the listings?",
            "Identify the car model listed the most number of times."
        ],
        "final": [
            "What is the most common car model?",
            "Which car model is listed most frequently?",
            "Identify the most listed car model."
        ],
        "feedback": [
            "This variation is clear and concise. It perfectly captures the intent of finding the most common car model.",
            "Good phrasing, but 'appears most frequently' could be made clearer by stating 'listed most frequently'.",
            "Accurate in meaning but 'listed the most number of times' can be simplified to 'most listed car model' for brevity."
        ],
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_utterance": "Which model has the most version(make) of cars?"
    },
    {
        "init": [
            "How many car models are there from the American Motor Company?",
            "Can you count the number of models produced by the American Motor Company?",
            "Find the total number of car models made by the American Motor Company."
        ],
        "final": [
            "How many car models are there from the American Motor Company?",
            "Can you find the total number of car models produced by the American Motor Company?",
            "Find the total number of car models from the American Motor Company."
        ],
        "feedback": [
            "Clear and straightforward. This variation captures the essence of the query well.",
            "This phrasing is accurate but could be slightly improved for natural flow by removing 'count' and using a more conversational term like 'total'.",
            "This version is concise and correctly interprets the original query, though it might benefit from rephrasing 'made by' to 'from' for better clarity."
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "original_utterance": "How many car models were produced by the maker with full name American Motor Company?"
    },
    {
        "init": [
            "Which car makers have produced more than three models?",
            "List the car manufacturers who have more than three different models in their lineup.",
            "Can you show me the car makers with over three models?"
        ],
        "final": [
            "Which car makers have produced more than three models?",
            "List the car manufacturers who have more than three models.",
            "Can you show me the car makers with over three models?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the SQL query's intent. It's easy to understand and free of SQL-specific terms.",
            "This variation is descriptive and precise, but specifying 'models in their lineup' can be redundant since the context is clear without it.",
            "This variation is succinct and avoids SQL jargon, but the term 'over' is preferable to 'more than three' for better readability."
        ],
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_utterance": "Which makers designed more than 3 car models? List full name and the id."
    },
    {
        "init": [
            "List all the unique car models manufactured by General Motors or cars that weigh more than 3500 pounds.",
            "Could you show me distinct models of cars either made by General Motors or having a weight greater than 3500 pounds?",
            "Find all unique car models from General Motors and those with a weight exceeding 3500 pounds."
        ],
        "final": [
            "List all the unique car models manufactured by General Motors or cars that weigh more than 3500 pounds.",
            "Could you show me distinct models of cars either made by General Motors or having a weight greater than 3500 pounds?",
            "Find all unique car models either from General Motors or those with a weight exceeding 3500 pounds."
        ],
        "feedback": [
            "This variation is clear and aligns well with the SQL query. The term 'unique' is directly relevant to DISTINCT in SQL, which is good for clarity.",
            "The phrasing is accurate and addresses the query well. Mentioning 'distinct models' helps to match the SQL keyword DISTINCT, making it precise.",
            "The variation is clear but using both 'and' and 'or' might create some confusion regarding the logical operations in the query. Clarify by restructuring."
        ],
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "original_utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?"
    },
    {
        "init": [
            "What years did cars weighing between 3000 and 4000 pounds come from?",
            "Can you list the unique years in which cars with weights between 3000 and 4000 pounds were manufactured?",
            "Find the distinct years for cars that have a weight greater than 3000 pounds but less than 4000 pounds."
        ],
        "final": [
            "What years did cars weighing between 3000 and 4000 pounds come from?",
            "Can you list the unique years in which cars weighing between 3000 and 4000 pounds were manufactured?",
            "Find the distinct years for cars with weights greater than 3000 pounds but less than 4000 pounds."
        ],
        "feedback": [
            "This variation is concise and clear. It effectively conveys the SQL query's intent regarding the years and weight range. However, it may benefit from specifying the units (pounds).",
            "The phrase 'unique years' is accurate and reflects the DISTINCT clause. However, 'manufactured' adds precision. Specifying 'pounds' might enhance clarity.",
            "The wording 'distinct years' mirrors the DISTINCT keyword well, and it accurately describes the weight criteria. However, the phrase could be more natural and precise."
        ],
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "original_utterance": "In which years cars were produced weighing no less than 3000 and no more than 4000?"
    },
    {
        "init": [
            "What car has the highest horsepower according to its acceleration?",
            "Show me the horsepower of the fastest accelerating car.",
            "Find the car with the greatest horsepower and list it by its top acceleration."
        ],
        "final": [
            "What car has the highest horsepower among the fastest accelerating ones?",
            "Show me the horsepower of the car with the top acceleration.",
            "Find the fastest accelerating car and provide its horsepower."
        ],
        "feedback": [
            "Clear intention, but it could be misleading because it does not specify 'fastest acceleration.'",
            "Concise and accurate, though it uses technical terminology such as 'fastest accelerating' which might not be necessary.",
            "This is a bit ambiguous since it introduces 'list it by its top acceleration' which isn't a requirement of the original SQL query. It could be simplified to avoid confusion."
        ],
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "original_utterance": "What is the horsepower of the car with the largest accelerate?"
    },
    {
        "init": [
            "What is the number of cylinders in the fastest accelerating Volvo?",
            "Can you find the number of cylinders for the Volvo model with the quickest acceleration?",
            "Show me the cylinder count of the Volvo with the best acceleration."
        ],
        "final": [
            "What is the number of cylinders in the Volvo car with the fastest acceleration?",
            "Can you find the number of cylinders for the Volvo vehicle with the quickest acceleration?",
            "Show me the cylinder count of the Volvo with the fastest acceleration."
        ],
        "feedback": [
            "This variation clearly captures the intent but could specify the context better by mentioning it's a car model and clarifying the aspect of acceleration.",
            "This variation is accurate and clear, but could be further emphasized by mentioning 'vehicle' instead of 'model' to make it more natural.",
            "This is concise and clear, but 'best acceleration' might be ambiguous to some users. Consider specifying it as 'fastest acceleration' instead."
        ],
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_utterance": "For model volvo, how many cylinders does the car with the least accelerate have?"
    },
    {
        "init": [
            "How many cars have better acceleration than the car with the highest horsepower?",
            "Count the number of cars that accelerate faster than the car with the highest horsepower.",
            "Can you tell me how many cars have an acceleration rate greater than the car with the top horsepower?"
        ],
        "final": [
            "How many cars have faster acceleration than the car with the highest horsepower?",
            "Count the number of cars that have faster acceleration than the car with the highest horsepower.",
            "Can you tell me how many cars have acceleration greater than the car with the top horsepower?"
        ],
        "feedback": [
            "This variation clearly conveys the intent but could be more direct by replacing 'better' with 'faster.' Also, specifying 'car with the highest horsepower' aligns well with the query.",
            "This is clear and accurate but could be more natural by replacing 'accelerate faster' with 'have faster acceleration'.",
            "This is a good variation, but 'acceleration rate' can be simplified to just 'acceleration' to make it more colloquial. Additionally, 'top horsepower' is clear and accurate."
        ],
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "original_utterance": "How many cars have a larger accelerate than the car with the largest horsepower?"
    },
    {
        "init": [
            "How many countries have more than two different car makers based there?",
            "Count the number of countries that have over two car manufacturers.",
            "Can you tell me how many countries are home to more than two car maker companies?"
        ],
        "final": [
            "How many countries have more than two different car makers based there?",
            "Count the number of countries that have over two car manufacturers.",
            "Can you tell me how many countries have more than two car maker companies?"
        ],
        "feedback": [
            "Clear and accurate. This variation captures the query's intent well. No SQL-specific jargon used.",
            "Good brevity and clarity. The natural language flow is proper, and it avoids SQL technical terms.",
            "Accurate with a slight non-technical phrasing. However, the term 'home to' could be avoided for clarity."
        ],
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "original_utterance": "How many countries has more than 2 car makers?"
    },
    {
        "init": [
            "Which car model with four cylinders has the highest horsepower?",
            "Show me the car model that has the highest horsepower among those with four cylinders.",
            "Find the car model with four cylinders that has the greatest horsepower."
        ],
        "final": [
            "Which car model with four cylinders has the highest horsepower?",
            "Show me the car model that has the highest horsepower with four cylinders.",
            "Find the car model with four cylinders that has the highest horsepower."
        ],
        "feedback": [
            "This variation is clear and concise. It perfectly captures the essence of the SQL query with straightforward language.",
            "This variation is also clear but could be shortened by removing the phrase 'among those'.",
            "The phrasing is good, but 'greatest' can be changed to 'highest' for better coherence and to match common terminology."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_utterance": "For the cars with 4 cylinders, which model has the largest horsepower?"
    },
    {
        "init": [
            "Find the make ID and name of cars with more horsepower than the minimum and with three or fewer cylinders.",
            "Show me the make ID and name for cars that have more than the least horsepower and have up to three cylinders.",
            "Retrieve the make ID and name of cars that exceed the minimum horsepower and have a maximum of three cylinders."
        ],
        "final": [
            "Find the make ID and name of cars in the dataset with more horsepower than the minimum and three or fewer cylinders.",
            "Show me the make ID and name of cars in the dataset that have more than the least horsepower and three or fewer cylinders.",
            "Retrieve the make ID and name of cars in the dataset that exceed the minimum horsepower and have a maximum of three cylinders."
        ],
        "feedback": [
            "Good overall phrasing which captures the SQL query's intent accurately. However, it would be clearer to specify that the information is for models from a dataset of cars. Incorporating context about 'present in the dataset' could improve clarity.",
            "This is clear, but it uses 'up to three cylinders,' which might be less precise than stating 'three or fewer cylinders.' Also, consider adding 'in the dataset' for context.",
            "Very concise and close to the original meaning. It could benefit from specifying that these cars are from a dataset to give users full context."
        ],
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "original_utterance": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name."
    },
    {
        "init": [
            "What is the car with the highest mpg that either has 8 cylinders or was made before 1980?",
            "Show me the car with the best fuel efficiency that has 8 cylinders or is an older model made before 1980.",
            "Find the car with the highest miles per gallon that has either 8 cylinders or was produced before the year 1980."
        ],
        "final": [
            "What is the car with the highest miles per gallon that either has 8 cylinders or was made before 1980?",
            "Show me the car with the highest miles per gallon that has 8 cylinders or was made before 1980.",
            "Find the car with the highest miles per gallon that has 8 cylinders or was produced before the year 1980."
        ],
        "feedback": [
            "The variation accurately captures the intent but could specify 'miles per gallon' instead of 'mpg' for clarity.",
            "Good phrasing but 'best fuel efficiency' can be simplified to 'highest miles per gallon' to directly match the SQL intent. Also, the term 'older model' might be a vague translation for users.",
            "The variation is clear and aligned with the SQL query, but 'either ... or ...' should be rephrased for added clarity."
        ],
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
        "original_utterance": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?"
    },
    {
        "init": [
            "Show me the distinct car models that weigh less than 3500 pounds and are not made by Ford Motor Company.",
            "List all unique car models from manufacturers other than Ford Motor Company with a weight under 3500 pounds.",
            "Which car models have a weight below 3500 pounds and are not produced by Ford Motor Company?"
        ],
        "final": [
            "Show me the unique car models that weigh less than 3500 pounds and are not made by Ford Motor Company.",
            "List all unique car models from manufacturers other than Ford Motor Company with a weight under 3500 pounds.",
            "Which car models weigh below 3500 pounds and are not produced by Ford Motor Company?"
        ],
        "feedback": [
            "This variation is clear and integrates all key elements, but the word 'distinct' might be a bit technical. Replacing it with 'unique' might improve clarity.",
            "Good phrasing. The use of 'unique' instead of 'distinct' and specifying manufacturers other than Ford enhances the clarity.",
            "Accurate and covers all key elements. The phrasing is clear and natural but could be slightly more concise."
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "original_utterance": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?"
    },
    {
        "init": [
            "List the countries that do not produce any cars.",
            "Show me the countries that have no car makers.",
            "Can you find the countries that do not have any car manufacturers?"
        ],
        "final": [
            "List the countries that do not have any national car producers.",
            "Show me the countries without any car manufacturers.",
            "Can you find the countries that do not have any car manufacturers?"
        ],
        "feedback": [
            "Clear and concise. Captures the intent effectively. Consider adding more context for clarity, like 'national car producers'.",
            "Clear but could be improved by specifying the type of countries, for example, 'countries without any car manufacturers'.",
            "This variation accurately captures the query's intent. The term 'car manufacturers' contrasts well with 'car makers' and adds variety."
        ],
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "original_utterance": "What are the name of the countries where there is not a single car maker?"
    },
    {
        "init": [
            "Find the makers who have at least two models listed and also have more than three model names.",
            "Which car makers have a minimum of two models and also have been listed with more than three different model names?",
            "Identify the manufacturers with at least two models and more than three distinct model names."
        ],
        "final": [
            "Find the car makers who have at least two car models listed and also have more than three distinct car model names.",
            "Which car makers have at least two car models and also have more than three different car model names?",
            "Identify the car makers with at least two car models and more than three distinct car model names."
        ],
        "feedback": [
            "This variation is clear and aligns well with the query. However, consider specifying 'car models' and 'car model names' for added clarity.",
            "Good detail, but again, specifying 'car models' and 'car model names' could make it more precise. Consider replacing 'a minimum of' with 'at least' for natural phrasing.",
            "Concise and clear, but changing 'manufacturers' to 'car makers' can keep the terminology consistent. Specify 'car models' and 'distinct car model names' for clarity."
        ],
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_utterance": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker."
    },
    {
        "init": [
            "What is the average age of the losers and winners in all matches?",
            "Can you tell me the average ages of the losers and winners from the matches?",
            "Find the average ages of both losers and winners from the matches."
        ],
        "final": [
            "What is the average age of the losers and winners in all recorded matches?",
            "Can you tell me the average ages of the losers and winners from all matches?",
            "Find the average ages of losers and winners from all recorded matches."
        ],
        "feedback": [
            "This variation is clear and precise, accurately capturing the intent. No significant changes needed, though it could specify 'all recorded matches' for clarity.",
            "Good phrasing, but it could be made clearer by specifying it is from 'all matches.' This would ensure there is no ambiguity regarding the data set.",
            "Concise and accurate, but 'both' could be omitted for brevity and clarity. It also should specify 'from the matches' to imply all recorded matches."
        ],
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "original_utterance": "Find the average age of losers and winners of all matches."
    },
    {
        "init": [
            "Which tournaments have hosted more than 10 matches?",
            "Find the names of tournaments with over 10 matches played.",
            "Show me the tournaments where the number of matches exceeds 10."
        ],
        "final": [
            "Which tournaments have hosted more than 10 matches?",
            "Find the names of tournaments with over 10 matches played.",
            "Show me the tournaments where the number of matches exceeds 10."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the query with no need for technical terminology. It is a good, straightforward question.",
            "Good accuracy and phrasing. It might help to make the subject 'names of tournaments' plural to match the multiple results better expected from a GROUP BY query.",
            "This is a logical and concise way of framing the query. It avoids technical jargon and makes the intent very clear."
        ],
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "original_utterance": "Find the name of tourney that has more than 10 matches."
    },
    {
        "init": [
            "Who won matches in both 2013 and 2016?",
            "Identify the match winners that are consistent across the years 2013 and 2016.",
            "Can you list the winners from 2013 who also won in 2016?"
        ],
        "final": [
            "Who won matches in both the years 2013 and 2016?",
            "Identify the winners that are the same in both 2013 and 2016 matches.",
            "Can you list the match winners from 2013 who also won in 2016?"
        ],
        "feedback": [
            "This variation is simple and clear, accurately capturing the essence of the query. Consider adding the word 'matches' for extra clarity.",
            "Good phrasing, but the use of 'consistent' might be a bit formal. Consider simplifying the language without losing meaning.",
            "This is accurate and clear. However, the term 'winners from 2013 who also won in 2016' might sound verbose; consider rephrasing for brevity."
        ],
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "original_utterance": "List the names of all winners who played in both 2013 and 2016."
    },
    {
        "init": [
            "How many matches were played in the years 2013 or 2016?",
            "Can you give me the total number of matches that took place in 2013 or 2016?",
            "Find the count of matches held in the years 2013 and 2016."
        ],
        "final": [
            "What is the total number of matches played in the years 2013 or 2016?",
            "Can you provide the total number of matches that took place in 2013 or 2016?",
            "Find the count of matches held in the years 2013 or 2016."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query. No major changes needed, but it could specify 'total number of matches'.",
            "Good phrasing, but 'give me' could be more formal. Consider 'provide' instead of 'give me'.",
            "The conjunction 'and' should be replaced with 'or' to accurately reflect the OR condition in the SQL query."
        ],
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "original_utterance": "List the number of all matches who played in years of 2013 or 2016."
    },
    {
        "init": [
            "List the players who have won both the WTA Championships and the Australian Open, including their country codes and first names.",
            "Show me the country codes and first names of the players who won the WTA Championships and the Australian Open.",
            "Can you provide the first names and country codes of the players who have won the WTA Championships as well as the Australian Open?"
        ],
        "final": [
            "List the players who have won both the WTA Championships and the Australian Open, including their country codes and first names.",
            "Show me the country codes and first names of the players who won both the WTA Championships and the Australian Open.",
            "Can you provide the first names and country codes of the players who have won the WTA Championships and the Australian Open?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the query. Consider specifying that only winners are listed to avoid any ambiguity.",
            "Good variation, but it may benefit from explicitly stating that these are winning players, to match the INTERSECT logic in the SQL query.",
            "Accurate and clear. The phrasing is natural, but 'as well as' might be simplified to 'and' for better fluency."
        ],
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "original_utterance": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?"
    },
    {
        "init": [
            "Who is the oldest player and what is their country code?",
            "Show me the player with the earliest birth date and their country code.",
            "Find the player born first and display their first name and country code."
        ],
        "final": [
            "Who is the player with the earliest birth date and what is their country code?",
            "Show me the player with the earliest birth date and their country code.",
            "Find the player with the earliest birth date and display their first name and country code."
        ],
        "feedback": [
            "This variation correctly captures the intent but 'oldest player' might be ambiguous. It could be clearer if it mentioned birth date explicitly.",
            "Accurate and clear. No significant changes needed here.",
            "Good phrasing but 'born first' might be slightly awkward. Consider rephrasing for clarity and flow."
        ],
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "original_utterance": "Find the first name and country code of the oldest player."
    },
    {
        "init": [
            "List all left-handed players and sort them by their birth dates.",
            "Can you provide the names of players who are left-handed, ordered by their birth dates?",
            "Find all players who bat left-handed and display their names in order of birth date."
        ],
        "final": [
            "List all players who bat left-handed and sort them by their birth dates.",
            "Can you provide the first and last names of players who are left-handed, ordered by their birth dates?",
            "Find all left-handed players and display their first and last names in order of birth date."
        ],
        "feedback": [
            "Clear and concise, but it might help to specify that 'L' means left-handed batting to avoid ambiguity.",
            "Good phrasing, but ensure 'players who are left-handed' clearly implies 'bat left-handed'. Mention 'first and last names' to be explicit.",
            "Accurate and to the point, but mentioning 'bat left-handed' might be unnecessary if 'left-handed players' is clear enough."
        ],
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "original_utterance": "List the first and last name of all players who are left / L hand in the order of birth date."
    },
    {
        "init": [
            "Who is the top player with the most tours?",
            "Show me the first name and country code of the player with the highest number of tours.",
            "Which player has participated in the most tours, and what is their country code and first name?"
        ],
        "final": [
            "Who is the player with the highest number of tours, including their country code and first name?",
            "Show me the country code and first name of the player who has participated in the most tours.",
            "Which player has the most tours, along with their country code and first name?"
        ],
        "feedback": [
            "This variation is clear about the intent but misses out on specifying 'country code' and 'first name' directly.",
            "This is a good phrasing but could be simplified. It clearly specifies the fields needed but could benefit from rephrasing for natural flow.",
            "This variation covers all necessary details accurately, but it is a bit lengthy. It could be more concise while retaining all required information."
        ],
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "original_utterance": "Find the first name and country code of the player who did the most number of tours."
    },
    {
        "init": [
            "Which year had the highest number of matches?",
            "Find the year with the most matches.",
            "What is the year with the greatest number of matches played?"
        ],
        "final": [
            "Which year had the highest number of matches?",
            "Find the year with the most matches played.",
            "What is the year with the most matches played?"
        ],
        "feedback": [
            "This variation is clear and aligns well with the query's intent. It avoids technical terms and is understandable to non-technical users.",
            "This variation is concise and accurate. However, it might benefit from specifying the context (e.g., sporting events or matches).",
            "This variation is precise and clear but could be slightly more concise. The term 'greatest' could be replaced with 'most' for a more natural flow."
        ],
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Find the year that has the most number of matches."
    },
    {
        "init": [
            "Who is the player with the most wins and how many rank points do they have?",
            "Identify the player with the highest number of victories and their rank points.",
            "Which player has won the most matches and what are their rank points?"
        ],
        "final": [
            "Who is the player with the most wins and how many winner rank points do they have?",
            "Identify the player with the highest number of wins and their winner rank points.",
            "Which player has won the most matches and what are their winner rank points?"
        ],
        "feedback": [
            "This variation is very clear and covers the query well. It might be enhanced by explicitly stating that 'rank points' refer to 'winner rank points'.",
            "Good phrasing. To avoid ambiguity, 'rank points' could be clarified as 'winner rank points.' The term 'victories' might be refined to 'wins' for consistency.",
            "Concise and accurate. No changes needed, but adding 'winner' before rank points would make it slightly clearer."
        ],
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Find the name and rank points of the winner who won the most times."
    },
    {
        "init": [
            "Who was the player with the highest rank points that won the Australian Open?",
            "Show me the winner of the Australian Open who had the most rank points.",
            "Which player with the highest ranking points won the Australian Open?"
        ],
        "final": [
            "Who was the highest-ranked player to win the Australian Open?",
            "Show me the winner of the Australian Open with the most rank points.",
            "Which player with the highest ranking points won the Australian Open?"
        ],
        "feedback": [
            "This variation is accurate but could be simplified by removing redundancy. The phrase 'player with the highest rank points' can be streamlined for clarity.",
            "Clear and precise. No major issues, but can improve by specifying it's the tournament winner.",
            "Good phrasing. It accurately queries the winner with the highest ranking points, retaining the intent without technical terms."
        ],
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "original_utterance": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney."
    },
    {
        "init": [
            "Who won the match that lasted the longest?",
            "Can you tell me the names of the winner and loser of the longest match?",
            "Find the winner and loser of the match with the highest duration."
        ],
        "final": [
            "Who won the match that lasted the longest in terms of minutes?",
            "Can you tell me the names of the winner and loser of the longest match based on the duration in minutes?",
            "Find the winner and loser of the match with the highest duration in minutes."
        ],
        "feedback": [
            "This variation is clear and precise but may benefit from being more explicit by mentioning 'minutes' to align completely with the SQL query's ORDER BY clause.",
            "Good phrasing as it clearly specifies the names of both the winner and the loser. However, adding 'in terms of minutes' might enhance alignment with the original query.",
            "Accurate and specific, though it could be improved by mentioning 'minutes' to reflect the SQL query precisely. The term 'highest duration' adequately translates the SQL query's intent."
        ],
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "original_utterance": "find the names of loser and winner who played in the match with greatest number of minutes."
    },
    {
        "init": [
            "What is the average ranking of each player grouped by their first name?",
            "Can you find the average ranking for players based on their first names?",
            "Show the average rankings of players, grouped by their first names."
        ],
        "final": [
            "What is the average ranking of players when grouped by their first names?",
            "Can you find the average ranking for players when considered by their first names?",
            "Show the average rankings of players, ensuring they are grouped by their first names."
        ],
        "feedback": [
            "Clear and concise. However, it would be better to specify we need to group by first names to match the SQL query.",
            "Well-phrased, but it implicitly assumes that the user's intention is known. Clarifying that the average ranking needs to be based on groups of first names will make it more accurate.",
            "Accurate and concise, but slightly ambiguous as it does not indicate the precise grouping by first name. This could be misinterpreted as grouping by other attributes unintentionally."
        ],
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_utterance": "Find the average ranking for each player and their first name."
    },
    {
        "init": [
            "What is the total ranking points for each player?",
            "Can you tell me the sum of ranking points grouped by each player's first name?",
            "Show me the total ranking points accumulated by players, grouped by their first names."
        ],
        "final": [
            "What is the total ranking points for each player, grouped by their first name?",
            "Can you tell me the sum of ranking points grouped by each player's first name?",
            "Show me the total ranking points accumulated by players, organized by their first names."
        ],
        "feedback": [
            "The variation is accurate but could mention that the grouping is by player\u2019s first name for more clarity.",
            "This variation is clear and precisely captures the query's intent. No changes needed.",
            "The variation is good, but it may benefit from a slight rephrasing to maintain brevity and clarity."
        ],
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_utterance": "Find the total ranking points for each player and their first name."
    },
    {
        "init": [
            "Which country has the most players?",
            "Show me the country code with the highest number of players.",
            "Find the country with the greatest number of players."
        ],
        "final": [
            "Which country has the most players?",
            "Show me the country with the most players.",
            "Find the country with the most players."
        ],
        "feedback": [
            "This variation is clear and succinct. No changes needed.",
            "This wording directly references 'country code,' which could be aligned more naturally with everyday language. Also, 'highest number' is accurate but can be made more conversational.",
            "Clear and direct but can be made slightly more concise by removing 'greatest number' to 'most players'."
        ],
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "find the code of the country where has the greatest number of players."
    },
    {
        "init": [
            "List the country codes of countries with more than 50 players.",
            "Which countries have more than 50 players represented in the database?",
            "Show the country codes where there are more than 50 players."
        ],
        "final": [
            "Can you list the country codes of countries with more than 50 players?",
            "Which countries have more than 50 players?",
            "Can you show the country codes where there are more than 50 players?"
        ],
        "feedback": [
            "This variation is clear and direct but could be slightly more conversational.",
            "Good phrasing, but it can avoid SQL-specific terminology like 'represented in the database.' The context suggests it is about the player counts.",
            "Accurate and concise. However, it uses 'show' which is more command-like and less conversational."
        ],
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "original_utterance": "Find the codes of countries that have more than 50 players."
    },
    {
        "init": [
            "Show me the names and ranks of the top three youngest match winners distinctively.",
            "Can you provide the names and ranks of the youngest three winners from the matches?",
            "List the names and ranks of the youngest three distinct winners from the matches."
        ],
        "final": [
            "Show me the names and ranks of the top three youngest distinct match winners.",
            "Can you provide the names and ranks of the youngest three distinct winners from the matches?",
            "List the names and ranks of the youngest three winners distinctly from the matches."
        ],
        "feedback": [
            "This variation captures the query's intent well but the word 'distinctively' is awkward and unusual. Replace with 'distinct' for better readability.",
            "Accurate and clear, but could use the word 'distinct' to fully align with the SQL query's requirement.",
            "This variation accurately conveys the SQL query, but the word 'distinct' could be placed more naturally by rephrasing the sentence."
        ],
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "original_utterance": "Find the name and rank of the 3 youngest winners across all matches."
    },
    {
        "init": [
            "How many distinct left-handed winners have there been at the WTA Championships?",
            "Can you tell me the number of unique left-handed winners in the WTA Championships?",
            "Find the total count of different left-handed players who have won at the WTA Championships."
        ],
        "final": [
            "How many distinct left-handed players have won at the WTA Championships?",
            "Can you tell me the number of unique left-handed players who have won the WTA Championships?",
            "Find the number of different left-handed players who have won at the WTA Championships."
        ],
        "feedback": [
            "Clear and concise, but it could improve by specifying 'players' explicitly to avoid ambiguity regarding what kind of 'winners' are meant.",
            "Good phrasing. It correctly captures the intent, but explicitly stating 'players' for 'winners' would increase clarity.",
            "Accurate and thorough. No changes needed, but the phrase 'total count' could be worded more naturally as 'how many' for brevity and flow."
        ],
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "original_utterance": "How many different winners both participated in the WTA Championships and were left handed?"
    },
    {
        "init": [
            "How many conductors are there?",
            "Can you give me the total number of conductors?",
            "What is the total count of conductors?"
        ],
        "final": [
            "How many registered conductors are there?",
            "Can you give me the total number of registered conductors?",
            "What is the total count of conductors listed in the system?"
        ],
        "feedback": [
            "Clear and concise, but it could specify the context or type of conductors if applicable. For example, 'in a specific dataset' or 'registered'.",
            "Good phrasing. Adding the word 'registered' might help specify that it's referring to those in a database.",
            "Accurate but might benefit from specifying if you\u2019re counting 'in the system' or 'listed,' to avoid ambiguity."
        ],
        "query": "SELECT count(*) FROM conductor",
        "original_utterance": "How many conductors are there?"
    },
    {
        "init": [
            "What are the names of the conductors sorted by their ages in ascending order?",
            "Can you show me the list of conductor names arranged by age from youngest to oldest?",
            "List the conductors' names in order of increasing age."
        ],
        "final": [
            "What are the names of the conductors sorted by their ages from youngest to oldest?",
            "Can you show me the list of conductor names arranged by age from youngest to oldest?",
            "List the conductors' names in order of increasing age."
        ],
        "feedback": [
            "This variation directly captures the query's essence, but it could avoid technical words like 'ascending order' and use 'sorted by age from youngest to oldest' instead.",
            "Clear and precise. It avoids SQL-specific terminology while maintaining the intent of sorting by age.",
            "Straightforward and concise, with good use of non-technical language. No changes needed."
        ],
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "original_utterance": "List the names of conductors in ascending order of age."
    },
    {
        "init": [
            "Show me the names of conductors who are not from the USA.",
            "Can you list all the conductors with a nationality other than American?",
            "Find the names of conductors whose nationality is not the USA."
        ],
        "final": [
            "Show me the names of conductors who are not American.",
            "Can you list all the conductors with a nationality other than American?",
            "Find the names of conductors who are not American."
        ],
        "feedback": [
            "This variation is clear and straightforward, but it uses 'USA,' which is precise. It could mention 'American' for more natural phrasing.",
            "Very clear and natural phrasing. No major changes needed. It uses 'American' instead of 'USA,' which is preferable.",
            "Also clear, but 'not the USA' can be refined to sound more natural. Consider using 'not American' instead."
        ],
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "original_utterance": "What are the names of conductors whose nationalities are not \"USA\"?"
    },
    {
        "init": [
            "List the record companies from the orchestra table sorted by the year they were founded, most recent first.",
            "Can you show me the record companies in the orchestra, ordered by the year they were founded in descending order?",
            "Find all record companies from the orchestra, ordered by the year they were established from the latest to the earliest."
        ],
        "final": [
            "List record companies sorted by the year they were founded, most recent first.",
            "Show me the record companies, ordered by the year they were founded from newest to oldest.",
            "Find all record companies ordered by the year they were established, from the latest to the earliest."
        ],
        "feedback": [
            "This variation is clear and accurate but could be made more natural by removing 'from the orchestra table' and simplifying the phrasing.",
            "While clear, using 'in descending order' is a bit technical. Also, directly mentioning 'orchestra' could be simplified to make the sentence more fluent.",
            "This variation is accurate and the phrasing is natural. It effectively avoids technical jargon while describing the query logically."
        ],
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "original_utterance": "What are the record companies of orchestras in descending order of years in which they were founded?"
    },
    {
        "init": [
            "What is the average attendance for the shows?",
            "Can you provide the average number of attendees for all the shows?",
            "Please calculate the average attendance across all shows."
        ],
        "final": [
            "What is the average attendance for all the shows?",
            "Can you provide the average number of attendees for all the shows?",
            "Please calculate the average attendance across all shows."
        ],
        "feedback": [
            "This variation is clear, but it could be slightly confusing because it uses the plural 'shows.' It's better to specify that it refers to all shows.",
            "This variation is precise and avoids any SQL-specific terminology, making it clear and suitable for natural language queries.",
            "This variation is clear and concise. It directly translates the SQL query into natural language without losing any meaning."
        ],
        "query": "SELECT avg(Attendance) FROM SHOW",
        "original_utterance": "What is the average attendance of shows?"
    },
    {
        "init": [
            "What are the maximum and minimum shares for performances that are not of the 'Live final' type?",
            "Can you provide the highest and lowest share values for performances excluding those categorized as 'Live final'?",
            "Find the maximum and minimum share values in the performance data, excluding 'Live final' type performances."
        ],
        "final": [
            "What are the highest and lowest shares for performances not labeled as 'Live final'?",
            "Can you provide the highest and lowest share values for performances excluding those marked as 'Live final'?",
            "Find the maximum and minimum share values for performances, excluding the 'Live final' ones."
        ],
        "feedback": [
            "This variation is clear but could be phrased a bit more naturally. Instead of saying 'that are not of the 'Live final' type,' try a simpler alternative.",
            "Good phrasing and clarity. However, the word 'categorized' is slightly technical. Consider a more conversational phrase.",
            "Accurate and concise, but the phrasing can be improved by removing 'in the performance data' to make it sound more natural."
        ],
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "original_utterance": "What are the maximum and minimum share of performances whose type is not \"Live final\"."
    },
    {
        "init": [
            "How many unique nationalities are there among the conductors?",
            "What is the total number of distinct nationalities of the conductors?",
            "Can you count the different nationalities present among the conductors?"
        ],
        "final": [
            "How many unique nationalities are there among the conductors?",
            "What is the number of unique nationalities of the conductors?",
            "Can you count the different nationalities among the conductors?"
        ],
        "feedback": [
            "This variation is clear and directly conveys the intent of counting unique nationalities. The phrasing is natural and there are no SQL-specific terms.",
            "Good phrasing, but 'total number of distinct' could be simplified to make it more natural. Consider using 'unique' instead of 'distinct' to avoid SQL terminology.",
            "Accurate and natural phrasing. The word 'present' could be replaced with 'among' for better flow, and ensures no SQL-specific language is used."
        ],
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "original_utterance": "How many different nationalities do conductors have?"
    },
    {
        "init": [
            "Can you list the conductors sorted by their years of work in descending order?",
            "Show me the names of conductors from the ones with the most recent year of work to the least recent.",
            "Which conductors have worked most recently, and can you list their names?"
        ],
        "final": [
            "Can you list the names of conductors sorted by their years of work in descending order?",
            "Show me the names of conductors from the most recent year of work to the least recent.",
            "Which conductors have worked most recently, and can you list their names?"
        ],
        "feedback": [
            "This variation is clear and maintains the intent well. It could be made more specific by mentioning 'names' of the conductors.",
            "The phrasing is accurate but a bit lengthy. It could be more concise while still maintaining clarity.",
            "This is a clear and accurate question. However, the phrase 'worked most recently' adds clarity for non-technical users without losing any of the query\u2019s meaning."
        ],
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "original_utterance": "List names of conductors in descending order of years of work."
    },
    {
        "init": [
            "Who is the most recent conductor with the highest years of work?",
            "Find the conductor with the most years of service.",
            "Show me the conductor who has worked here the longest."
        ],
        "final": [
            "Who is the conductor with the most recent start date of work?",
            "Find the conductor who started working here most recently.",
            "Show me the conductor who has the most recent start year of work."
        ],
        "feedback": [
            "This variation is somewhat confusing. The phrase 'most recent conductor' and 'highest years of work' could be misinterpreted. Additionally, 'Year_of_Work' implies the number of years worked rather than the date when they started working.",
            "This variation is easier to understand but deviates slightly from the intent of sorting by the 'Year_of_Work' field. There's also a possible ambiguity with 'most years of service.'",
            "Clear and straightforward but uses 'longest' which might imply overall duration instead of ordering by 'Year_of_Work' in descending order."
        ],
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "original_utterance": "List the name of the conductor with the most years of work."
    },
    {
        "init": [
            "List the names of conductors and their respective orchestras.",
            "Can you provide a list of conductors along with the orchestras they lead?",
            "Show me the conductors' names along with their associated orchestras."
        ],
        "final": [
            "List the names of conductors and their respective orchestras.",
            "Can you provide a list of conductors along with the orchestras they are part of?",
            "Show me the conductors' names along with the orchestras they work with."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the query. It effectively removes any SQL-specific jargon while maintaining clarity.",
            "The phrasing here is a bit more formal, but it could be simplified for better readability. The expression 'they lead' may inaccurately imply conductors only lead orchestras, which isn't always true.",
            "This variation is clear and concise. However, the phrase 'associated with' can be a bit formal and might be replaced with a simpler term."
        ],
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "original_utterance": "Show the names of conductors and the orchestras they have conducted."
    },
    {
        "init": [
            "Show the names of conductors who are associated with more than one orchestra.",
            "Which conductors have associations with multiple orchestras?",
            "List the names of conductors who work with more than one orchestra."
        ],
        "final": [
            "Show the names of conductors associated with more than one orchestra.",
            "Which conductors have associations with multiple orchestras?",
            "List the names of conductors with more than one orchestra."
        ],
        "feedback": [
            "This variation is quite clear and accurately represents the query's intent. It could be improved by specifying that it is asking for names.",
            "This variation is concise and to the point. It's also clear and accurately conveys the original SQL query's intent. No changes are necessary.",
            "This variation is clear and accurate. No changes needed, but it is a bit longer than it needs to be. The phrase 'who work with' could be simplified to 'with'."
        ],
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "original_utterance": "Show the names of conductors that have conducted more than one orchestras."
    },
    {
        "init": [
            "Who is the conductor associated with the most orchestras?",
            "Can you tell me the name of the conductor who conducts the highest number of orchestras?",
            "Find the conductor with the greatest number of orchestra associations."
        ],
        "final": [
            "Who is the conductor currently associated with the most orchestras?",
            "Can you tell me the name of the conductor who currently conducts the most orchestras?",
            "Find the conductor with the greatest number of current orchestra connections."
        ],
        "feedback": [
            "This variation is clear, but it can be improved by specifying that it is about current associations. The phrase 'associated with' might be more precise.",
            "Good phrasing, but it could be made clearer by specifying 'currently.' Avoid complex phrases like 'highest number of orchestras.'",
            "Accurate but could be simplified. The term 'associations' could be changed to 'connections' to make it clearer to a general audience."
        ],
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "original_utterance": "Show the name of the conductor that has conducted the most number of orchestras."
    },
    {
        "init": [
            "List the names of conductors associated with orchestras founded after 2008.",
            "Show the names of all conductors whose orchestras were established after 2008.",
            "Which conductors are linked to orchestras that were founded post-2008?"
        ],
        "final": [
            "List the names of conductors associated with orchestras founded after 2008.",
            "Show the names of all conductors tied to orchestras established after 2008.",
            "Which conductors are associated with orchestras that were founded post-2008?"
        ],
        "feedback": [
            "Clear and straightforward. No changes needed.",
            "Good phrasing, but it could be more specific in mentioning both conductors and orchestras explicitly.",
            "Accurate and concise, but 'linked' is less specific than 'associated with'. Consider being more explicit about the relationship."
        ],
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "original_utterance": "Please show the name of the conductor that has conducted orchestras founded after 2008."
    },
    {
        "init": [
            "How many orchestras are associated with each record company?",
            "Show the number of orchestras for every record company.",
            "Can you list the record companies with the count of orchestras they have?"
        ],
        "final": [
            "How many orchestras are listed under each record company in the database?",
            "How many orchestras does each record company have?",
            "Can you list the record companies with the number of orchestras they are associated with?"
        ],
        "feedback": [
            "Clear and accurate, but the term 'orchestras' might be ambiguous depending on the context. Consider specifying that it's a count from the table.",
            "This variation is straightforward but could be more natural by rephrasing 'show the number of orchestras' to 'how many orchestras.'",
            "Concise and clear, but the term 'they have' can be replaced with 'they are associated with' for better clarity."
        ],
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "original_utterance": "Please show the different record companies and the corresponding number of orchestras."
    },
    {
        "init": [
            "List the unique major record formats in the orchestra table sorted by their count in ascending order.",
            "What are the different major record formats and their counts in the orchestra table, sorted from least to most frequent?",
            "Show the major record formats from the orchestra database, ordered by how often they appear, starting with the least frequent."
        ],
        "final": [
            "List the unique major record formats in the orchestra table sorted by their frequency in ascending order.",
            "What are the different major record formats in the orchestra table, ordered from least to most frequent?",
            "Show the major record formats in the orchestra table, ordered by how often they appear, starting with the least frequent."
        ],
        "feedback": [
            "This variation is clear, but it mentions 'their count,' which could be misleading as the query doesn't select the count explicitly.",
            "This phrasing is good for understanding but includes 'their counts,' which is not actually queried in the SQL. Consider focusing on the uniqueness and ordering without misleading detail.",
            "Accurate and clear, though it mentions 'from the orchestra database,' which can be shortened to 'in the orchestra table' for clarity. Similar to the other variations, it implies a count that isn't explicitly part of the SQL output."
        ],
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "original_utterance": "Please show the record formats of orchestras in ascending order of count."
    },
    {
        "init": [
            "Which record company represents the most orchestras?",
            "Can you identify the record company with the highest number of orchestras?",
            "Show me the record company that has the largest number of orchestras under its label."
        ],
        "final": [
            "Which record company represents the most orchestras?",
            "Can you identify the record company with the most orchestras?",
            "Show me the record company that has the largest number of orchestras represented."
        ],
        "feedback": [
            "This variation is clear and directly addresses the search intent. No changes needed.",
            "The phrasing is accurate but could be more concise. Mentioning 'number' twice feels repetitive. Consider rephrasing for brevity.",
            "It could be simplified slightly to improve clarity. The phrase 'under its label' can be simplified to 'represented'."
        ],
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "original_utterance": "List the record company shared by the most number of orchestras."
    },
    {
        "init": [
            "Which orchestras have not performed according to the performance records?",
            "Can you list the orchestras that haven't had any performances?",
            "Find all the orchestras that are not included in the performance records."
        ],
        "final": [
            "Which orchestras are missing from the performance records?",
            "Can you list the orchestras that haven't been recorded in any performances?",
            "Find all the orchestras that haven't been listed in the performance records."
        ],
        "feedback": [
            "This variation is accurate but could be slightly rephrased for better clarity. The term 'performed' might be vague.",
            "Very clear and concise, but consider rephrasing 'any performances' to be more specific as to recorded performances.",
            "This is also accurate, but could be simplified and made more natural. The phrase 'not included' might be clearer as 'missing from'."
        ],
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "original_utterance": "List the names of orchestras that have no performance."
    },
    {
        "init": [
            "List the record companies from orchestras founded both before and after 2003.",
            "Which record companies have orchestras founded in years both prior to and after 2003?",
            "Show the record companies representing orchestras founded in years earlier than 2003 and also those founded after 2003."
        ],
        "final": [
            "List the same record companies from orchestras founded both before and after 2003.",
            "Which are the same record companies for orchestras founded in years both prior to and after 2003?",
            "Show the record companies that represent orchestras founded in both periods: before and after 2003."
        ],
        "feedback": [
            "This variation is clear and concise but could benefit from specifying 'the same record companies' for clarity.",
            "Good structure, but could be clearer by including 'the same record companies' to emphasize the intersecting condition.",
            "Explains the idea well, although it\u2019s slightly verbose. It should emphasize that the record companies represent orchestras founded in both periods."
        ],
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "original_utterance": "Show the record companies shared by orchestras founded before 2003 and after 2003."
    },
    {
        "init": [
            "How many records in the orchestra are in CD or DVD format?",
            "Get the total count of orchestra records that are either in CD or DVD format.",
            "What is the number of orchestra entries available in CD or DVD formats?"
        ],
        "final": [
            "How many records in the orchestra are available in CD or DVD format?",
            "What's the total count of orchestra records that are either in CD or DVD format?",
            "What is the number of orchestra records available in CD or DVD formats?"
        ],
        "feedback": [
            "Clear and concise, but the term 'records' might be ambiguous if it isn't contextually clear that it refers to CDs or DVDs.",
            "This is precise but could be more conversational by changing 'Get the total count' to 'What's the total count'.",
            "Accurate phrasing, but using 'entries' might not be immediately clear to all users. Change to 'records' for consistency if contextually appropriate."
        ],
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "original_utterance": "Find the number of orchestras whose record format is \"CD\" or \"DVD\"."
    },
    {
        "init": [
            "Can you list all document IDs, names, and descriptions?",
            "Provide me with the document IDs, names, and descriptions from the Documents table.",
            "Show me the IDs, names, and descriptions of all documents."
        ],
        "final": [
            "Can you list all document IDs, names, and descriptions for all documents?",
            "Provide me with the document IDs, names, and descriptions.",
            "Show me the IDs, names, and descriptions of all documents."
        ],
        "feedback": [
            "This variation is clear and concise. However, it could specify that it is for all documents without implying a specific table, making it more user-friendly.",
            "This phrasing is accurate but includes 'from the Documents table,' which introduces unnecessary technical jargon. Avoid referring to 'table' explicitly for a better natural language flow.",
            "Good and concise. It captures all elements and is understandable. It avoids technical jargon effectively."
        ],
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "original_utterance": "List document IDs, document names, and document descriptions for all documents."
    },
    {
        "init": [
            "Show me documents where the description contains the letter 'w'.",
            "Which documents have a description that includes the letter 'w'?",
            "Can you find the documents with descriptions containing the letter 'w'?"
        ],
        "final": [
            "Show me the document name and template ID for documents where the description contains the letter 'w'.",
            "Which documents have a description that includes the letter 'w'? Please list their names and template IDs.",
            "Can you find the documents with descriptions containing the letter 'w' and provide their names and template IDs?"
        ],
        "feedback": [
            "Clear and accurate. Consider specifying that it should list the document name and template ID for complete clarity.",
            "Good phrasing, but it could explicitly mention listing the document name and template ID.",
            "Well-phrased but should clarify that the document name and template ID should be included in the results."
        ],
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "original_utterance": "What is the document name and template id for document with description with the letter 'w' in it?"
    },
    {
        "init": [
            "Retrieve the document ID, template ID, and description for the document named 'Robbin CV'.",
            "What are the document ID, template ID, and description details for the document called 'Robbin CV'?",
            "Can you provide the document ID, template ID, and description for 'Robbin CV'?"
        ],
        "final": [
            "Get the document ID, template ID, and description for the document named 'Robbin CV'.",
            "What are the document ID, template ID, and description for the document called 'Robbin CV'?",
            "Can you provide the document ID, template ID, and description for the document 'Robbin CV'?"
        ],
        "feedback": [
            "This variation is good but consider rephrasing 'Retrieve' with something more natural, like 'Get' or 'Give me'.",
            "Clear and comprehensive, but 'details' can be removed for brevity as it's redundant with 'document ID, template ID, and description'.",
            "This variation is accurate and concise. Adding the word 'the' before 'document ID' can improve its natural flow."
        ],
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "original_utterance": "What is the document id, template id and description for document named \"Robbin CV\"?"
    },
    {
        "init": [
            "How many unique template IDs are there in the Documents table?",
            "Can you tell me the number of different template IDs present in the Documents?",
            "What is the count of distinct template IDs in the Documents database?"
        ],
        "final": [
            "How many unique template IDs are there in the documents?",
            "Can you tell me the number of different template IDs present among the documents?",
            "What is the count of distinct template IDs in the collection of documents?"
        ],
        "feedback": [
            "Clear and accurate, but referencing 'table' could be confusing for non-technical users. Consider rephrasing to make it more approachable.",
            "Good clarity and contextual understanding. It's more user-friendly without technical database jargon, but 'Documents' should be more naturally phrased.",
            "Accurate but 'Documents database' is too technical and might overpower non-technical users. It is better to replace with a more general term."
        ],
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "original_utterance": "How many different templates do all document use?"
    },
    {
        "init": [
            "How many documents are using a template with the type code 'PPT'?",
            "Get the total number of documents based on templates that have the type code 'PPT'.",
            "Count all documents that are associated with PPT template types."
        ],
        "final": [
            "How many documents are using a template with the type code 'PPT'?",
            "Get the total number of documents that use templates with the type code 'PPT'.",
            "Count all documents that are associated with templates having the type code 'PPT'."
        ],
        "feedback": [
            "This variation is clear and directly translates the SQL query while avoiding technical jargon. No issues found.",
            "Good phrasing but the term 'based on' could be improved for clarity. Try replacing with 'that use'.",
            "Accurate and concise, but the use of 'PPT template types' may sound a bit confusing. Consider specifying 'templates with type code PPT'."
        ],
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "original_utterance": "How many documents are using the template with type code 'PPT'?"
    },
    {
        "init": [
            "How many documents are there for each template ID?",
            "Show me the count of documents grouped by template ID.",
            "Can you provide the number of documents sorted by each template ID?"
        ],
        "final": [
            "How many documents exist for each template ID?",
            "Show me the number of documents for each template ID.",
            "Can you provide the count of documents categorized by template ID?"
        ],
        "feedback": [
            "Clear and straightforward. The term 'are there' could be replaced for conciseness.",
            "Accurate but slightly formal. 'Grouped by' is a direct SQL reference which could be simplified.",
            "Good phrase but 'sorted by' might imply ordering which is not in the original SQL query. 'Categorized by' might be better."
        ],
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "original_utterance": "Show all template ids and number of documents using each template."
    },
    {
        "init": [
            "What is the template ID and type code of the most frequently used template in the Documents table?",
            "Show me the template ID and type code for the template that appears most often in the Documents table.",
            "Which template, based on its ID and type code, is the most common in the Documents records?"
        ],
        "final": [
            "What is the template ID and type code of the most frequently used template according to the Documents and Templates tables?",
            "Show me the template ID and type code for the template that appears most often in the Documents table in conjunction with the Templates table.",
            "Which template, based on its ID and type code, is the most common in the Documents and Templates records?"
        ],
        "feedback": [
            "Clear and concise, though 'most frequently used' can be more specific by mentioning the context of 'Documents' and 'Templates'.",
            "Good phrasing, but specifying 'in conjunction with Templates' would eliminate any ambiguity related to the join operation.",
            "Accurate and keeps the user-focused approach by asking a question. It avoids SQL jargon, making it accessible."
        ],
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the id and type code for the template used by the most documents?"
    },
    {
        "init": [
            "Which template IDs are used in more than one document?",
            "Identify the template IDs that appear in multiple documents.",
            "Find all the template IDs that have been assigned to more than one document."
        ],
        "final": [
            "Which template IDs are used in more than one document?",
            "Identify the template IDs that are used in multiple documents.",
            "Find all the template IDs assigned to more than one document."
        ],
        "feedback": [
            "This variation is clear and accurately represents the query's intent. No changes needed.",
            "Good phrasing, but 'appear in' could be more explicitly stated as 'used in' to avoid any ambiguity.",
            "Clear and concise. No usage of technical jargon, but could be shortened for brevity."
        ],
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "original_utterance": "Show ids for all templates that are used by more than one document."
    },
    {
        "init": [
            "Show me the template IDs that are not used in any documents.",
            "Which templates are not referenced by any document?",
            "Find the template IDs that do not appear in the documents."
        ],
        "final": [
            "Show me the template IDs that are not used in any of the documents.",
            "Which templates are not found in any of the documents?",
            "Find the template IDs that do not appear in any documents."
        ],
        "feedback": [
            "Clear and accurate, but it could be more explicitly stated that these are IDs not used in any documents.",
            "Well-phrased, but it might be more inclusive to avoid technical terms like 'referenced.'",
            "Concise and clear, though including context about the relation to documents would make it clearer for non-technical users."
        ],
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "original_utterance": "Show ids for all templates not used by any document."
    },
    {
        "init": [
            "How many templates are there in the database?",
            "Can you tell me the total number of templates?",
            "What is the count of templates available?"
        ],
        "final": [
            "How many templates are there in the database?",
            "Tell me the total number of templates.",
            "What is the count of templates?"
        ],
        "feedback": [
            "This variation is clear and accurate. It uses simple language to inquire about the count of templates.",
            "Good phrasing, but could be shortened slightly by dropping 'can you'.",
            "Accurate, but the word 'available' might be unnecessary and could be dropped for simplicity."
        ],
        "query": "SELECT count(*) FROM Templates",
        "original_utterance": "How many templates do we have?"
    },
    {
        "init": [
            "Show me the template ID, version number, and template type code from the Templates table.",
            "Can you list the template id, version number, and type code for all templates?",
            "Retrieve the ID, version, and type code for each template in the Templates database."
        ],
        "final": [
            "Show me the template ID, version number, and template type for all templates.",
            "Can you list the template id, version number, and template type for all templates?",
            "Retrieve the ID, version, and type for each template in the system."
        ],
        "feedback": [
            "This variation uses technical jargon like 'table,' which could be omitted to make it more natural. Also, clarify 'Templates table' to 'all templates'.",
            "The phrasing is good but can be improved by avoiding database terminology like 'type code,' making it 'template type' for better understanding.",
            "Accurate, but incorporating the term 'all' before 'templates' makes it clearer. Removing 'database' would make it cleaner."
        ],
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "original_utterance": "Show template ids, version numbers, and template type codes for all templates."
    },
    {
        "init": [
            "What are the unique template type codes in the Templates table?",
            "Show me all the different template type codes in the Templates dataset.",
            "Can you list all distinct template type codes from the Templates data?"
        ],
        "final": [
            "What are the unique template type codes among the records?",
            "Show me all the different template type codes available.",
            "Can you list all distinct template type codes from the available data?"
        ],
        "feedback": [
            "The phrase 'template type codes' is clear, but mentioning 'in the Templates table' might feel overly technical. Consider a more user-friendly term.",
            "Good phrasing, but 'dataset' still sounds somewhat technical. Using simpler terms like 'list' or 'data' could improve clarity.",
            "The phrase 'Templates data' is more accessible than 'Templates table'. It's clear and direct. No major issues."
        ],
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "original_utterance": "Show all distinct template type codes for all templates."
    },
    {
        "init": [
            "Can you list the template IDs for templates that have a type code of either 'PP' or 'PPT'?",
            "What are the IDs of templates whose type codes are 'PP' or 'PPT'?",
            "Find template IDs where the template type code is 'PP' or 'PPT'."
        ],
        "final": [
            "Can you show the IDs for templates with a type code of 'PP' or 'PPT'?",
            "What are the IDs for templates that have the type codes 'PP' or 'PPT'?",
            "Find the template IDs where the type code is either 'PP' or 'PPT'."
        ],
        "feedback": [
            "This variation is clear and well-phrased but could be made more conversational by removing 'list the template IDs'.",
            "Good phrasing and clear intent. Consider rephrasing slightly to enhance fluency.",
            "This is concise but could be improved by specifying the retrieval action more naturally, avoiding the direct SQL reference to the table structure."
        ],
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "original_utterance": "What are the ids of templates with template type code PP or PPT?"
    },
    {
        "init": [
            "How many CV templates are there in the database?",
            "Can you count the number of CV templates available?",
            "What is the total number of CV templates?"
        ],
        "final": [
            "How many CV templates are there in the database?",
            "Can you find the number of CV templates available?",
            "What is the total number of CV templates?"
        ],
        "feedback": [
            "This variation is clear and directly asks for the quantity of CV templates. No improvements needed.",
            "Phrasing 'available' is good for clarity, but 'count the number' could be replaced with 'find the number' for a more natural flow.",
            "This is concise and correctly asks for the total number of CV templates. No changes necessary."
        ],
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "original_utterance": "How many templates have template type code CV?"
    },
    {
        "init": [
            "Show me all template type codes where the version number is greater than 5.",
            "Can you list the template type codes and their version numbers that are above 5?",
            "Find all templates with version numbers higher than 5 and display their type codes."
        ],
        "final": [
            "Show me all template type codes and version numbers greater than 5.",
            "Can you list the templates with version numbers above 5 along with their type codes?",
            "Find all templates with version numbers higher than 5 and display their type codes."
        ],
        "feedback": [
            "This variation is clear, but it should also mention that version numbers should be included in the results.",
            "Good phrasing, but try to avoid making it two separate requests ('list the template type codes' and 'version numbers that are above 5'). Instead, make it clear they\u2019re part of the same query.",
            "This variation is precise and clear. No changes needed."
        ],
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "original_utterance": "What is the version number and template type code for the template with version number later than 5?"
    },
    {
        "init": [
            "How many templates are there for each template type code?",
            "Show the count of templates grouped by their type codes.",
            "Can you list the number of templates for each type code?"
        ],
        "final": [
            "How many templates are there for each template type code?",
            "Show the count of templates for each template type code.",
            "Can you list the number of templates for each template type code?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query's intent. It uses natural language without any technical jargon.",
            "Good phrasing and details. However, the term 'grouped by' might be slightly technical for non-SQL users. Consider rephrasing it more naturally.",
            "This variation is precise and clear. It could be slightly improved by specifying 'for each template type code' for better clarity."
        ],
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "original_utterance": "Show all template type codes and number of templates for each."
    },
    {
        "init": [
            "What is the most frequently occurring template type code in the Templates table?",
            "Find the template type code that appears the most often in the Templates dataset.",
            "Which template type code has the highest count in the Templates table?"
        ],
        "final": [
            "What is the most frequently occurring template type code?",
            "Find the template type code that appears the most often in the Templates table.",
            "Which template type code has the highest count in the Templates table?"
        ],
        "feedback": [
            "This variation is clear and accurate. However, the phrase 'in the Templates table' could be simplified for better readability.",
            "The term 'dataset' might be confusing for some users. 'Table' is more commonly used. The rest of the phrasing is good.",
            "Accurate and concise. No changes needed, but consider replacing 'Templates table' with a simpler alternative."
        ],
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which template type code has most number of templates?"
    },
    {
        "init": [
            "Which template type codes appear less than three times in the Templates table?",
            "Can you list the template type codes that have fewer than three entries in the Templates group?",
            "Find template type codes that occur less than three times in the Templates database."
        ],
        "final": [
            "Which template type codes appear less than three times?",
            "Can you list the template type codes that have fewer than three entries?",
            "Find template type codes that occur fewer than three times."
        ],
        "feedback": [
            "Clear and concise, but the phrase could be made more user-friendly by avoiding the term 'table.'",
            "This is accurate but could be simplified further for clarity. The phrase 'in the Templates group' might confuse non-technical users.",
            "Good phrasing, but 'database' could be misleading as it might imply a larger scope than just the specific table. Better to stick with simpler terms."
        ],
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "original_utterance": "Show all template type codes with less than three templates."
    },
    {
        "init": [
            "What is the minimum version number available for each template type?",
            "Show me the lowest version number and the template type code from the templates.",
            "Find the smallest version number and the corresponding template type code in the templates database."
        ],
        "final": [
            "What is the minimum version number available for each template type?",
            "Show me the lowest version number and the associated template type from the templates.",
            "Find the smallest version number and its corresponding template type in the templates."
        ],
        "feedback": [
            "This variation is clear and accurate. No changes are needed.",
            "This is accurate but could benefit from removing the reference to 'template type code' to make it more conversational and accessible.",
            "This is clear but overly technical with the mention of 'templates database.' Simplifying this can make it more user-friendly."
        ],
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "original_utterance": "What the smallest version number and its template type code?"
    },
    {
        "init": [
            "Show the template type code for templates associated with the document named 'Data base'.",
            "What is the template type code for the document titled 'Data base'?",
            "Find the code for the template type linked to the document called 'Data base'."
        ],
        "final": [
            "Show the template type code linked to the 'Data base' document.",
            "What is the template type code for the document titled 'Data base'?",
            "Find the template type code for the document called 'Data base'."
        ],
        "feedback": [
            "This variation is clear but a bit wordy. It could be more concise while still conveying the same meaning.",
            "This is straightforward and clear. It accurately translates the SQL query into a natural question. No changes needed.",
            "This is also clear and similar to Variation 1 but is phrased slightly differently. Consider refining it to avoid repeated near-identical phrases ('code for the template type')."
        ],
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "original_utterance": "What is the template type code of the template used by document with the name \"Data base\"?"
    },
    {
        "init": [
            "What are the names of documents associated with templates of type BK?",
            "Show me the document names for templates with the type code BK.",
            "List all document names linked to templates that have the type code BK."
        ],
        "final": [
            "What are the names of documents for templates of type BK?",
            "Show me the document names for templates with type BK.",
            "List all document names for templates of type BK."
        ],
        "feedback": [
            "This variation is clear and aligns well with the SQL query. No major changes needed but 'associated with' can be simplified to 'for' for brevity.",
            "Accurate and concise. No direct SQL jargon is used, which is good. However, 'type code BK' could be further simplified to 'type BK'.",
            "The variation accurately captures the query's intent, but 'linked to' can be simplified to 'for'. Also, 'that have the type code BK' could be shortened to 'of type BK'.'"
        ],
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "original_utterance": "Show all document names using templates with template type code BK."
    },
    {
        "init": [
            "What is the count of documents for each template type?",
            "How many documents exist for each type of template?",
            "Can you provide the number of documents categorized by template type code?"
        ],
        "final": [
            "What is the count of documents for each template type?",
            "How many documents exist for each related type of template?",
            "Can you provide the number of documents grouped by each template type code?"
        ],
        "feedback": [
            "This variation is clear and accurately rephrases the SQL query without technical jargon. No changes needed.",
            "Good variation but could specify it's counting documents related to each template type for clearer understanding.",
            "Accurate and clear. The term 'template type code' may be less familiar to non-technical users but is acceptable. Consider simplifying it for better accessibility if the term is not widely understood."
        ],
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "original_utterance": "Show all template type codes and the number of documents using each type."
    },
    {
        "init": [
            "What is the most frequently used template type code in the documents?",
            "Show me the template type code that appears most often across all documents.",
            "Which template type code is used the most in the document records?"
        ],
        "final": [
            "What is the most frequently used template type code in the documents?",
            "Show me the template type code that is most common among all document entries.",
            "Which template type code is used the most in the document records?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the original query's intent. No changes needed.",
            "The phrase 'appears most often' is clear, but 'across all documents' could be rephrased for more natural language flow. Avoid terms like 'documents' if it specifically refers to a table.",
            "The variation is accurate and concise, but it would benefit from a slight rephrasing for better natural language flow, such as 'among' instead of 'in' to improve clarity."
        ],
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which template type code is used by most number of documents?"
    },
    {
        "init": [
            "Which template type codes exist in the Templates table but are not associated with any documents?",
            "Can you list template type codes that are present in the Templates table but have no corresponding entries in the Documents table?",
            "Find all template type codes from Templates that do not have any matching records in the Documents table."
        ],
        "final": [
            "Which template type codes exist in the Templates table but are not linked to any documents?",
            "Can you list template type codes that are present in the Templates table but are not used in any documents?",
            "Find all template type codes from Templates that do not have any documents associated with them."
        ],
        "feedback": [
            "This variation is clear and accurately captures the SQL query's intention. No major changes needed, but consider mentioning the exact nature of association (like 'not used in any document').",
            "The phrase 'corresponding entries' is a bit technical. It could be simplified to make it more understandable for a non-technical user.",
            "This variation is accurate and concise but could be rephrased to avoid 'matching records', which might seem technical. Instead, use simpler terms like 'not linked to'."
        ],
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "original_utterance": "Show all template type codes that are not used by any document."
    },
    {
        "init": [
            "What are the codes and descriptions of all template types?",
            "Can you list all the template type codes along with their descriptions?",
            "Show me the template type codes and their corresponding descriptions."
        ],
        "final": [
            "What are the codes and descriptions for all template types?",
            "Can you list all the template type codes along with their descriptions?",
            "Show me the template type codes and their corresponding descriptions."
        ],
        "feedback": [
            "This variant clearly asks for the necessary data but could be slightly more specific by mentioning 'codes and descriptions.'",
            "Well phrased and explicitly asks for listing codes with descriptions. It aligns well with the SQL query.",
            "Direct and clear. This version avoids technical SQL language while effectively conveying the request."
        ],
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "original_utterance": "Show all template type codes and descriptions."
    },
    {
        "init": [
            "What is the description of the template type with the code 'AD'?",
            "Can you provide the template type description for the code 'AD'?",
            "Find the description for the template type identified by the code 'AD'."
        ],
        "final": [
            "What is the template description for the code 'AD'?",
            "Can you provide the template type description for the code 'AD'?",
            "Find the description for the template type with the code 'AD'."
        ],
        "feedback": [
            "Clear in asking for the description. The use of 'description of the template type' is straightforward, but it could be simplified.",
            "Well-phrased. It is concise and provides a clear direction to retrieve the template type description.",
            "Slightly more complex phrasing. The term 'identified by the code' might be too formal. Simplifying could improve clarity."
        ],
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "original_utterance": "What is the template type descriptions for template type code \"AD\"."
    },
    {
        "init": [
            "What is the code for the template type described as 'Book'?",
            "Can you find the template type code for the description 'Book'?",
            "Retrieve the template type code where the description is 'Book'."
        ],
        "final": [
            "What is the code for the template type that has the description 'Book'?",
            "Can you tell me the code for the template type described as 'Book'?",
            "Get the code for the template type if its description is 'Book'."
        ],
        "feedback": [
            "Clear and correctly captures the intent of the original query. The phrase 'the code for the template type' could be more conversational.",
            "Phrasing is good and precise. Consider making it sound less formal by rephrasing 'find the template type code'.",
            "Accurate but slightly technical. Simplify by not using 'where' and make it more conversational."
        ],
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "original_utterance": "What is the template type code for template type description \"Book\"."
    },
    {
        "init": [
            "What are the distinct template type descriptions that are linked to documents?",
            "Can you list unique template type descriptions associated with templates and documents?",
            "Provide the different template type descriptions that are used in the documents."
        ],
        "final": [
            "What are the distinct template type descriptions linked through templates to documents?",
            "Can you list the unique template type descriptions associated across templates and documents?",
            "Provide the different template type descriptions associated with documents through templates."
        ],
        "feedback": [
            "This variation is clear but could use more context or detail about how the templates are linked. Make sure it is clear that it's a join across multiple tables.",
            "Good phrase but could be more concise. Avoid repetition and make the connection between the tables clearer.",
            "Accurate and concise, but 'used in the documents' might imply direct usage, which is not explicitly stated in the SQL query. Emphasize the relationship described."
        ],
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "original_utterance": "What are the distinct template type descriptions for the templates ever used by any document?"
    },
    {
        "init": [
            "Can you find the template IDs for templates that are described as Presentations?",
            "What are the IDs of templates associated with the Presentation type description?",
            "Show me the template IDs where the template type is described as 'Presentation'."
        ],
        "final": [
            "Can you find the template IDs for templates described as Presentations?",
            "What are the IDs of templates with the Presentation type description?",
            "Show me the template IDs where the template type is described as Presentation."
        ],
        "feedback": [
            "This variation is clear and accurate. It captures the intent and removes SQL jargon, making it easier to understand.",
            "Good phrasing, but it could be simplified. The term 'associated with' might be confusing to non-technical users.",
            "This variation is straightforward but could be made clearer by avoiding quotations around 'Presentation', which may be unnecessary for natural language queries."
        ],
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "original_utterance": "What are the template ids with template type description \"Presentation\"."
    },
    {
        "init": [
            "How many paragraphs are there in the document?",
            "Can you give me the total number of paragraphs?",
            "What is the count of paragraphs available?"
        ],
        "final": [
            "How many paragraphs are there in the document?",
            "Can you give me the total paragraphs?",
            "What is the count of paragraphs?"
        ],
        "feedback": [
            "This variation is precise and correctly conveys the intent of the SQL query. No substantial changes needed.",
            "Clear and to the point. However, 'total number' might be redundant. 'Total paragraphs' would suffice.",
            "This variation is clear, though 'available' might imply the paragraphs are dynamic or alterable, which may not align precisely with a simple count request."
        ],
        "query": "SELECT count(*) FROM Paragraphs",
        "original_utterance": "How many paragraphs in total?"
    },
    {
        "init": [
            "How many paragraphs are there in the document named 'Summer Show'?",
            "Count the number of paragraphs in the 'Summer Show' document.",
            "Can you tell me the total number of paragraphs found in the 'Summer Show' document?"
        ],
        "final": [
            "How many paragraphs are there in the document named 'Summer Show'?",
            "Can you count the number of paragraphs in the 'Summer Show' document?",
            "Can you tell me the total number of paragraphs found in the 'Summer Show' document?"
        ],
        "feedback": [
            "Clear and accurate. It provides a direct question regarding the count of paragraphs in the specified document. No changes needed.",
            "Straightforward and concise. However, changing 'Count' to 'Can you count' may improve natural flow.",
            "Good phrasing, but adding 'the' before 'total number of paragraphs' might enhance clarity. Otherwise, it's clear and accurate."
        ],
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "original_utterance": "How many paragraphs for the document with name 'Summer Show'?"
    },
    {
        "init": [
            "What additional details are there in paragraphs that mention 'Korea'?",
            "Fetch other details from paragraphs containing the word 'Korea'.",
            "Show me the other details for paragraphs where 'Korea' is mentioned."
        ],
        "final": [
            "What other details are there in paragraphs that mention 'Korea'?",
            "Fetch other details from paragraphs that include the word 'Korea'.",
            "Show me the other details for paragraphs where 'Korea' is mentioned."
        ],
        "feedback": [
            "Good phrasing, but 'additional' can be misleading. 'Other details' would be more accurate to match the SQL query.",
            "Accurate and straightforward, but avoid using 'containing,' which can be confused with a substring operation. 'Include' might be better.",
            "Clear and precise. No changes needed, but adding 'mentioned' might make it clearer that it's an exact match rather than a substring match."
        ],
        "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
        "original_utterance": "Show paragraph details for paragraph with text 'Korea'."
    },
    {
        "init": [
            "Can you provide the paragraphs from the document titled 'Welcome to NY'?",
            "Show me the text and IDs of paragraphs in the document named 'Welcome to NY'.",
            "Fetch the paragraph IDs and their text from the document called 'Welcome to NY'."
        ],
        "final": [
            "Can you provide the paragraph IDs and text from the document titled 'Welcome to NY'?",
            "Show me the text and IDs of paragraphs in the document named 'Welcome to NY'.",
            "Fetch the paragraph IDs and their text from the document called 'Welcome to NY'."
        ],
        "feedback": [
            "Clear and precise, but it could be improved by explicitly mentioning the need for IDs.",
            "Good phrasing and includes both text and IDs. Clear mention of 'text and IDs' aligns closely with the SQL elements.",
            "Accurate and concise. No further changes needed. It avoids SQL-specific jargon like 'JOIN' and focuses on the document name and content."
        ],
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "original_utterance": "Show all paragraph ids and texts for the document with name 'Welcome to NY'."
    },
    {
        "init": [
            "Can you retrieve all paragraphs from the document named 'Customer reviews'?",
            "Show me the text of paragraphs found in the 'Customer reviews' document.",
            "What are the paragraphs included in the 'Customer reviews' document?"
        ],
        "final": [
            "Can you retrieve paragraphs from the document named 'Customer reviews'?",
            "Show me the text of paragraphs in the 'Customer reviews' document.",
            "What are the paragraphs included in the 'Customer reviews' document?"
        ],
        "feedback": [
            "Clear and structured well, but it could be streamlined for brevity by removing redundant words like 'all'.",
            "Phrasing is good, but the term 'found' can be omitted for more clarity and conciseness.",
            "Accurate and embeds the context well. The phrasing is natural and captures the intent of the query."
        ],
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "original_utterance": "Show all paragraph texts for the document \"Customer reviews\"."
    },
    {
        "init": [
            "How many paragraphs are there in each document, listed by document ID?",
            "Show the number of paragraphs per document and order the results by document ID.",
            "Can you provide a count of paragraphs for each document, sorted by the document ID?"
        ],
        "final": [
            "How many paragraphs are there in each document, listed and grouped by document ID?",
            "Show the number of paragraphs per document, grouped and ordered by document ID.",
            "Can you provide a count of paragraphs for each document, grouped and sorted by the document ID?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the query. No ambiguities or unclear elements are present. Consider specifying that the count should list out explicitly.",
            "This variation is precise and specifies ordering, but could be improved by explicitly mentioning that the count should be grouped by document.",
            "The variation is clear and concise. Adding the grouping aspect explicitly will make it more aligned with the original query."
        ],
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "original_utterance": "Show all document ids and the number of paragraphs in each document. Order by document id."
    },
    {
        "init": [
            "Show me the document IDs and their names along with the count of paragraphs in each document.",
            "Can you provide the document ID, document name, and the total number of paragraphs for each document?",
            "Find the document IDs, names, and count the number of paragraphs in each document."
        ],
        "final": [
            "Show me the document IDs and their names along with the count of paragraphs for each document.",
            "Can you provide the document ID, document name, and the total number of paragraphs for each document?",
            "Find the document IDs, names, and count the number of paragraphs for each document."
        ],
        "feedback": [
            "This variation clearly asks for the required information but could be more precise by mentioning that the count is per document.",
            "Good phrasing. It accurately describes the query's intent without any SQL technical jargon. No changes required.",
            "This variation is also clear, but specifying 'count of paragraphs for each document' would improve clarity."
        ],
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "original_utterance": "Show all document ids, names and the number of paragraphs in each document."
    },
    {
        "init": [
            "Show me the document IDs that have at least two paragraphs.",
            "Which document IDs contain two or more paragraphs?",
            "List the document IDs for documents with two or more paragraphs."
        ],
        "final": [
            "Show me the document IDs that contain at least two paragraphs.",
            "Which document IDs contain two or more paragraphs?",
            "List the document IDs with two or more paragraphs."
        ],
        "feedback": [
            "This variation is clear and accurately captures the SQL query's intent. However, the phrase 'that have' can be slightly ambiguous. Consider making it more explicit by mentioning 'contain.'",
            "This variation is precise and clear, directly conveying the query's requirements. No major changes are needed.",
            "This variation is also clear but could be more concise by removing 'for documents.' The word 'paragraphs' already implies that it pertains to documents."
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "original_utterance": "List all document ids with at least two paragraphs."
    },
    {
        "init": [
            "What is the document with the highest number of paragraphs?",
            "Can you identify the document with the most paragraphs in the database?",
            "Find the document that contains the largest number of paragraphs."
        ],
        "final": [
            "What is the document with the highest number of paragraphs in the current records?",
            "Can you identify the document that currently has the most paragraphs in the database?",
            "Find the document that currently contains the largest number of paragraphs in the listings."
        ],
        "feedback": [
            "The variation is clear and aligns well with the query. Consider specifying that it is a search within documents to add context.",
            "This variation is precise and correct. It considers the context well but could further specify the 'currently' attribute for additional clarity.",
            "The variation is accurate and concise. However, mentioning 'contains' might make it clearer that it\u2019s about the relationship between documents and paragraphs."
        ],
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the document id and name with greatest number of paragraphs?"
    },
    {
        "init": [
            "Which document has the fewest paragraphs?",
            "Can you identify the document with the lowest number of paragraphs?",
            "Find the document with the smallest count of paragraphs."
        ],
        "final": [
            "Which document has the fewest paragraphs?",
            "Can you identify the document that currently has the lowest number of paragraphs?",
            "Find the document with the fewest paragraphs in the current dataset."
        ],
        "feedback": [
            "This variation is clear and well-phrased. It accurately captures the intent and logic of the SQL query.",
            "This variation is accurate but could be more explicit by specifying 'currently' to clarify that it pertains to the data available now.",
            "Accurate and concise. The term 'smallest count' is a bit technical; using 'fewest' might be more natural. You could also eliminate direct reference to 'count,' which is a SQL-specific term."
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "original_utterance": "What is the document id with least number of paragraphs?"
    },
    {
        "init": [
            "Which document IDs have between one and two paragraphs?",
            "Show document IDs that are associated with one or two paragraphs.",
            "Find the document IDs where the number of associated paragraphs is either one or two."
        ],
        "final": [
            "Which document IDs have a count of paragraphs between one and two?",
            "Show document IDs that are associated with a count of one or two paragraphs.",
            "Find the document IDs where the number of paragraphs is either one or two."
        ],
        "feedback": [
            "This variation is clear and correctly captures the intent. It could be improved by explicitly stating that the paragraphs are counted.",
            "Accurate phrasing but could use a clearer mention of paragraph count to avoid ambiguity.",
            "Good and precise. Adding 'at most' for clarity might help, but it's still clear without it."
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "original_utterance": "What is the document id with 1 to 2 paragraphs?"
    },
    {
        "init": [
            "How many singers are there in the database?",
            "Can you tell me the total number of singers listed?",
            "What is the count of all the singers in the database?"
        ],
        "final": [
            "How many singers are there?",
            "Can you tell me the total number of singers?",
            "What is the count of all the singers?"
        ],
        "feedback": [
            "This variation is clear and straightforward. It directly asks for the total number of singers, avoiding any SQL jargon.",
            "Good phrasing, though 'listed' might be a bit ambiguous. 'Total number' is precise and clear.",
            "This variation is also accurate, but it mentions 'in the database', which, while not incorrect, might be redundant and can be omitted for brevity."
        ],
        "query": "SELECT count(*) FROM singer",
        "original_utterance": "How many singers do we have?"
    },
    {
        "init": [
            "List the names, countries, and ages of the singers, sorted from oldest to youngest.",
            "Can you show me the singers' names, countries, and ages, starting with the oldest?",
            "Give me a list of singers with their names, countries, and ages in descending order of their ages."
        ],
        "final": [
            "List the names, countries, and ages of the singers, in order of age from oldest to youngest.",
            "Can you show me the singers' names, countries, and ages, starting with the oldest?",
            "Give me a list of singers with their names, countries, and ages, sorted by age, starting with the oldest."
        ],
        "feedback": [
            "The variation accurately reflects the SQL query and is clear, but the term 'sorted from oldest to youngest' could be simplified to 'in order of age from oldest to youngest' for better clarity.",
            "This variation is concise and clear. It accurately conveys the original query intent without unnecessary technical jargon. No changes needed.",
            "This is detailed and includes all query elements, but 'in descending order of their ages' can be rephrased to avoid redundancy. Consider simplifying it to 'sorted by age, starting with the oldest.'"
        ],
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "original_utterance": "Show name, country, age for all singers ordered by age from the oldest to the youngest."
    },
    {
        "init": [
            "What is the average, minimum, and maximum age of singers from France?",
            "Can you provide the average, youngest, and oldest ages of singers who are from France?",
            "Show me the average age as well as the youngest and oldest singers coming from France."
        ],
        "final": [
            "What is the average, youngest, and oldest age of singers from France?",
            "Can you provide the average, youngest, and oldest ages of singers who are from France?",
            "Show me the average, youngest, and oldest ages of singers from France."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the data requested but could be slightly more concise though it's still clear overall.",
            "Good phrasing, but 'youngest' and 'oldest' are more natural terms than 'minimum' and 'maximum' and thus more user-friendly.",
            "Accurate and concise, but the wording 'coming from France' can be simplified to 'from France' for consistency. Overall, it is correct and understandable."
        ],
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "original_utterance": "What is the average, minimum, and maximum age of all singers from France?"
    },
    {
        "init": [
            "What is the song name and release year of the youngest singer?",
            "Show me the song and its release year by the youngest performer.",
            "Can you find the song and its release year from the youngest artist in the list?"
        ],
        "final": [
            "What is the song name and release year of the youngest singer?",
            "Show me the song and its release year by the youngest performer.",
            "Can you show the song and its release year from the youngest artist in the list?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query. However, 'youngest singer' implies that age is the correct sorting metric.",
            "Good phrasing. It's specific about what to show but lacks the direct mention of sorting by age.",
            "Clear and accurate, but it could be a bit more concise and direct, such as changing 'find' to 'show'."
        ],
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "original_utterance": "Show the name and the release year of the song by the youngest singer."
    },
    {
        "init": [
            "Which countries have singers older than 20?",
            "List all unique countries where singers are older than 20.",
            "Can you find the distinct countries of singers who are over 20 years old?"
        ],
        "final": [
            "Which distinct countries have singers older than 20?",
            "List all distinct countries where singers are older than 20.",
            "Can you find the distinct countries of singers who are over 20 years old?"
        ],
        "feedback": [
            "Clear and concise, but it could include a reference to the uniqueness aspect more explicitly to align with 'DISTINCT'.",
            "Well-phrased, but 'unique' could be replaced with 'distinct' to better match the SQL terminology without adding complexity.",
            "Effective and explicit. Uses 'distinct' which closely aligns with the SQL query's purpose. No major changes needed."
        ],
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "original_utterance": "What are all distinct countries where singers above age 20 are from?"
    },
    {
        "init": [
            "Provide the number of singers for each country.",
            "Can you list the count of singers categorized by their country?",
            "Show me the total number of singers grouped by their country."
        ],
        "final": [
            "Provide the count of singers for each country.",
            "Can you list the number of singers for each country?",
            "Show me the total number of singers grouped by their country."
        ],
        "feedback": [
            "This is clear and concise but could explicitly ask for the count, making it more specific.",
            "Good phrasing, but using 'categorized by their country' might be more complex than necessary. Simplify for better understanding.",
            "This is accurate and clear. It directly translates the SQL logic into natural language."
        ],
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "original_utterance": "Show all countries and the number of singers in each country."
    },
    {
        "init": [
            "List all songs performed by singers who are older than the average age.",
            "Which songs are sung by singers with an age above the average age?",
            "Show me the songs by singers whose age is higher than the average."
        ],
        "final": [
            "List all songs performed by singers who are older than the average age.",
            "Which songs are sung by singers above the average age?",
            "Show me the songs by singers older than the average."
        ],
        "feedback": [
            "Clear and accurate. It's concise and correctly conveys the intent without any jargon.",
            "This phrasing is good, but could be streamlined by removing 'with an age' to improve the flow.",
            "Accurate and clear but could be made more concise by saying 'older than the average' instead of 'whose age is higher than the average'."
        ],
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "original_utterance": "List all song names by singers above the average age."
    },
    {
        "init": [
            "Show me the stadiums with a capacity between 5,000 and 10,000, including their location and name.",
            "Can you list the stadiums with capacities ranging from 5,000 to 10,000, including their names and locations?",
            "Which stadiums have a capacity between 5,000 and 10,000, and what are their names and locations?"
        ],
        "final": [
            "Show me the stadiums with a capacity between 5,000 and 10,000, including both their names and locations.",
            "List the stadiums with capacities ranging from 5,000 to 10,000, including their names and locations.",
            "Which stadiums have a capacity between 5,000 and 10,000, and what are their names and locations?"
        ],
        "feedback": [
            "This variation is clear and direct but could better highlight that the result includes both the stadium name and location.",
            "Good phrasing, but it might be improved by making the order of information presentation (names and locations) clearer. Although accurate, the phrase 'Can you list' might be replaced with something less formal.",
            "This variation is concise and accurate. It avoids technical jargon and directly asks for what is needed without confusion."
        ],
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "original_utterance": "Show location and name for all stadiums with a capacity between 5000 and 10000."
    },
    {
        "init": [
            "What are the average and maximum capacities of the stadiums?",
            "Can you provide the average and highest capacities for the stadiums?",
            "Give me the average capacity and the maximum capacity of the stadiums."
        ],
        "final": [
            "What are the average and maximum stadium capacities?",
            "Can you provide the average and maximum capacities for the stadiums?",
            "Give me the average capacity and the maximum capacity of the stadiums."
        ],
        "feedback": [
            "This variation correctly captures the intent but could be slightly clearer by specifying 'stadium capacities' instead of 'capacities' alone.",
            "Well phrased, but consider explicitly stating 'stadium capacities' for added clarity. The word 'highest' can be replaced with 'maximum' for consistency with SQL terms.",
            "Accurate and clear. It maintains the correct SQL terms and intent. No changes needed, but it avoids the SQL-specific term."
        ],
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "original_utterance": "What is the average and the maximum capacity of all stadiums?"
    },
    {
        "init": [
            "What is the name and capacity of the stadium with the highest average?",
            "Show me the stadium details with the largest average and its name and capacity.",
            "Find the stadium that has the highest average and show its name and capacity."
        ],
        "final": [
            "What is the name and capacity of the stadium with the highest average attendance?",
            "Show me the stadium with the highest average attendance and provide its name and capacity.",
            "Find the stadium that has the highest average attendance and show its name and capacity."
        ],
        "feedback": [
            "This variation is quite clear and understandable. However, it would be beneficial to clarify that 'average' refers to a specific metric related to the stadium (e.g., attendance, rating, etc.).",
            "The phrase 'largest average' is somewhat ambiguous. It should specify what the average is related to for clarity. The inclusion of 'details' is good, but ensure it's understood what details are wanted.",
            "The phrasing is good, but like the others, specifying what the 'average' pertains to would make it clearer. Otherwise, it broadly matches the intent of the SQL query."
        ],
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "original_utterance": "What is the name and capacity for the stadium with highest average attendance?"
    },
    {
        "init": [
            "How many concerts took place in 2014 or 2015?",
            "Can you provide the total number of concerts held in the years 2014 and 2015?",
            "What is the count of concerts that occurred in either 2014 or 2015?"
        ],
        "final": [
            "How many concerts took place in 2014 or 2015?",
            "Can you provide the total number of concerts held in the years 2014 and 2015?",
            "What is the count of concerts that occurred in 2014 or 2015?"
        ],
        "feedback": [
            "This variation is clear, concise, and accurately reflects the SQL query. No improvements needed.",
            "The phrase 'total number of concerts held' accurately conveys the intent and avoids technical jargon. No changes needed.",
            "This is also accurate and concise, but the phrase 'occurred in either' could be simplified to 'occurred in'."
        ],
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "original_utterance": "How many concerts are there in year 2014 or 2015?"
    },
    {
        "init": [
            "Show the names of the stadiums and the number of concerts held at each.",
            "List each stadium and how many concerts have been held there.",
            "Can you provide the names of the stadiums along with the count of concerts hosted in each?"
        ],
        "final": [
            "Show the names of stadiums and the number of concerts held in each.",
            "List each stadium and how many concerts have taken place there.",
            "Can you provide the names of stadiums along with the count of concerts held in each?"
        ],
        "feedback": [
            "This variation is accurate and clear. It provides the correct intent of the query but avoid passive phrasing where possible.",
            "The phrasing is precise and clear, but 'each' stadium could be potentially ambiguous without the context they're hosted in, so make sure this implies uniqueness.",
            "This variation is technically accurate, but the term 'hosted' might cause confusion with 'held', which is already sufficient and clear."
        ],
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "original_utterance": "Show the stadium name and the number of concerts in each stadium."
    },
    {
        "init": [
            "What is the name and capacity of the stadium that hosted the most concerts since 2014?",
            "Show me the stadium with the highest number of concerts since 2014 along with its name and capacity.",
            "Which stadium has had the most concerts since 2014, and what is its name and capacity?"
        ],
        "final": [
            "What are the name and capacity of the stadium that has hosted the most concerts since 2014?",
            "Show me the name and capacity of the stadium with the highest number of concerts since 2014.",
            "Which stadium has hosted the most concerts since 2014, and what are its name and capacity?"
        ],
        "feedback": [
            "This variation is clear and covers all elements, but it could read more naturally with a slight rephrasing.",
            "Good phrasing but consider specifying that the number of concerts is 'since 2014' to match the query.",
            "This variation is clear and concise, but a slight adjustment in phrasing could enhance clarity."
        ],
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Show the stadium name and capacity with most number of concerts in year 2014 or after."
    },
    {
        "init": [
            "Which year had the most concerts?",
            "Can you tell me the year with the highest number of concerts?",
            "What year had the greatest number of concerts held?"
        ],
        "final": [
            "Which year had the most concerts?",
            "Can you tell me the year with the highest number of concerts?",
            "What year had the greatest number of concerts held?"
        ],
        "feedback": [
            "Clear and concise. It appropriately captures the intent of obtaining the year with the highest number of concerts.",
            "This is well-phrased and seeks the same information as the original SQL query, focusing on the year with the highest concert count.",
            "Accurate and clear. It correctly asks for the year with the greatest number of concerts."
        ],
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which year has most number of concerts?"
    },
    {
        "init": [
            "List the names of stadiums that have never hosted a concert.",
            "Can you provide the names of stadiums where no concerts have been held?",
            "Show me the stadiums that do not have any concerts scheduled."
        ],
        "final": [
            "List the names of stadiums that have no record of hosting concerts.",
            "Can you provide the names of stadiums where no concerts have been held?",
            "Show me the stadiums that currently have no concerts recorded."
        ],
        "feedback": [
            "The variation is clear, but 'never hosted' could be misleading if the data is not historical. It implies a permanent state, which might not be accurate.",
            "This is well-phrased and accurate. It clearly asks for stadiums without any concert records.",
            "This phrase uses 'scheduled,' which might imply future data rather than a current or past state. Better to focus on current data in this context."
        ],
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "original_utterance": "Show the stadium names without any concert."
    },
    {
        "init": [
            "Which countries are home to singers who are either over 40 years old or under 30 years old?",
            "Find the countries of singers who are older than 40 or younger than 30.",
            "Show me the countries of the singers who are above 40 or below 30."
        ],
        "final": [
            "Which countries have singers who are both over 40 and under 30 years old?",
            "Find the countries where there are singers older than 40 and also singers younger than 30.",
            "Show me the countries that have singers both above 40 and below 30 years old."
        ],
        "feedback": [
            "The use of 'either' might create confusion as it implies both conditions at once. Also, clarify it's a search for countries present in both age categories.",
            "This version is clear but could be more precise. It should indicate that a country must have singers in both age brackets, over 40 and under 30, which is an implicit requirement from the INTERSECT operation.",
            "This variation is brief and clear but lacks precision. Like the previous variations, it should clarify that the country must host singers in both specified age ranges."
        ],
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "original_utterance": "Show countries where a singer above age 40 and a singer below 30 are from."
    },
    {
        "init": [
            "Which stadiums did not host a concert in the year 2014?",
            "List the stadiums that didn't have any concerts in 2014.",
            "Show me the names of stadiums where no concerts were held in 2014."
        ],
        "final": [
            "Which stadiums did not host a concert in the year 2014?",
            "List the stadiums that did not hold any concerts in 2014.",
            "Show me the names of stadiums where no concerts were held in 2014."
        ],
        "feedback": [
            "This variation is clear and matches the intent accurately. It directly asks for stadiums without concerts in 2014.",
            "Good phrasing. However, 'didn't have' is less formal and might be better replaced with 'did not hold' to maintain consistency in formal querying.",
            "This is accurate and clear. The phrase 'where no concerts were held' clearly parallels the SQL logic."
        ],
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "original_utterance": "Show names for all stadiums except for stadiums having a concert in year 2014."
    },
    {
        "init": [
            "Show me the name and theme of each concert along with the number of singers in each.",
            "Can you provide the concert names, their themes, and the count of singers participating in each concert?",
            "List all concerts with their themes and the number of singers performing in each."
        ],
        "final": [
            "Show me the name and theme of each concert along with the total number of singers in each.",
            "Can you provide the concert names, their themes, and the count of singers performing in each concert?",
            "List all concerts with their themes and the number of singers performing in each."
        ],
        "feedback": [
            "Clear and understandable, but it could be more explicit by mentioning the 'total number of singers'.",
            "Good phrasing, but 'participating' might be understood better if phrased as 'performing' in the context of concerts.",
            "Accurate and concise. No changes needed, it conveys the intent clearly."
        ],
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "original_utterance": "Show the name and theme for all concerts and the number of singers in each concert."
    },
    {
        "init": [
            "How many concerts has each singer participated in?",
            "Show the number of concerts for each singer by their name.",
            "List each singer along with the total number of their concerts."
        ],
        "final": [
            "How many concerts has each singer participated in?",
            "Show the number of concerts each singer has performed.",
            "List each singer along with the total number of their concerts."
        ],
        "feedback": [
            "This variation is clear and accurate. It conveys the correct logic of the SQL query without any technical jargon. No changes needed.",
            "The variation correctly matches the query but could be clearer by rephrasing. The phrase 'by their name' adds unnecessary complexity.",
            "This variation is concise and accurately represents the SQL query purpose. It remains user-friendly and avoids technical terms. No changes needed."
        ],
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "original_utterance": "List singer names and number of concerts for each singer."
    },
    {
        "init": [
            "Which singers performed in concerts in the year 2014?",
            "Can you list all the singers who had concerts in 2014?",
            "Find the names of the singers who performed in concerts during 2014."
        ],
        "final": [
            "Which singers performed in concerts in 2014?",
            "Can you list all the singers who performed in concerts in 2014?",
            "Find the names of the singers who performed in concerts during 2014."
        ],
        "feedback": [
            "This variation is clear and concise, but adding 'in the year' makes it slightly informal. It could simply say 'in 2014' for better fluency.",
            "Good phrasing but 'who had concerts in 2014' is a bit ambiguous. It may be better to specify 'who performed in concerts in 2014' for clarity.",
            "This variation accurately captures the query's intent and is concise. No changes needed."
        ],
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "original_utterance": "List all singer names in concerts in year 2014."
    }
]