[
    {
        "init": [
            "How many models does each car maker have, along with their names and IDs?",
            "Can you list the total number of models for each car manufacturer, including their full names and IDs?",
            "Provide a count of models for each car maker, showing their names and identification numbers."
        ],
        "final": [
            "How many models does each car maker have, along with their names and IDs?",
            "Can you list the total number of models for each car manufacturer, including their names and IDs?",
            "Provide a count of models for each car maker, showing their names and IDs."
        ],
        "feedback": [
            "This variation is clear and concise. It effectively captures the intent of the SQL query without technical jargon. No changes needed.",
            "Good phrasing, but it can be more concise by changing 'full names' to 'names.' The term 'including their' makes it slightly longer than necessary.",
            "This is correct but can avoid technical terms like 'identification numbers.' Instead, use a simpler term like 'IDs'."
        ],
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "original_utterance": "How many car models are produced by each maker? List the count and the maker full name."
    },
    {
        "init": [
            "How many concerts has each singer performed in, along with their names?",
            "List the names of singers and the total number of concerts they have participated in.",
            "Can you provide a count of concerts for each singer, along with their names?"
        ],
        "final": [
            "How many concerts has each singer performed in, along with their names?",
            "List the names of singers and the total number of concerts they have performed.",
            "Can you show the names of each singer and the number of concerts they have performed?"
        ],
        "feedback": [
            "This variation is clear and effectively communicates the intent of the query. No major issues identified.",
            "Accurate and specific. It clearly asks for names and the total count of concerts but could avoid the word 'participated' in favor of a simpler term.",
            "Concise and accurate. However, it could be more natural if the phrase 'provide a count of' were replaced with simpler language."
        ],
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "original_utterance": "List singer names and number of concerts for each singer."
    },
    {
        "init": [
            "Which template IDs are used in more than one document?",
            "Can you identify the template IDs that appear in multiple documents?",
            "Show me the template IDs that are associated with more than one document."
        ],
        "final": [
            "Which template IDs are used in more than one document?",
            "Can you identify the template IDs used in multiple documents?",
            "Show me the template IDs used in more than one document."
        ],
        "feedback": [
            "Clear and accurate. No changes needed.",
            "Good phrasing but could be slightly more concise by rephrasing 'appear in multiple' to 'used in multiple.'",
            "Accurate and clear, but 'associated with' can be replaced with 'used in' for more natural language flow."
        ],
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "original_utterance": "Show ids for all templates that are used by more than one document."
    },
    {
        "init": [
            "Retrieve the first names of students whose permanent address is in Haiti or those who have the mobile number '09700166582'.",
            "Can you get the list of students' first names either from Haiti or with the mobile phone number '09700166582'?",
            "Show me the first names of students living in Haiti or those with the cell phone number '09700166582'."
        ],
        "final": [
            "Fetch the first names of students who have a permanent address in Haiti or those with the mobile number '09700166582'.",
            "Can you show the first names of students either residing in Haiti or with the mobile number '09700166582'?",
            "Show me the first names of students who live in Haiti or those with the mobile number '09700166582'."
        ],
        "feedback": [
            "Clear and accurate, but 'Retrieve' is slightly formal. 'Permanent address' is a bit technical, could be simplified.",
            "Good phrasing, but avoid the use of 'get' as it can be informal. It could also mention 'permanent address' more naturally.",
            "Clear and concise. 'Living' simplifies the concept of 'permanent address,' making it more natural."
        ],
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "original_utterance": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582."
    },
    {
        "init": [
            "Which stadiums did not host any concerts in 2014?",
            "Can you list stadiums where no concerts were held in the year 2014?",
            "Find the names of stadiums that had no concerts in 2014."
        ],
        "final": [
            "Which stadiums did not host any concerts in 2014?",
            "Can you list stadiums where no concerts were hosted in the year 2014?",
            "Find the names of stadiums that had no concerts in 2014."
        ],
        "feedback": [
            "The variation is clear and directly addresses the requirement. Explicitly mentioning 'not host any concerts' aligns well with the query logic.",
            "This variation is precise but could be improved by replacing 'held' with 'hosted' to maintain a consistent context with stadiums.",
            "The phrase 'did not host' is clear and captures the essence of the SQL query accurately. This is a strong variation with no changes needed for clarity."
        ],
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "original_utterance": "Show names for all stadiums except for stadiums having a concert in year 2014."
    },
    {
        "init": [
            "How many dogs have never received any treatments?",
            "What's the number of dogs that have not been given any treatments?",
            "Can you find out how many dogs have not had any treatments?"
        ],
        "final": [
            "How many dogs have never received any treatments?",
            "What's the number of dogs that haven't received any treatments?",
            "Can you tell me how many dogs haven't had any treatments?"
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent and logic of the SQL query. No changes needed.",
            "This version is accurate but could be slightly more concise. The term 'have not been given' could be simplified.",
            "This variation is clear and accurate but could benefit from being more concise. The phrasing 'find out' is slightly informal."
        ],
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "original_utterance": "How many dogs have not gone through any treatment?"
    },
    {
        "init": [
            "How many courses is each teacher assigned to?",
            "Can you list each teacher along with the number of courses they are teaching?",
            "Show me the number of courses assigned to each teacher."
        ],
        "final": [
            "How many courses is each teacher assigned to?",
            "Can you list each teacher along with the number of courses they are assigned to?",
            "Show me the number of courses assigned to each teacher."
        ],
        "feedback": [],
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "original_utterance": "Show names of teachers and the number of courses they teach."
    },
    {
        "init": [
            "Which battles were led by Kaloyan for the Bulgarians and Baldwin I for the Latins?",
            "Can you list the battles where Kaloyan commanded the Bulgarian forces and Baldwin I commanded the Latin forces?",
            "Find all battles involving Kaloyan as the Bulgarian commander and Baldwin I as the Latin commander."
        ],
        "final": [
            "Which battles had Kaloyan leading the Bulgarian forces and Baldwin I leading the Latin forces?",
            "Can you list the battles where Kaloyan commanded the Bulgarian forces and Baldwin I commanded the Latin forces?",
            "Find all battles with Kaloyan as the Bulgarian commander and Baldwin I as the Latin commander."
        ],
        "feedback": [
            "The phrasing is generally clear but could be more specific by mentioning 'commanders' to mirror the SQL fields more closely.",
            "This variation is quite detailed and aligns well with the SQL logic. It precisely specifies the roles of Kaloyan and Baldwin I, making it clear without any ambiguity.",
            "While it is accurate, it can be improved by removing the word 'involving' to make it more direct and concise."
        ],
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "original_utterance": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?"
    },
    {
        "init": [
            "Which TV channel package options do not have any cartoons directed by Ben Jones?",
            "Show me the package options for TV channels that exclude cartoons directed by Ben Jones.",
            "Find the TV channel package options that do not include any cartoons directed by Ben Jones."
        ],
        "final": [
            "Which TV channel package options do not include any cartoons directed by Ben Jones?",
            "Show me the package options for TV channels that do not include cartoons directed by Ben Jones.",
            "Find the TV channel package options that do not include any cartoons directed by Ben Jones."
        ],
        "feedback": [
            "This variation is clear but could be slightly more concise. The phrase 'do not have any cartoons' is fine, but specifying 'directed by Ben Jones' could improve clarity.",
            "Good phrasing. Try to avoid complex wording like 'exclude cartoons directed by.' Simplifying to 'do not include cartoons directed by' might be clearer.",
            "This version is clear and concise, avoiding overly technical terms. No significant changes needed."
        ],
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "original_utterance": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones."
    },
    {
        "init": [
            "What is the weight of the lightest car with 4 cylinders made in 1974?",
            "Can you find the least heavy 4-cylinder car from the year 1974?",
            "Show me the minimum weight of a 4-cylinder car from 1974."
        ],
        "final": [
            "What is the weight of the lightest car with 4 cylinders made in 1974?",
            "Can you find the lightest 4-cylinder car from the year 1974?",
            "Show me the weight of the lightest 4-cylinder car from 1974."
        ],
        "feedback": [
            "This variation is clear and captures the SQL query's request to find the lightest car with 4 cylinders from 1974. No changes needed.",
            "The term 'least heavy' is accurate but may sound less natural than 'lightest.' Consider rephrasing for better fluency.",
            "This variation is concise and accurate but could be more precise if 'minimum weight' was rephrased to 'lightest car.'"
        ],
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "original_utterance": "What is the smallest weight of the car produced with 8 cylinders on 1974?"
    },
    {
        "init": [
            "Who is the manager of the shop with the highest number of products?",
            "Find the district and manager of the store that has the most products.",
            "Which shop has the most products, and who is the manager there?"
        ],
        "final": [
            "Who is the manager of the shop in the district with the highest number of products?",
            "Find the district and manager of the shop that has the most products.",
            "Which shop has the most products, and who is the manager and what is the district there?"
        ],
        "feedback": [
            "This variation is clear and directly aligns with the SQL query's intent. The manager and the shop's product count are mentioned appropriately, but mentioning the shop's district would fully capture the query.",
            "It is fairly accurate. Including 'shop' to replace 'store' would better align with the schema, and mentioning the district first and the manager second follows the order in the query.",
            "The phrasing is good but slightly ambiguous by not specifying the details of the manager and the district. Adding a clarifying statement regarding the district would improve alignment with the SQL query."
        ],
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "original_utterance": "Find the manager name and district of the shop whose number of products is the largest."
    },
    {
        "init": [
            "How many cities are there in each district where the population is above the average city population?",
            "Can you count the number of cities in each district that have populations higher than the city's average population?",
            "Show me the number of cities per district that have populations exceeding the average population of the cities."
        ],
        "final": [
            "How many cities are there in each district where the population is above the average?",
            "Can you count the number of cities in each district with populations higher than the city's average?",
            "Show me the number of cities per district that have populations exceeding the current average population of the cities."
        ],
        "feedback": [
            "This variation clearly conveys the intent, but it could be clarified further by removing the slight ambiguity around 'city population' versus 'average city population'.",
            "Good phrasing, but the repetition of 'population' could be simplified for better flow.",
            "Accurate and clear, but consider specifying 'current' average population to remove any ambiguity."
        ],
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "original_utterance": "Find the number of cities in each district whose population is greater than the average population of cities?"
    },
    {
        "init": [
            "What is the average GNP and total population of countries with a US Territory government form?",
            "Can you provide the average GNP and the sum of the population for nations classified as US Territories?",
            "Show me the average Gross National Product and total population for countries that are US Territories."
        ],
        "final": [
            "What is the average Gross National Product and total population of countries with a US Territory government form?",
            "Can you provide the average Gross National Product and the sum of the population for nations classified as US Territories?",
            "Show me the average Gross National Product and total population for countries that are US Territories."
        ],
        "feedback": [
            "Clear and accurate, but it might be more user-friendly to spell out GNP as Gross National Product.",
            "Well-phrased, but ensure 'nations' clearly refers to regions classified as US Territories for non-technical users.",
            "Accurate and uses more user-friendly language by spelling out GNP. No major changes needed."
        ],
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "original_utterance": "What is the average GNP and total population in all nations whose government is US territory?"
    },
    {
        "init": [
            "What is the total surface area of countries located in Asia or Europe?",
            "Can you calculate the combined surface area of all countries in Asia and Europe?",
            "Find the sum of the surface areas of countries that are in either Asia or Europe."
        ],
        "final": [
            "What is the total surface area of countries located in Asia or Europe?",
            "Can you calculate the combined surface area of all countries in Asia and Europe?",
            "Find the total surface area of countries that are in either Asia or Europe."
        ],
        "feedback": [
            "This variation is clear and correctly asks for the total surface area. The wording is natural and there is no need for improvement.",
            "The phrase 'combined surface area' is appropriate here. This phrasing is clear and concise, making it a good choice for a text-to-SQL task without any SQL-specific jargon.",
            "This variation is accurate, but 'sum of the surface areas' might be simplified to 'total surface area' for added clarity. Also, ensuring that 'countries' is explicitly mentioned helps ward off any ambiguity."
        ],
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "original_utterance": "What is the total surface area of the continents Asia and Europe?"
    },
    {
        "init": [
            "How many employees are there in each shop?",
            "Can you provide the count of employees per shop name?",
            "List the number of hires grouped by each shop."
        ],
        "final": [
            "How many employees are there currently in each shop?",
            "Can you provide the count of employees for each shop?",
            "List the number of employees grouped by each shop."
        ],
        "feedback": [
            "The variation is clear and directly asks for the required information. However, adding 'currently' may improve clarity.",
            "This variation is precise and well-phrased but can be further simplified for better naturalness by avoiding 'per shop name.'",
            "The phrasing is accurate, but substituting 'hires' with 'employees' might align better with common language use. The term 'grouped by shop' is clear."
        ],
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "original_utterance": "Find the number of employees hired in each shop; show the shop name as well."
    },
    {
        "init": [
            "How many concerts has each singer performed?",
            "List all singers along with the number of concerts they have performed.",
            "Can you show the name of each singer and the count of concerts they have participated in?"
        ],
        "final": [
            "How many concerts has each singer performed?",
            "List each singer along with the number of concerts they have performed.",
            "Show the name of each singer and the count of concerts they have participated in."
        ],
        "feedback": [
            "This variation is clear and directly addresses the query. It reads naturally and avoids technical jargon.",
            "Well-phrased, but it might be improved by specifying 'each' to emphasize individual counts.",
            "Accurate but could be more concise. It currently feels somewhat long-winded."
        ],
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "original_utterance": "List singer names and number of concerts for each singer."
    },
    {
        "init": [
            "How many countries are there in each continent?",
            "Could you list the number of countries per continent?",
            "Show me the continent IDs and names along with the count of countries in each."
        ],
        "final": [
            "How many countries are there per continent, including the continent ID?",
            "Could you list the number of countries per continent, along with the continent IDs?",
            "Show me the continent IDs and names along with the count of countries in each."
        ],
        "feedback": [
            "This variation captures the query's essence but should include the continent ID for completeness. Consider specifying that the count should be grouped by continent.",
            "Good phrasing and relevant, but could also mention the inclusion of the continent IDs for clarity.",
            "Accurate and includes all elements. No changes needed, it avoids technical jargon and retains the SQL query's intent well."
        ],
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "original_utterance": "How many countries does each continent have? List the continent id, continent name and the number of countries."
    },
    {
        "init": [
            "Show me the unique car models with a weight less than 3500 that are not from Ford Motor Company.",
            "What are the distinct car models that weigh under 3500 pounds and are not made by Ford Motor Company?",
            "Can you list all the different car models weighing less than 3500 pounds that are produced by manufacturers other than Ford Motor Company?"
        ],
        "final": [
            "Show me the distinct car models with a weight less than 3500 that are not from Ford Motor Company.",
            "What are the distinct car models that weigh under 3500 pounds and are not made by Ford Motor Company?",
            "Can you list all the different car models weighing less than 3500 pounds that are from manufacturers other than Ford Motor Company?"
        ],
        "feedback": [
            "This variation is clear but could benefit from explicitly stating it's about car models by using the term 'distinct'.",
            "Accurate phrasing and captures the SQL query's condition effectively. However, the use of 'distinct' and 'made by' clarifies it's about manufacturing.",
            "This phrasing is clear and precise but could be refined to avoid the phrase 'produced by manufacturers' to make it more conversational."
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "original_utterance": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?"
    },
    {
        "init": [
            "What languages are spoken only in one Republic?",
            "List the languages that are unique to a single Republic.",
            "Can you find the languages that are spoken in exactly one Republic?"
        ],
        "final": [
            "What languages are spoken in only one Republic?",
            "List the spoken languages that are unique to a single Republic.",
            "Can you find the languages that are spoken in exactly one Republic?"
        ],
        "feedback": [
            "This variation captures the intent but could be more precise. Mentioning 'spoken in only one Republic' explicitly will help clarify.",
            "Accurate; however, it could be improved by specifying that it is 'spoken' languages in Republics, not programming languages or other types.",
            "Clear and precise. It avoids technical jargon and stays true to the original query's intent."
        ],
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "original_utterance": "Which languages are spoken by only one country in republic governments?"
    },
    {
        "init": [
            "How many flights operated by United Airlines depart from AHD Airport?",
            "Count the number of flights by United Airlines that start from AHD Airport.",
            "Show the total number of United Airlines flights with AHD as their departure airport."
        ],
        "final": [
            "How many flights operated by United Airlines depart from AHD Airport?",
            "Count the number of flights by United Airlines that depart from AHD Airport.",
            "Show the total number of United Airlines flights departing from AHD Airport."
        ],
        "feedback": [
            "Clear and specific. It accurately captures the requirements of the SQL query. No changes needed.",
            "The phrasing is good but could be simplified. Use 'depart from' instead of 'start from' for more natural language flow.",
            "Accurate and detailed. However, avoid 'their' to simplify. Instead, use a more concise term."
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "original_utterance": "How many 'United Airlines' flights depart from Airport 'AHD'?"
    },
    {
        "init": [
            "List the singers who have songs with sales greater than 300,000.",
            "Show me the names of singers whose songs have sold more than 300,000 copies.",
            "Which singers have songs that have exceeded 300,000 in sales?"
        ],
        "final": [
            "List the singers who have songs with sales greater than 300,000.",
            "Show me the names of singers whose songs have sold more than 300,000 copies.",
            "Which singers have songs that have exceeded 300,000 in sales?"
        ],
        "feedback": [
            "This variation is clear and captures the intent well. It remains simple and understandable without technical jargon.",
            "The phrasing is good, but 'copies' could be added to specify units of sales. The phrase 'show me' is direct and user-friendly.",
            "The term 'exceeded' is precise. The variation is clear and accurately reflects the intent of the original SQL query."
        ],
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "original_utterance": "Show distinct names of singers that have songs with sales more than 300000."
    },
    {
        "init": [
            "Which airline has the most flights?",
            "Can you tell me the airline that operates the highest number of flights?",
            "Find the airline with the greatest number of flights."
        ],
        "final": [
            "Which airline has the most flights?",
            "Which airline operates the highest number of flights?",
            "Find the airline with the greatest number of flights."
        ],
        "feedback": [],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which airline has most number of flights?"
    },
    {
        "init": [
            "What is the most popular course based on student enrollments?",
            "Show me the course with the highest number of students enrolled.",
            "Find the course that the most students have signed up for."
        ],
        "final": [
            "What is the most popular course based on student enrollments?",
            "Show me the course with the largest student enrollment.",
            "Find the course that has the most student sign-ups."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query's purpose. It uses natural language and avoids technical terms. No major changes needed.",
            "This variation is precise but could benefit from a minor rephrase to improve readability. The term 'highest number of students enrolled' is somewhat verbose.",
            "This variation is concise and clear but might benefit from a slight rephrase to enhance fluidity. 'Signed up for' is casual but appropriate."
        ],
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What's the name of the course with most number of enrollments?"
    },
    {
        "init": [
            "How many concerts have been held at each stadium, and what are their names?",
            "List the number of concerts held at each stadium along with the stadium names.",
            "Can you provide the names of the stadiums along with the count of concerts held in each?"
        ],
        "final": [
            "How many concerts have been held at each stadium, and what are their names?",
            "List the number of concerts held at each stadium along with their names.",
            "Can you provide the names of the stadiums and the count of concerts held at each?"
        ],
        "feedback": [
            "This variation is clear and conveys the query well. It is natural and doesn't contain any unnecessary technical terms. No changes needed.",
            "Good phrasing and clear. The phrase 'along with the stadium names' might be redundant, but it's understandable. Consider modifying slightly for improved fluency.",
            "This variation is clear and concise. However, it uses 'held in each' which could be simplified. The phrase is a bit more complex than it needs to be."
        ],
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "original_utterance": "Show the stadium name and the number of concerts in each stadium."
    },
    {
        "init": [
            "What is the cost of the most recent treatment?",
            "Can you tell me the cost of the latest treatment?",
            "Find the cost of the treatment that was conducted most recently."
        ],
        "final": [
            "What is the cost of the most recent treatment?",
            "Can you tell me the cost of the latest treatment recorded?",
            "Find the cost of the treatment that was conducted most recently."
        ],
        "feedback": [
            "This variation is clear and correctly captures the intent of querying the most recent treatment cost. No changes needed.",
            "Well-phrased and precise. You may add 'recorded' to highlight the database context, but it is not crucial.",
            "Accurate and clear. Avoids technical jargon, making it user-friendly. No changes needed."
        ],
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "original_utterance": "How much does the most recent treatment cost?"
    },
    {
        "init": [
            "Which airlines have fewer than 200 flights?",
            "Show me the airlines with less than 200 scheduled flights.",
            "List the airlines that operate under 200 flights."
        ],
        "final": [
            "Which airlines have fewer than 200 scheduled flights?",
            "Show me the airlines with fewer than 200 scheduled flights.",
            "List the airlines that operate fewer than 200 flights."
        ],
        "feedback": [
            "This variation is clear and straightforward. No specific issues but could be more specific by mentioning that it's about scheduled flights.",
            "Good phrasing, specifying 'scheduled flights' adds clarity. However, using 'less' instead of 'fewer' is slightly incorrect grammatically since 'flights' is countable.",
            "Clear and concise. No major changes, but the term 'operate' is good to depict business context rather than just counting."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "original_utterance": "Find all airlines that have fewer than 200 flights."
    },
    {
        "init": [
            "List all nationalities that occur at least twice.",
            "What are the nationalities represented by at least two people?",
            "Show nationalities that have a count of two or more people."
        ],
        "final": [
            "List all nationalities that occur at least twice in the data.",
            "What are the nationalities represented by at least two people in the dataset?",
            "Show nationalities that have a count of two or more people in the dataset."
        ],
        "feedback": [
            "This variation is clear and accurately represents the SQL query's intent. It might benefit from specifying 'in the data.'",
            "Good phrasing, and it directly aligns with the query intent. It could be improved by specifying 'in the dataset.'",
            "Accurate and concise, but to improve clarity, you might specify that it's within the dataset being queried."
        ],
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "original_utterance": "What are the nationalities that are shared by at least two people?"
    },
    {
        "init": [
            "What is the average age of both losing and winning participants in matches?",
            "Can you provide the average ages of losers and winners in the matches?",
            "Find the average ages of both losers and winners from the matches."
        ],
        "final": [
            "What is the average age of both losing and winning participants from all matches?",
            "Can you provide the average ages of losers and winners from all matches?",
            "Find the average ages of both losers and winners from the matches."
        ],
        "feedback": [
            "This variation is clear and comprehensive. It captures the intent well, but it could specify 'from all matches' to avoid ambiguity.",
            "The phrasing is good, though slightly more specific phrasing could be used, such as 'from all matches,' to closely mimic the original query's intent.",
            "This is accurate but could be more explicit by mentioning 'from the matches' to make it perfectly clear."
        ],
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "original_utterance": "Find the average age of losers and winners of all matches."
    },
    {
        "init": [
            "How many flights land in airports located in either Aberdeen or Abilene?",
            "Can you give me the total number of flights arriving in Aberdeen or Abilene?",
            "What is the count of flights that have destinations in the cities of Aberdeen or Abilene?"
        ],
        "final": [
            "How many flights land in airports located in the cities of Aberdeen or Abilene?",
            "Can you show me the total number of flights arriving in Aberdeen or Abilene?",
            "What is the count of flights that have destinations in Aberdeen or Abilene?"
        ],
        "feedback": [
            "Clear and accurate, but could be a bit more conversational by mentioning 'cities' explicitly.",
            "Accurate, but the wording 'give me the total number' can be simplified to 'show the total number'.",
            "Precise and clear, although the phrase 'in the cities' is slightly redundant and could be more concise."
        ],
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "original_utterance": "Find the number of flights landing in the city of Aberdeen or Abilene."
    },
    {
        "init": [
            "Which museum has received the highest number of visits, and what is its name?",
            "Show me the name and ID of the museum with the most visits.",
            "Find the museum with the highest visit count and provide its name and ID."
        ],
        "final": [
            "Which museum has received the highest number of visits, and what is its name?",
            "Provide the name and ID of the museum with the most visits.",
            "Find the museum with the highest number of visits and provide its name and ID."
        ],
        "feedback": [
            "This variation is clear and directly interprets the SQL query's intent. It avoids technical jargon and is straightforward.",
            "This phrasing is good but could replace 'Show me' with 'Provide.' Also, clarify if it is the ID and name of the museum with the most visits to avoid ambiguity.",
            "Accurate and clear. No major changes needed. However, changing 'visit count' to 'number of visits' might improve readability."
        ],
        "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What are the id and name of the museum visited most times?"
    },
    {
        "init": [
            "Show me the titles of cartoons directed by Ben Jones or Brandon Vietti.",
            "Can you list the cartoon titles that were directed by either Ben Jones or Brandon Vietti?",
            "Find the titles of cartoons which have been directed by Ben Jones or Brandon Vietti."
        ],
        "final": [
            "What are the titles of cartoons directed by Ben Jones or Brandon Vietti?",
            "Can you show me the cartoon titles that were directed by either Ben Jones or Brandon Vietti?",
            "Find the titles of cartoons which have been directed by Ben Jones or Brandon Vietti."
        ],
        "feedback": [
            "This variation is clear and simple. However, 'Show me' can be replaced with a more precise term if needed.",
            "Good phrasing, but 'list' might be understood as a command rather than a request. Consider making it a bit more conversational.",
            "Accurate and concise. The phrase 'which have been directed' makes it clear and avoids SQL-specific jargon."
        ],
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "original_utterance": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"."
    },
    {
        "init": [
            "List the document names and template IDs where the document description contains the letter 'w'.",
            "Can you find documents with descriptions that have the letter 'w' and show their names and template IDs?",
            "Show me the names and template IDs of documents that include the letter 'w' in their descriptions."
        ],
        "final": [
            "List the document names and template IDs where the document description contains the letter 'w'.",
            "Can you show the names and template IDs of documents with descriptions that have the letter 'w'?",
            "Show me the document names and template IDs for documents that include the letter 'w' in their descriptions."
        ],
        "feedback": [
            "This variation is clear and specifies exactly what the SQL query is searching for. It's straightforward and aligned with the original query.",
            "This variation accurately conveys the query's intent but could be simplified slightly. The question format is engaging but can be made slightly more concise.",
            "Accurate and clear. Ensures users understand it\u2019s about documents with descriptions containing 'w'. The wording 'include' is a good alternative to 'contain'."
        ],
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "original_utterance": "What is the document name and template id for document with description with the letter 'w' in it?"
    },
    {
        "init": [
            "What is the average age of losers and winners in the matches?",
            "Can you show me the average ages of the losers and winners from the matches?",
            "Find the average ages of losing and winning players in matches."
        ],
        "final": [
            "What is the average age of losers and winners in the matches?",
            "Can you show me the average ages of the losers and winners in the matches?",
            "Find the average age of losing players and winning players in matches."
        ],
        "feedback": [
            "This variation is straightforward and clearly conveys the intent. No issues with SQL terms or jargon.",
            "The phrase 'show me' implies a display of data. It covers the query well but could benefit from specifying 'in the matches' for clarity, though technically not incorrect.",
            "Accurate and precise. It is clear and avoids unnecessary technical details, but consider mentioning 'average age' explicitly in both 'losing' and 'winning' players."
        ],
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "original_utterance": "Find the average age of losers and winners of all matches."
    },
    {
        "init": [
            "Find the names and treatment dates of dogs belonging to the least common breed.",
            "Show the names and treatment dates of dogs from the rarest breed.",
            "Which dogs from the least frequent breed have been treated, and on what dates?"
        ],
        "final": [
            "Find the names and treatment dates of dogs belonging to the least common breed.",
            "Show the names and treatment dates of dogs from the rarest breed.",
            "Which dogs from the least common breed have been treated, and on what dates?"
        ],
        "feedback": [
            "This variation is clear and precise. It captures the intent of finding information about the least common breed without using SQL jargon.",
            "This is well-worded and accurate. It specifies the 'rarest breed,' which is a good equivalent for 'least common breed'.",
            "This variation is also accurate. It combines both the treatment and breed frequency aspects well but could be simplified slightly for clarity."
        ],
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "original_utterance": "List the names of the dogs of the rarest breed and the treatment dates of them."
    },
    {
        "init": [
            "Find the IDs of students who do not own a cat.",
            "Which students do not have a cat based on their IDs?",
            "List the student IDs for those who don't have a cat."
        ],
        "final": [
            "Find the IDs of students who do not own a cat.",
            "Which students do not have a cat based on their IDs?",
            "List the student IDs for those who don't have a cat."
        ],
        "feedback": [
            "This variation is clear and directly aligns with the original query's intent.",
            "The phrasing is good, but it might be more consistent to specify 'the IDs of students who do not have a cat' instead of just 'students.'",
            "This variation works well and covers the original query's requirement. It avoids SQL jargon effectively."
        ],
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "original_utterance": "Find the id of students who do not have a cat pet."
    },
    {
        "init": [
            "List the names of visitors who have visited museums that opened before 2009 and also after 2011.",
            "Show me the names of visitors who have been to museums with opening years both before 2009 and after 2011.",
            "Which visitors have visited museums that opened before 2009 and also after 2011?"
        ],
        "final": [
            "List the names of visitors who have visited museums that opened before 2009 and also after 2011.",
            "Show me the names of visitors who have been to museums with opening years both before 2009 and after 2011.",
            "Which visitors have visited museums that opened before 2009 and also after 2011?"
        ],
        "feedback": [
            "The variation is clear and matches the query\u2019s intent. No major changes required.",
            "Accurate and well-phrased. No changes needed; it correctly conveys the intersection of the two conditions.",
            "Concise and precise. It could be slightly improved by explicitly stating the two conditions."
        ],
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "original_utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?"
    },
    {
        "init": [
            "Show the flight numbers for flights operated by United Airlines.",
            "Which flight numbers correspond to flights from United Airlines?",
            "List all flight numbers for flights that are run by United Airlines."
        ],
        "final": [
            "Show the flight numbers for flights operated by United Airlines.",
            "Which flight numbers are for flights by United Airlines?",
            "List all flight numbers for flights that are run by United Airlines."
        ],
        "feedback": [
            "This variation is clear and directly asks for the flight numbers, which aligns well with the SQL query. Good use of natural language.",
            "The phrasing 'correspond to' is accurate but slightly formal. It might be better simplified for easier understanding.",
            "Clear and accurately phrased. No need for changes, but it's good that it avoids SQL jargon and is intuitive."
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "original_utterance": "What are flight numbers of Airline \"United Airlines\"?"
    },
    {
        "init": [
            "List the names of all left-handed players sorted by their birth dates.",
            "Show me the first and last names of players who are left-handed, ordered by their birth dates.",
            "Can you provide the names of left-handed players in order of their birth dates?"
        ],
        "final": [
            "List the names of left-handed players sorted by their birth dates.",
            "Show me the first and last names of players who are left-handed, sorted by their birth dates.",
            "Can you provide the first and last names of left-handed players in order of their birth dates?"
        ],
        "feedback": [
            "The variation is accurate and clear. It could be slightly more concise by removing 'all' as it does not add to the meaning.",
            "This variation is clear and precise but could be more conversational by removing 'ordered by' and using a simpler phrase like 'sorted by'.",
            "The variation is concise and clear. However, it could be improved by specifying that both first and last names are required."
        ],
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "original_utterance": "List the first and last name of all players who are left / L hand in the order of birth date."
    },
    {
        "init": [
            "How many flights operated by United Airlines are destined for Aberdeen?",
            "Can you tell me the count of United Airlines flights that land in Aberdeen?",
            "Show me the total number of flights that United Airlines has to Aberdeen."
        ],
        "final": [
            "How many flights currently operated by United Airlines are destined for Aberdeen?",
            "Could you tell me the count of United Airlines flights destined for Aberdeen?",
            "Show me the total number of flights that United Airlines has headed for Aberdeen."
        ],
        "feedback": [
            "This variation is clear and accurate. No significant improvements needed, but consider specifying 'currently operated' if it fits the context better.",
            "Good phrasing, but it could be slightly more conversational by starting with 'Could you tell me'. Clarify 'landing in Aberdeen' with 'destined for' to match the query better.",
            "Clear and relevant. Consider using 'headed for' instead of 'to' for better natural language flow. Explicitly mention 'currently' if applicable."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "original_utterance": "How many United Airlines flights go to City 'Aberdeen'?"
    },
    {
        "init": [
            "Who teaches the Math course?",
            "Can you provide the name of the teacher for the Math course?",
            "Which teacher is assigned to the Math class?"
        ],
        "final": [
            "Who teaches the Math course?",
            "Can you tell me the name of the teacher for the Math course?",
            "Which teacher is currently assigned to the Math class?"
        ],
        "feedback": [
            "This variation is clear and concise. It correctly captures the intent of finding the teacher's name for the Math course.",
            "The phrasing is accurate but could be slightly more natural by changing 'provide the name' to simply 'tell me.'",
            "This phrasing is accurate and uses 'class' instead of 'course,' which is acceptable. However, it could be more precise by mentioning 'current teacher.'"
        ],
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "original_utterance": "Show the name of the teacher for the math course."
    },
    {
        "init": [
            "What is the birth date of the poker player with the lowest earnings?",
            "Can you find the birth date of the poker player who has made the least money?",
            "Show me the birth date of the poker player at the bottom of the earnings list."
        ],
        "final": [
            "What is the birth date of the poker player with the lowest earnings?",
            "Can you find the birth date of the poker player with the least earnings?",
            "Please provide the birth date of the poker player at the bottom of the earnings list."
        ],
        "feedback": [
            "The question accurately captures the SQL query's intent and is straightforward. It's easy to understand and aligns well with the query logic. No changes are needed.",
            "This variation is clear and precise, but the term 'made the least money' could potentially underscore the SQL sorting criterion 'Earnings ASC'. Consider rephrasing it to avoid any ambiguity.",
            "The phrase 'at the bottom of the earnings list' is a good descriptor. However, 'show me' could be rephrased for a smoother flow, and the focus on 'the birth date' should be more explicit."
        ],
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "original_utterance": "What is the birth date of the poker player with the lowest earnings?"
    },
    {
        "init": [
            "What is the average earnings of poker players who are taller than 200 cm?",
            "Provide the average earnings for poker players with a height greater than 200 centimeters.",
            "Calculate the mean earnings of poker players whose height exceeds 200 cm."
        ],
        "final": [
            "What is the average earnings of poker players who are taller than 200 cm?",
            "Provide the average earnings for poker players with a height more than 200 centimeters.",
            "Calculate the average earnings of poker players whose height exceeds 200 cm."
        ],
        "feedback": [
            "This variation is clear and accurate with no technical SQL jargon. It appropriately mentions 'average earnings' and 'taller than 200 cm.' No improvements needed.",
            "Phrasing is good but 'greater than' is slightly less natural than 'more than' or 'above' in everyday language. Consider using 'more than 200 centimeters' for better flow.",
            "Accurate and concise, but 'mean earnings' is less commonly used than 'average earnings' in casual language. Consider changing 'mean' to 'average' to improve naturalness."
        ],
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "original_utterance": "What is the average earnings of poker players with height higher than 200?"
    },
    {
        "init": [
            "Show me the names and ages of students who have dogs but not cats.",
            "Which students own dogs and do not have any cats? I need their names and ages.",
            "List the students with dogs and no cats, including their first name and age."
        ],
        "final": [
            "Show me the names and ages of students who have dogs but do not own any cats.",
            "Which students own dogs but have no cats? I need their names and ages.",
            "List the students with dogs but no cats, including their first name and age."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query's intention. However, using 'but not cats' could be simplified for clarity.",
            "The phrase 'do not have any cats' is well-phrased and explicit. Ensure that the intention of retrieving both names and ages is clear.",
            "This variation is precise and clear. It captures all key elements of the original query without unnecessary complexity."
        ],
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "original_utterance": "Find the first name and age of students who have a dog but do not have a cat as a pet."
    },
    {
        "init": [
            "List the cities in European countries where English is not an official language.",
            "Can you provide the names of cities from European countries that do not have English as an official language?",
            "Show me a list of cities in Europe where English isn't the official language."
        ],
        "final": [
            "List cities in European countries where English is not an official language.",
            "Can you provide cities from European countries that do not have English as an official language?",
            "Show me a list of cities in Europe where English is not an official language."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query, but specifying 'countries' explicitly after 'European' would enhance clarity.",
            "The phrase 'provide the names of cities' is clear, but it could be refined to avoid redundancy and improve flow.",
            "This variation is concise and easy to understand. However, 'isn't the official language' could be rephrased to 'is not an official language' for more formal clarity."
        ],
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "original_utterance": "Which cities are in European countries where English is not the official language?"
    },
    {
        "init": [
            "Which countries have more than two TV channels?",
            "List the IDs of TV channels in countries with more than two channels.",
            "Show me the IDs of all TV channels from countries that have more than two channels."
        ],
        "final": [
            "Which countries have more than two TV channel IDs?",
            "List the IDs of TV channels in countries with more than two channels.",
            "Show me the IDs of TV channels from countries that have more than two channels."
        ],
        "feedback": [
            "This variation accurately captures the intent but doesn't mention retrieving countries based on the IDs of TV channels, which improves clarity.",
            "Includes the concept of IDs and is direct. However, the phrasing could be smoother to improve natural language clarity.",
            "Clear and accurate, but 'all' could be redundant since we're specifying criteria. Removing 'all' makes it more concise without changing the meaning."
        ],
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "original_utterance": "find id of the tv channels that from the countries where have more than two tv channels."
    },
    {
        "init": [
            "What is the average age of dogs that have received treatments?",
            "Show me the average age of the dogs who have been treated.",
            "Calculate the average age of dogs that have undergone treatments."
        ],
        "final": [
            "What is the average age of dogs that have received treatments?",
            "Show me the average age of the dogs who have undergone treatments.",
            "Calculate the average age of dogs that have undergone treatments."
        ],
        "feedback": [
            "Clear and accurately matches the SQL query, no technical jargon included.",
            "Good phrasing, though 'been treated' could be more specific by mentioning treatments.",
            "Precise and captures the SQL query's intent. The term 'undergone treatments' is appropriate and clear."
        ],
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "original_utterance": "What is the average age of the dogs who have gone through any treatments?"
    },
    {
        "init": [
            "What is the combined population of all countries where English is not spoken?",
            "Show me the total population of countries that do not have English as a language.",
            "Find the sum of the population for countries where English is not an official language."
        ],
        "final": [
            "What is the combined population of all countries where English is not spoken?",
            "Show me the total population of countries that do not have English as an official language.",
            "Find the sum of the population for countries where English is not an official language."
        ],
        "feedback": [
            "This variation is clear and avoids technical terms. The phrase 'where English is not spoken' captures the SQL query intent well.",
            "Good phrasing, but it would be more precise to specify 'official' to avoid ambiguity about the language's status in the country.",
            "Straightforward and accurately reflects the query. Mentioning 'official language' is clear and aligns well with the SQL query intent."
        ],
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "original_utterance": "What is the total number of people living in the nations that do not use English?"
    },
    {
        "init": [
            "What is the model of the 4-cylinder car with the highest horsepower?",
            "Show me the name of the car model that has 4 cylinders and the greatest horsepower.",
            "Which 4-cylinder car model has the most horsepower?"
        ],
        "final": [
            "What is the model of the 4-cylinder car with the highest horsepower?",
            "Show me the model of the car that has 4 cylinders and the greatest horsepower.",
            "Which 4-cylinder car model has the most horsepower?"
        ],
        "feedback": [
            "This variation is clear but could be more specific about the intent by emphasizing the highest horsepower in the comparison. No further SQL-specific terminology needs removal.",
            "This phrasing is good, but 'name' could be changed to 'model' to better match common car terminology. Avoid SQL-specific terms like 'SHOW' which can appear ambiguous in natural language.",
            "This variation is concise and clearly communicates the intent. It avoids technical jargon and closely aligns with the original query's purpose."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_utterance": "For the cars with 4 cylinders, which model has the largest horsepower?"
    },
    {
        "init": [
            "What is the weight of the lightest car with 4 cylinders made in 1974?",
            "Show me the least heavy car from 1974 with 4 cylinders.",
            "Find the lightest car produced in 1974 that has 4 cylinders."
        ],
        "final": [
            "What is the weight of the lightest car with 4 cylinders made in 1974 that is currently available?",
            "Show me the lightest car from 1974 with 4 cylinders.",
            "Find the lightest car produced in 1974 that has 4 cylinders."
        ],
        "feedback": [
            "Clear and precise. However, adding 'lightest car available' can make it more specific to 'currently' available data.",
            "Good variation, but 'least heavy' can be changed to 'lightest' for more natural wording.",
            "Accurate and concise. No changes needed; effectively communicates the query's intent."
        ],
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "original_utterance": "What is the smallest weight of the car produced with 8 cylinders on 1974?"
    },
    {
        "init": [
            "Which shop has hired the most employees?",
            "Find the name of the shop with the highest number of hires.",
            "What is the name of the shop that has hired the most people?"
        ],
        "final": [
            "Which shop has hired the most employees to date?",
            "Find the name of the shop with the most hires.",
            "What is the name of the shop that has hired the most people so far?"
        ],
        "feedback": [
            "This variation gets straight to the point and is clear. However, it could specify whether it is about current or historical data.",
            "Accurate and clear. Although, 'highest number of hires' might be simplified to 'most hires' for better readability.",
            "Concise and clear. It is well-aligned with the original query's intent. No modifications are necessary, but you might add the time context if applicable."
        ],
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the name of the shop that is hiring the largest number of employees?"
    },
    {
        "init": [
            "Can you list the names of singers who have songs with sales over 300,000?",
            "Give me the names of singers whose songs have sold more than 300,000 units.",
            "Which singers have songs that have surpassed 300,000 in sales?"
        ],
        "final": [
            "Can you list the names of singers who have songs with sales more than 300,000?",
            "Give me the distinct names of singers whose songs have sold more than 300,000 units.",
            "Which singers' songs have surpassed 300,000 in sales?"
        ],
        "feedback": [
            "This variation is clear but could use a slight improvement to ensure clarity over what kind of sales metric. Changing 'over' to 'more than' might improve readability.",
            "This variation is accurately phrased but could mention 'distinct' to eliminate ambiguity about the duplicity of singer names in the result. The 'units' part is good for context.",
            "Accurate question. No changes needed, but a small tweak to remove 'have' might make it sound more natural and direct."
        ],
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "original_utterance": "Show distinct names of singers that have songs with sales more than 300000."
    },
    {
        "init": [
            "Show me the names of contestants that contain 'Al'.",
            "Which contestants have 'Al' in their names?",
            "Find all contestants whose names include 'Al'."
        ],
        "final": [
            "Show me the names of contestants that contain 'Al'.",
            "Which contestants have 'Al' in their names?",
            "Find all contestants whose names include 'Al'."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the query. It's straightforward and user-friendly.",
            "Good and concise phrasing. Adding 'contain' would make it more aligned with natural language and less formal.",
            "Accurate and understandable. The term 'include' is appropriate for natural language and effectively communicates the intent."
        ],
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%Al%\"",
        "original_utterance": "Return the names the contestants whose names contain the substring 'Al'."
    },
    {
        "init": [
            "How many flights go from Aberdeen to Ashley?",
            "Can you count the total flights that travel between Aberdeen and Ashley?",
            "What is the number of flights available from Aberdeen to Ashley?"
        ],
        "final": [
            "How many flights currently go from the airport in Aberdeen to the airport in Ashley?",
            "Can you count the total flights that travel from the airport in Aberdeen to the airport in Ashley?",
            "What is the number of flights available from the airport in Aberdeen to the airport in Ashley?"
        ],
        "feedback": [
            "This variation is clear and colloquial but could explicitly mention 'airports' to improve clarity.",
            "Good phrasing, but including the term 'airports' and 'currently' might enhance precision. Avoid phrasing that could imply round trips unless specified.",
            "Accurate and clear. Could include 'currently available' for better context, but it avoids direct SQL terminology, which is good."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "original_utterance": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?"
    },
    {
        "init": [
            "What breed of dog is the most common based on the number of entries?",
            "Can you tell me the breed name of the most frequently occurring dogs?",
            "Identify the dog breed with the highest number of dogs registered."
        ],
        "final": [
            "What is the most common dog breed based on the recorded data?",
            "Can you tell me the breed name of the most common dogs?",
            "Identify the dog breed with the highest number of entries."
        ],
        "feedback": [
            "This variation is clear but could be more precise by specifying that it is the most common breed based on recorded data.",
            "The phrasing is good, though 'most frequently occurring' could be simplified to 'most common' to enhance readability.",
            "This variation is precise and clear, but 'registered' might imply a formal registration, which is not stated in the query."
        ],
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the name of the breed with the most dogs?"
    },
    {
        "init": [
            "Who is the most recently employed conductor?",
            "Can you find the name of the conductor with the latest start date?",
            "Show me the conductor who was hired most recently."
        ],
        "final": [
            "Who is the conductor with the most recent year of work?",
            "Can you find the name of the conductor with the latest year of work?",
            "Show me the conductor who has worked most recently."
        ],
        "feedback": [
            "This variation is clear and concise, but the term 'employed' might imply more recent transactions, which might not be exactly accurate for 'Year_of_Work'.",
            "Good phrasing, although it uses 'start date,' which isn't an exact match for 'Year_of_Work.' Consider modifying to align more closely with 'Year_of_Work.'",
            "Accurate and clear. It directly correlates with the SQL query's intent, but 'hired' may not be the precise interpretation of 'Year_of_Work.'"
        ],
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "original_utterance": "List the name of the conductor with the most years of work."
    },
    {
        "init": [
            "Show me the IDs, roles, and first names of professionals who have performed at least two treatments.",
            "Which professionals have conducted two or more treatments? Please include their ID, role code, and first name.",
            "Provide details including IDs, role codes, and first names for professionals who have carried out at least 2 treatments."
        ],
        "final": [
            "Show me the IDs, roles, and first names of professionals who have performed at least two treatments.",
            "Which professionals have performed two or more treatments? Please include their ID, role code, and first name.",
            "Provide details including the IDs, role codes, and first names for professionals who have carried out at least 2 treatments."
        ],
        "feedback": [
            "Clear and accurate, though using 'IDs, roles, and first names' can be slightly more conversational.",
            "Good phrasing, though the use of 'conducted' might be replaced with a more common term like 'performed.' Ensure 'role code' is easy to understand for the user.",
            "Accurate and concise. Maybe consider a minor rephrase for 'details' to explicitly mention 'including' to connect it better with IDs etc."
        ],
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_utterance": "Which professionals have done at least two treatments? List the professional's id, role, and first name."
    },
    {
        "init": [
            "Which countries do not have a Republic government form and do not have English as a language?",
            "List the countries where the government form is not a Republic and English is not spoken.",
            "Find the codes of countries that are not Republics and do not use English as a language."
        ],
        "final": [
            "Which countries do not have a Republic government type and do not have English as a language?",
            "List the countries where the government is not a Republic and English is not used.",
            "Find the countries that are not Republics and do not use English as a language."
        ],
        "feedback": [
            "This sentence is clear and captures the intent well, but mentioning government 'type' might be more natural. The term 'do not have English as a language' is appropriate.",
            "This variation is clear, however, the word 'form' might be redundant. Consider replacing 'spoken' with a broader term like 'used' to cover all official uses of English.",
            "Accurately reflects the query but could be more naturally phrased. The word 'codes' may not be immediately understood by all users."
        ],
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "original_utterance": "What are the codes of the countries that do not speak English and whose government forms are not Republic?"
    },
    {
        "init": [
            "How many votes were cast in either New York or California?",
            "Can you tell me the total number of votes from New York and California?",
            "Count the votes that come from the states of New York and California."
        ],
        "final": [
            "How many votes were cast in total in either New York or California?",
            "Can you tell me the total count of votes from New York and California?",
            "Count the total number of votes that come from the states of New York and California."
        ],
        "feedback": [
            "Clear and concise. No changes needed, though it can mention it's a total count for clarity.",
            "Well-phrased but could add 'total count' to emphasize the aggregation.",
            "This variation is also accurate and clear but could mention that it is aggregating the count of votes explicitly."
        ],
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "original_utterance": "What are the number of votes from state 'NY' or 'CA'?"
    },
    {
        "init": [
            "Which nationality is the most common among the people?",
            "Find the most frequent nationality in the people dataset.",
            "What is the nationality of the highest number of people listed?"
        ],
        "final": [
            "Which is the most common nationality in the dataset?",
            "Find the most frequent nationality in the people dataset.",
            "Which nationality has the most number of people listed?"
        ],
        "feedback": [
            "This variation is clear and succinct but misses a reference to a database or dataset context. Specifying 'among the people' is somewhat redundant.",
            "This variation is mostly accurate but needs minor clarification, such as specifying 'in the people dataset,' to avoid ambiguity. It is well phrased in general.",
            "Accurate and explicit, but it could avoid the slightly awkward 'nationality of the highest number' phrasing. Consider rephrasing to make it more fluent."
        ],
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "original_utterance": "What is the most common nationality of people?"
    },
    {
        "init": [
            "Which car makers have more than three models listed, and what are their names and IDs?",
            "Show the names and IDs of car makers that have produced more than three different car models.",
            "Find the car makers with more than three models in the model list and display their names and IDs."
        ],
        "final": [
            "Which car makers have more than three models in the model list, and what are their names and IDs?",
            "Show the names and IDs of car makers that have produced more than three different car models in the model list.",
            "Find the car makers with more than three models listed in the model list and display their names and IDs."
        ],
        "feedback": [
            "The variation is clear and accurate but should specify that it needs the number of models in the context of the model list. Perhaps change 'listed' to 'in the model list'.",
            "This variation is well-phrased. Ensure it keeps the context of the car models being in a list. No major issues noted.",
            "The phrase 'in the model list' is helpful but might benefit from specifying the relationship with 'more than three models'. No technical terms used, which is good."
        ],
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_utterance": "Which makers designed more than 3 car models? List full name and the id."
    },
    {
        "init": [
            "How many cars have an acceleration greater than the car with the highest horsepower?",
            "Count the number of cars that accelerate faster than the car with the most horsepower.",
            "Find the number of cars with higher acceleration than the fastest car in terms of horsepower."
        ],
        "final": [
            "How many cars have a greater acceleration than the car with the highest horsepower?",
            "Count the number of cars that accelerate quicker than the car with the most horsepower.",
            "Find the number of cars with higher acceleration than the car with the highest horsepower."
        ],
        "feedback": [
            "Clear and captures the query accurately; however, 'acceleration greater' might be more natural than 'have an acceleration greater'.",
            "Good phrasing, but 'faster' might confuse users who equate 'faster' with higher speed rather than acceleration.",
            "This variation is accurate but 'fastest car in terms of horsepower' might confuse users because 'fastest' usually refers to speed not acceleration. Consider rephrasing for clarity."
        ],
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "original_utterance": "How many cars have a larger accelerate than the car with the largest horsepower?"
    },
    {
        "init": [
            "How many concerts took place in 2014 or 2015?",
            "What is the total number of concerts held in the years 2014 and 2015?",
            "Can you provide a count of concerts that happened in 2014 and 2015?"
        ],
        "final": [
            "How many concerts took place in 2014 or 2015?",
            "What is the number of concerts held in the years 2014 or 2015?",
            "Can you provide the count of concerts that happened in 2014 or 2015?"
        ],
        "feedback": [
            "This variation is accurate and clear. The phrase 'took place' is natural, making it easy to understand.",
            "Good phrasing, but 'total number' could be shortened to just 'number' for brevity. 'Held' is a suitable term but consider replacing 'and' with 'or' for precision.",
            "While 'and 2015' is easily understood, using 'or' rather than 'and' would improve accuracy. Additionally, removing 'a count of' would make it more concise."
        ],
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "original_utterance": "How many concerts are there in year 2014 or 2015?"
    },
    {
        "init": [
            "List the tournament names that have hosted more than 10 matches.",
            "Which tournaments have had more than 10 matches played?",
            "Find the names of tournaments where more than 10 matches have been held."
        ],
        "final": [
            "List the tournament names that have held more than 10 matches.",
            "Which tournaments have had at least 10 matches played in them?",
            "Find the names of tournaments where at least 10 matches have occurred."
        ],
        "feedback": [
            "This variation is clear and accurately translates the SQL query into natural language, but the phrase 'hosted more than 10 matches' could be slightly rephrased for natural flow.",
            "Good phrasing, but it could be improved by specifying that it's 'matches played in the tournament,' to make the context clearer.",
            "Accurate and concise, but the phrase 'more than 10 matches have been held' could be improved slightly for better clarity. Consider rephrasing to 'where at least 10 matches have occurred.'"
        ],
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "original_utterance": "Find the name of tourney that has more than 10 matches."
    },
    {
        "init": [
            "Who is the student that left most recently according to the records?",
            "Can you provide the name of the last student to leave?",
            "Which student was the last to exit according to the date they left?"
        ],
        "final": [
            "Who is the student that left the earliest according to the records?",
            "Can you provide the name of the earliest student to leave according to the records?",
            "Which student was the earliest to leave according to the date they left?"
        ],
        "feedback": [
            "This variation is clear, but the phrase 'left most recently' can be misinterpreted. It should state 'left the earliest'.",
            "This variation is good but could be slightly more precise. It should specify 'according to the records' to make it more consistent with SQL's 'ORDER BY'.",
            "Accurate but a bit verbose. 'Last to exit' might be clearer as 'earliest to leave according to records'."
        ],
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "original_utterance": "Who is the earliest graduate of the school? List the first name, middle name and last name."
    },
    {
        "init": [
            "Which airports are not used as either source or destination by any flights?",
            "Can you list the airports that have no flights departing from or arriving at them?",
            "Show me the airports that are neither origins nor destinations for any flights."
        ],
        "final": [
            "Which airports are not involved as a source or destination in any flights?",
            "Can you list the airports that are not involved in any flights?",
            "Show me the airports that are neither source nor target airports for any flights."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent. However, 'used as either source or destination' can be simplified for better clarity.",
            "The phrasing is good but could be slightly refined for readability. Instead of 'no flights departing from or arriving at them', 'not involved in any flights' might be more concise.",
            "This variation is clear and concise. However, using 'origins nor destinations' might be streamlined with simpler wording like 'source or target airports of any flights'."
        ],
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "original_utterance": "Find the name of airports which do not have any flight in and out."
    },
    {
        "init": [
            "What is the earliest transcript date available and its details?",
            "Show me the oldest transcript date and its associated details.",
            "Find the earliest transcript along with its details."
        ],
        "final": [
            "What is the earliest transcript date currently available and its details?",
            "Show me the earliest transcript date and its associated details currently on record.",
            "Find the earliest transcript along with its details."
        ],
        "feedback": [
            "Clear and concise, but adding 'currently available' can provide more context. Avoids direct SQL terminology which is good.",
            "Well-phrased, but 'oldest' could be perceived differently. Could specify 'transcript currently on record' for clarity.",
            "Accurate and concise. No major changes needed."
        ],
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "original_utterance": "When is the first transcript released? List the date and details."
    },
    {
        "init": [
            "Show me the top 3 distinct winners by age, including their names and ranks.",
            "List the top 3 unique winners from the matches table, sorted by age, along with their names and ranks.",
            "Can you provide the names and ranks of the top 3 distinct winners ordered by their age?"
        ],
        "final": [
            "Show me the names and ranks of the top 3 unique winners sorted by their age.",
            "List the top 3 unique winners by age, including their names and ranks.",
            "Can you provide the names and ranks of the top 3 unique winners ordered by age?"
        ],
        "feedback": [
            "This variation is clear and avoids SQL-specific terminology. It accurately represents the intent of the query. However, adding the element of sorting explicitly and mention of uniqueness can slightly enhance clarity.",
            "Using 'table' might introduce unnecessary complexity for non-technical users. 'List' is a good choice but refine to avoid schema-related terms like 'matches table'.",
            "The phrase 'ordered by their age' is useful but may benefit from simplifying 'distinct winners'. Make 'unique' or 'non-repeated' more conversational."
        ],
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "original_utterance": "Find the name and rank of the 3 youngest winners across all matches."
    },
    {
        "init": [
            "Which students do not have any friends?",
            "Show me the names of high school students who aren't listed as friends with anyone.",
            "Find the high schoolers who have not been befriended by anyone."
        ],
        "final": [
            "Which high school students do not have any friends?",
            "Show me the names of high school students who have no friends.",
            "Find the high schoolers who have not been befriended by any of their peers."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the intent of the query.",
            "The phrase 'aren't listed as friends with anyone' is somewhat ambiguous. It could be improved by specifying the context more clearly.",
            "This is accurate and concise, but it could be more explicitly stated that it\u2019s about friendships within the high school."
        ],
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "original_utterance": "Show names of all high school students who do not have any friends."
    },
    {
        "init": [
            "Who are the poker players with earnings greater than 300,000?",
            "List the names of poker players whose earnings exceed 300,000.",
            "Can you find the poker players who have made more than 300,000 in earnings?"
        ],
        "final": [
            "Who are the poker players with earnings greater than 300,000?",
            "List the names of poker players whose earnings exceed 300,000.",
            "Can you find the poker players who have made more than 300,000 in earnings?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the query's intent. It flows naturally and includes all the critical details.",
            "Good phrasing but could be more concise. The specification of 'names' ensures clarity, and the term 'exceed' is a good choice.",
            "Accurate and concise. No changes needed, it clearly asks for players with earnings over 300,000 without SQL-specific terminology."
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "original_utterance": "What are the names of poker players whose earnings is higher than 300000?"
    },
    {
        "init": [
            "Which museum has the highest number of staff?",
            "Show me the museum with the most staff members.",
            "Find the museum with the maximum number of staff."
        ],
        "final": [
            "Which museum currently has the highest number of staff?",
            "Show me the museum with the most staff members currently.",
            "Find the museum with the highest number of staff at present."
        ],
        "feedback": [
            "This variation is clear and concise but could benefit from explicitly mentioning that it is a single museum being queried for.",
            "Good phrasing. It clearly states what is needed but could specify 'currently' to indicate the data is up-to-date.",
            "Accurate and easy to understand. It avoids technical SQL terms and clearly asks for the museum with the most staff."
        ],
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "original_utterance": "Find the id and name of the museum that has the most staff members?"
    },
    {
        "init": [
            "Find the student who registered the earliest, including their first, middle, and last names.",
            "Show me the full name of the first student to register.",
            "Who was the earliest registered student? Provide their complete name."
        ],
        "final": [
            "Find the student who registered the earliest, including their full name.",
            "Show me the full name of the first student to register.",
            "Who was the earliest registered student? Provide their full name."
        ],
        "feedback": [
            "This variation is clear and well-phrased. It avoids any SQL-specific terminology and clearly states which fields are required. No major changes are needed, but it could be streamlined by specifying 'full name'.",
            "This phrasing is accurate and concise. It asks for the full name and clearly specifies the earliest registered student. No changes needed.",
            "Good phrasing and clear request. It avoids SQL-specific terms and is user-friendly. Including 'complete name' is a little redundant as 'full name' is more standard."
        ],
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "original_utterance": "Who is the first student to register? List the first name, middle name and last name."
    },
    {
        "init": [
            "Show me the pet IDs for students with the last name 'Smith'.",
            "Can you find the pet IDs of the students whose last name is 'Smith'?",
            "Retrieve the identifiers for pets owned by students called 'Smith'."
        ],
        "final": [
            "Show me the pet IDs for students with the last name 'Smith'.",
            "Can you find the pet IDs of the students whose last name is 'Smith'?",
            "Retrieve the pet IDs for students whose last name is 'Smith'."
        ],
        "feedback": [
            "This variation is clear and concise. It accurately matches the SQL query without using technical terms.",
            "The term 'find' is good, but the sentence could be more precise about returning pet IDs. Also, the phrasing 'whose last name is' is slightly more natural than directly quoting the name 'Smith'.",
            "The term 'identifiers' is slightly more formal than 'IDs' but still clear. 'Called Smith' is natural, but consider just using 'last name Smith' for clarity."
        ],
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "original_utterance": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019."
    },
    {
        "init": [
            "Find the major and age of students who do not own a cat.",
            "Show the major and age of students who don't have cats as pets.",
            "Get the major and age of students who are not cat owners."
        ],
        "final": [
            "Find the major and age of students who do not own a cat.",
            "Show the major and age of students who do not have cats as pets.",
            "Get the major and age of students who are not cat owners."
        ],
        "feedback": [
            "This variation is clear and effectively conveys the query's intent. No significant improvements needed.",
            "Good phrasing, but the use of 'don't' is informal. Consider changing it to 'do not' for consistency with the other variations.",
            "Accurate and precise. However, specifying 'students' directly might enhance clarity compared to just saying 'students who are not cat owners.'"
        ],
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "original_utterance": "Find the major and age of students who do not have a cat pet."
    },
    {
        "init": [
            "How many dogs are younger than the average age?",
            "Count the number of dogs that are below the average age.",
            "Can you tell me how many dogs have an age less than the average age?"
        ],
        "final": [
            "How many dogs are younger than the average age?",
            "Count the number of dogs that are below the average age.",
            "How many dogs have an age less than the average age?"
        ],
        "feedback": [
            "Clear and straightforward. No changes needed, it captures the intended query perfectly.",
            "Well structured but could be more conversational by including 'there are' to enhance natural flow.",
            "Good phrasing but a more concise and conversational phrasing could enhance it by removing 'can you tell me'."
        ],
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "original_utterance": "How many dogs have an age below the average?"
    },
    {
        "init": [
            "Which three countries have the smallest populations?",
            "List the top three least populated countries.",
            "What are the names of the three countries with the lowest populations?"
        ],
        "final": [
            "Which three countries have the smallest populations?",
            "List the three countries with the least populations.",
            "What are the names of the three countries with the lowest populations?"
        ],
        "feedback": [],
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "original_utterance": "What are the names of the nations with the 3 lowest populations?"
    },
    {
        "init": [
            "Show the names of students in grades higher than 5 who have at least two friends.",
            "Which students in grades above 5 have two or more friends?",
            "List the students from grades greater than 5 who have a minimum of two friends."
        ],
        "final": [
            "Show the names of students in grades higher than 5 who have at least two friends.",
            "List the names of students in grades above 5 who have two or more friends.",
            "Which students from grades greater than 5 have at least two friends?"
        ],
        "feedback": [
            "This variation clearly captures the query's intent and avoids technical jargon. It directly asks for students' names, which is appropriate.",
            "The phrasing is good and concise. Ensure the question is clear about listing student names, not just identifying students.",
            "The expression 'a minimum of two friends' is clear and avoids SQL-specific terms like 'HAVING count(*)'. However, specifying 'names' would add clarity."
        ],
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_utterance": "Show the names of students who have a grade higher than 5 and have at least 2 friends."
    },
    {
        "init": [
            "List the full names of students enrolled in Bachelor degree programs.",
            "Can you provide the names of all students pursuing a Bachelor's degree?",
            "Show the names, including first, middle, and last names, of students in Bachelor degree programs."
        ],
        "final": [
            "List the full names, including first, middle, and last names, of students enrolled in Bachelor degree programs.",
            "Can you provide the first name, middle name, and last name of all students pursuing a Bachelor's degree?",
            "Show the names, including first, middle, and last names, of students in Bachelor degree programs."
        ],
        "feedback": [
            "This variation is clear but could specify that it includes first, middle, and last names.",
            "Good phrasing. It captures the intent well, but explicitly saying 'first name, middle name, and last name' would make it more precise.",
            "This variation is accurate and clear. It captures all elements specified in the SQL query."
        ],
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "original_utterance": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name."
    },
    {
        "init": [
            "What is the most common car model in the CAR_NAMES table?",
            "Can you show me the car model that appears the most frequently?",
            "Find the car model that is listed the most times."
        ],
        "final": [
            "What is the most common car model listed?",
            "Can you show me which car model appears the most?",
            "Find the car model that is listed the most times."
        ],
        "feedback": [
            "This variation is accurate but directly references the table 'CAR_NAMES'. Removing direct SQL-related elements could make it more user-friendly.",
            "Clear and accurate, but to make it more precise, avoiding general phrasing like 'most frequently' may enhance clarity.",
            "Brief and to the point. It avoids direct SQL terms and is intuitive."
        ],
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_utterance": "Which model has the most version(make) of cars?"
    },
    {
        "init": [
            "How many courses has each teacher arranged?",
            "Show the number of courses organized by each teacher.",
            "List each teacher's name along with the count of courses they have arranged."
        ],
        "final": [
            "How many courses has each teacher arranged?",
            "Show the number of courses each teacher has arranged.",
            "List each teacher's name along with the count of courses they arranged."
        ],
        "feedback": [
            "This variation is clear and accurate; no significant changes needed. It captures the intent well.",
            "This phrasing is precise but could be improved by making it explicit that the count is for individual teachers, avoiding the word 'organized,' which can be interpreted in multiple ways.",
            "This variation is detailed and clear but could be slightly condensed to maintain brevity. It accurately reflects the query's intent."
        ],
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "original_utterance": "Show names of teachers and the number of courses they teach."
    },
    {
        "init": [
            "What is the highest and lowest share value from performances where the type is not 'Live final'?",
            "Can you tell me the maximum and minimum share from the performance data excluding 'Live final' types?",
            "Find the max and min share values for performances that are not of type 'Live final'."
        ],
        "final": [
            "What is the highest and lowest share value from performances where the type is not 'Live final'?",
            "Can you tell me the maximum and minimum share values for performances that are not 'Live final'?",
            "Find the highest and lowest share values for performances excluding those of the type 'Live final'."
        ],
        "feedback": [
            "This variation is clear and precise. It avoids technical jargon and directly addresses the query's intent.",
            "Though it's accurate, using 'the performance data' adds unnecessary phrases. The term 'excluding' is also clear but could be more natural.",
            "Using 'max' and 'min' aligns directly with the SQL terms but should be made more conversational. Also, 'type' could be more contextualized."
        ],
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "original_utterance": "What are the maximum and minimum share of performances whose type is not \"Live final\"."
    },
    {
        "init": [
            "Which countries have more than 50 players registered?",
            "Show me the country codes for countries with player counts exceeding 50.",
            "List all countries that have more than 50 players."
        ],
        "final": [
            "Which countries have more than 50 players registered?",
            "Show me the countries with more than 50 players.",
            "List all countries that have more than 50 players, including their country codes."
        ],
        "feedback": [
            "This variation is clear and directly represents the query's intent. No changes needed, but could consider explicitly specifying 'country codes' to align better with the response format.",
            "Accurate and detailed, though the phrase 'player counts' might be redundant. Also, avoid SQL-related terminology like 'country codes' unless necessary for clarity.",
            "Accurate and concise. Could be improved by specifying 'country codes' to remove any potential ambiguity."
        ],
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "original_utterance": "Find the codes of countries that have more than 50 players."
    },
    {
        "init": [
            "What region is Kabul located in?",
            "Can you provide the region of the country where Kabul is situated?",
            "Find the region of the country that includes the city of Kabul."
        ],
        "final": [
            "What region is Kabul located in?",
            "Can you provide the region where Kabul is situated?",
            "Show the region of the country that includes Kabul."
        ],
        "feedback": [
            "This variation is clear and concise. It directly asks for the region corresponding to Kabul, making it suitable for generating the SQL query.",
            "The phrase 'country where Kabul is situated' is a bit verbose. Consider simplifying to make it more natural.",
            "The phrase 'includes the city of Kabul' could be more concise. Also, 'find' might be replaced with 'show' for improved clarity."
        ],
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "original_utterance": "Which region is the city Kabul located in?"
    },
    {
        "init": [
            "Which year had the most matches?",
            "In which year were the highest number of matches played?",
            "What year saw the greatest number of matches played?"
        ],
        "final": [
            "Which year had the most matches?",
            "In which year were the most matches played?",
            "What year saw the greatest number of matches played?"
        ],
        "feedback": [
            "This variation is clear and straightforward. It correctly conveys the intent of finding the year with the most matches.",
            "Good phrasing, but it could be slightly improved for clarity by rephrasing 'highest number of matches' to 'most matches played'.",
            "Accurate and concise. It avoids technical SQL terms and provides a natural flow. No changes needed."
        ],
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Find the year that has the most number of matches."
    },
    {
        "init": [
            "List all car makers along with their ID and the number of car models they have.",
            "Can you provide the number of models made by each car manufacturer along with their names and IDs?",
            "Show me the names, IDs, and count of models for each car maker."
        ],
        "final": [
            "List all car makers along with their IDs and the number of models they have.",
            "Can you provide the number of models made by each car manufacturer along with their names and IDs?",
            "Show me the names, IDs, and the number of models for each car maker."
        ],
        "feedback": [
            "This variation accurately captures the essence of the SQL query. It avoids technical jargon but could be slightly more concise.",
            "The phrasing is clear and captures the query's intent well. Make sure to use 'manufacturers' consistently if that is the preferred terminology.",
            "Concise and clear. The phrase 'count of models' could be rephrased to 'number of models' for better clarity."
        ],
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "original_utterance": "How many models does each car maker produce? List maker full name, id and the number."
    },
    {
        "init": [
            "Which language is spoken in the most number of countries?",
            "What is the most commonly spoken language across all countries?",
            "Find the language that appears the most frequently in all listed countries."
        ],
        "final": [
            "Which language is listed in the highest number of countries?",
            "What is the most frequently listed language across all countries?",
            "Find the language that appears the most frequently in the dataset of countries."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the query's purpose. However, the term 'spoken' might imply actual language usage rather than just its presence in the dataset. Consider using 'listed' instead.",
            "Good phrasing, but 'commonly spoken' might suggest everyday use rather than the number of occurrences in a list. Using a phrase like 'most frequently listed language' could improve clarity.",
            "Accurate and concise. However, 'listed countries' might be redundant. Refine it for better flow by saying 'Find the language that appears the most frequently in the dataset.'"
        ],
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which language is spoken by the largest number of countries?"
    },
    {
        "init": [
            "Show the names and membership levels of visitors with a membership level above 4, sorted by age in descending order.",
            "List visitors who have a membership level greater than 4, including their names and levels, ordered by age from oldest to youngest.",
            "Can you provide the names and membership levels of visitors whose membership level exceeds 4, sorted by their age in descending order?"
        ],
        "final": [
            "Show the names and membership levels of visitors with a membership level above 4, sorted by age from oldest first.",
            "List visitors who have a membership level greater than 4, ordered by age from oldest to youngest.",
            "Can you provide the names and membership levels of visitors whose membership level exceeds 4, sorted by age from oldest first?"
        ],
        "feedback": [
            "This variation is clear but mentions 'sorted by age in descending order,' which might not be immediately obvious. Adding 'oldest first' could help.",
            "Good and detailed variation. Explicitly stating 'oldest to youngest' makes it clear, though removing redundant information like 'including their names and levels' could make it more concise.",
            "Accurate and formal. The phrase 'sorted by their age in descending order' is precise but could be shortened to 'sorted by age from oldest first' to make it more concise and clear."
        ],
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "original_utterance": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young."
    },
    {
        "init": [
            "Which country has the most official languages?",
            "Identify the country with the highest number of spoken languages.",
            "Find the country that is associated with the greatest number of languages."
        ],
        "final": [
            "Which country has the most official languages?",
            "Identify the country with the highest number of recorded languages.",
            "Find the country that is associated with the greatest number of recorded languages."
        ],
        "feedback": [],
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "original_utterance": "What is name of the country that speaks the largest number of languages?"
    },
    {
        "init": [
            "List the names and genders of students who have more than one pet.",
            "Show me the first names and genders of students owning multiple pets.",
            "Which students have multiple pets, and what are their names and genders?"
        ],
        "final": [
            "List the names and genders of students who have more than one pet.",
            "Show me the names and genders of students with multiple pets.",
            "Which students have multiple pets, and what are their names and genders?"
        ],
        "feedback": [
            "This variation is clear and aligns well with the SQL query. No technical jargon is present, making it user-friendly.",
            "Good phrasing, but specifying 'first names' might be redundant unless the naming convention differentiates between first and other names in the schema.",
            "Accurate and concise. The use of 'which students' makes it engaging. However, 'have' better suits the use instead of 'owning' to match common language usage."
        ],
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "original_utterance": "Find the first name and gender of student who have more than one pet."
    },
    {
        "init": [
            "What is the total surface area of countries in Asia and Europe?",
            "Can you calculate the sum of the surface areas of countries located in Asia or Europe?",
            "Find the combined surface area of all countries that are in either Asia or Europe."
        ],
        "final": [
            "What is the total surface area of countries in Asia and Europe?",
            "Can you calculate the sum of the surface areas of countries in Asia or Europe?",
            "Find the combined surface area of all countries in Asia or Europe."
        ],
        "feedback": [
            "Clear and precise. It accurately captures the total surface area covering Asia and Europe.",
            "Highly accurate but could be slightly more concise. Removing the word 'located' may improve naturalness.",
            "Effective, but specifying 'either' may be redundant given the clarity of 'Asia or Europe'. Consider simplification."
        ],
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "original_utterance": "What is the total surface area of the continents Asia and Europe?"
    },
    {
        "init": [
            "Find the template IDs of all templates with the description 'Presentation'.",
            "What are the IDs for templates classified under the 'Presentation' description?",
            "List all template IDs that have a type description of 'Presentation'."
        ],
        "final": [
            "Find the template IDs of all templates with the description 'Presentation'.",
            "What are the IDs for templates with the description 'Presentation'?",
            "List all template IDs for templates described as 'Presentation'."
        ],
        "feedback": [
            "This variation is clear and direct, accurately reflecting the intent of the query. No references to specific tables or schema elements are present.",
            "This is a good variation but could be more concise by removing the unnecessary phrase 'classified under'.",
            "This variation is accurate and clear but could be rephrased for more natural language flow without changing the intent."
        ],
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "original_utterance": "What are the template ids with template type description \"Presentation\"."
    },
    {
        "init": [
            "What course has the highest number of enrollments according to the transcript data?",
            "Can you show me the course ID with the most students enrolled from the transcripts?",
            "Which course appears most frequently in the transcripts?"
        ],
        "final": [
            "What course has the highest number of enrollments according to the transcript data?",
            "Can you show me the course with the most students enrolled from the transcripts?",
            "Which course appears most frequently in the transcripts?"
        ],
        "feedback": [
            "This variation captures the overall intent well. It's clear but using 'enrollments' instead of 'students' could better match the session data derived from the table name.",
            "Good phrasing but specifying 'course ID' makes it more technical than necessary. Consider using 'course' instead to make it more natural.",
            "This is concise and accurately represents the query. No SQL-specific terms or areas needing improvement were found."
        ],
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id."
    },
    {
        "init": [
            "Show me the names of properties that are either houses or apartments with more than one room.",
            "Can you list the property names for houses and apartments that have more than one room?",
            "I need the names of properties that are classified as houses or are apartments with at least two rooms."
        ],
        "final": [
            "Show me the names of properties that are either houses or apartments with more than one room.",
            "Can you list the property names for houses and apartments that have more than one room?",
            "I need the names of properties that are classified as houses or are apartments with at least two rooms."
        ],
        "feedback": [
            "This variation clearly represents the query's intent but could use 'apartments with more than one room' for better specificity.",
            "It's clear but 'property names for houses and apartments' could be misconstrued to mean all apartments, not just those with more than one room. Adding 'with more than one room' after 'apartments' clarifies this.",
            "Accurate and precise. It avoids technical jargon and conveys the SQL logic in natural language."
        ],
        "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "original_utterance": "What are the names of properties that are either houses or apartments with more than 1 room?"
    },
    {
        "init": [
            "List all flight numbers departing from airports located in Aberdeen.",
            "Provide the flight numbers for flights that take off from Aberdeen.",
            "Show me the flight numbers of planes that depart from the city of Aberdeen."
        ],
        "final": [
            "List all flight numbers departing from Aberdeen.",
            "Provide the flight numbers for flights departing from Aberdeen.",
            "Show me the flight numbers of flights departing from Aberdeen."
        ],
        "feedback": [
            "This variation accurately captures the intent but could be more precise by clarifying 'airports located in Aberdeen' to just the city 'Aberdeen.'",
            "Good phrasing, but mentioning the exact nature of the departure city would add clarity. Avoid passive voice for brevity.",
            "Accurate and clear, but could be made less verbose. 'Planes' can be omitted as 'flight numbers' imply this."
        ],
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "What are flight numbers of flights departing from City \"Aberdeen \"?"
    },
    {
        "init": [
            "How many car makers are there in France?",
            "Can you count the number of car manufacturers located in France?",
            "Get the total number of car makers based in France."
        ],
        "final": [
            "How many car makers are located in France?",
            "Can you count the number of car manufacturers located in France?",
            "Get the total number of car makers based in France."
        ],
        "feedback": [
            "Clear and concise, but could benefit from explicitly mentioning 'located in' for precision.",
            "Excellent phrasing. It accurately captures the intent of the query and avoids SQL-specific terms.",
            "Also accurate and clear. Avoids any use of SQL-specific jargon."
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "original_utterance": "How many car makers are there in france?"
    },
    {
        "init": [
            "Show me the first name, last name, and email address of owners whose state contains 'North'.",
            "Can you provide the names and email addresses of owners living in states with 'North' in the name?",
            "List the first name, last name, and email of owners from states that include 'North' in their names."
        ],
        "final": [
            "Show me the first name, last name, and email address of owners whose state includes 'North'.",
            "Can you give me the names and email addresses of owners from states with 'North' in the name?",
            "List the first name, last name, and email of owners from states that include 'North' in their names."
        ],
        "feedback": [
            "Clear and accurate, but 'contains' might be simplified to 'includes' for better readability.",
            "Well-phrased and clear, but it could be more concise. Consider removing redundant words like 'provide' and 'living in states'.",
            "Accurate and concise. It captures the intent well without any unnecessary jargon."
        ],
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "original_utterance": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email."
    },
    {
        "init": [
            "Which cities have more than one employee younger than 30?",
            "Can you list the cities where the number of employees under 30 exceeds one?",
            "Find the cities that have more than one employee aged below 30."
        ],
        "final": [
            "Which cities have more than one employee younger than 30?",
            "Can you list the cities where the number of working employees under 30 is greater than one?",
            "Find the cities that have more than one employee aged under 30."
        ],
        "feedback": [
            "This variation is clear and accurately represents the SQL query's intent. It appropriately avoids technical jargon.",
            "Well-phrased but could be slightly clearer by specifying 'working' employees. 'Exceeds one' is clear, but replacing it with 'is greater than' might align better with natural language.",
            "Accurate and concise. However, the word 'below' can be replaced with 'under' for more natural phrasing."
        ],
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_utterance": "Which cities do more than one employee under age 30 come from?"
    },
    {
        "init": [
            "Which owner's last name belongs to the oldest dog?",
            "Can you tell me the last name of the owner who has the oldest dog?",
            "Find the last name of the owner of the dog with the maximum age."
        ],
        "final": [
            "Which owner's last name currently belongs to the oldest dog?",
            "Can you tell me the last name of the owner with the oldest dog?",
            "Find the last name of the owner of the oldest dog."
        ],
        "feedback": [
            "This variation is clear but could be more specific by mentioning 'currently belongs to'.",
            "Good phrasing, but it could avoid specifying 'who has,' which could be rephrased to sound more natural.",
            "Accurate, but the term 'maximum age' could be simplified to 'oldest' for better natural language flow."
        ],
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "original_utterance": "List the last name of the owner owning the youngest dog."
    },
    {
        "init": [
            "Which singers do not have any songs in the database?",
            "Can you list the singers without any songs?",
            "Show the names of singers who don't have songs."
        ],
        "final": [
            "Which singers do not have any songs listed in the database?",
            "Can you list the singers who do not have any songs?",
            "Show the names of the singers who don't have any songs."
        ],
        "feedback": [
            "This variation is clear and accurately represents the query's intent. No significant improvements are needed other than maybe to enhance readability.",
            "This phrasing is straightforward and correct. It would benefit from adding 'any' to make it more specific.",
            "This variation is both concise and clear. The use of 'don't have songs' is informal but acceptable for readability."
        ],
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "original_utterance": "List the name of singers that do not have any song."
    },
    {
        "init": [
            "Show me the names of singers born in 1948 or 1949.",
            "Can you list singers who were born in either 1948 or 1949?",
            "Find the names of singers whose birth years are 1948 or 1949."
        ],
        "final": [
            "Show me the names of singers born in 1948 or 1949.",
            "Can you list singers born in 1948 or 1949?",
            "Find the names of singers born in 1948 or 1949."
        ],
        "feedback": [
            "Clear and accurate. Highlights the specified birth years effectively.",
            "Good phrasing but the word 'either' might slightly overcomplicate the request. Simplifying it would improve clarity.",
            "Precise and concise, but 'whose birth years are' is a bit formal. It might be improved by using simpler language."
        ],
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "original_utterance": "Show the name of singers whose birth year is either 1948 or 1949?"
    },
    {
        "init": [
            "How many battles did not involve any ships with a tonnage of 225?",
            "What is the count of battles where no ships weighing 225 tons were involved?",
            "Can you tell me the number of battles that excluded ships of 225 tons?"
        ],
        "final": [
            "How many battles did not involve any ships with a tonnage of 225?",
            "What is the count of battles where no ships weighing 225 tons were involved?",
            "Can you tell me the number of battles without ships of 225 tons?"
        ],
        "feedback": [
            "This variation is clear and straightforward. It accurately reflects the SQL query but could explicitly state that 'involved any ships' refers specifically to those with a tonnage of 225.",
            "This variation is concise and accurate. The phrase 'ships weighing 225 tons' is a good natural language translation for 'tonnage = 225'. No significant changes needed.",
            "This variation is also clear, but the word 'excluded' might be overly complex for some users. Simplifying it to 'without' might make the query more user-friendly."
        ],
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "original_utterance": "How many battles did not lose any ship with tonnage '225'?"
    },
    {
        "init": [
            "List the countries that have more than three car makers or have a car model called 'fiat'.",
            "Which countries either have more than three car manufacturers or produce a model named 'fiat'?",
            "Show me the countries with over three car makers as well as those that manufacture a car model called 'fiat'."
        ],
        "final": [
            "List the countries that have greater than three car makers or have a car model called 'fiat'.",
            "Which countries either have more than three car manufacturers or produce a car model named 'fiat'?",
            "Show me the countries that have over three car makers or manufacture a car model called 'fiat'."
        ],
        "feedback": [
            "This variation is clear, but the term 'more than' could be replaced by the more explicit phrase 'greater than three.' It effectively covers the intent of the SQL query.",
            "Good variation, but it might improve clarity by specifying 'car model named 'fiat'' instead of just 'model named 'fiat.''",
            "Accurate and comprehensive, but it might be cleaner to break down the conditions into two separate clauses joined by 'or' for better readability."
        ],
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "original_utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?"
    },
    {
        "init": [
            "Who is currently the highest-earning poker player and what is their money rank?",
            "Can you show me the money rank of the poker player with the highest earnings?",
            "Find the money rank of the poker player who has earned the most."
        ],
        "final": [
            "What is the money rank of the highest-earning poker player?",
            "What is the money rank of the poker player with the highest earnings?",
            "Find the money rank of the poker player who has earned the most."
        ],
        "feedback": [
            "This variation is clear but explicitly asking for the money rank should be more prominent rather than hidden in the larger question of highest-earning.",
            "Good phrasing, but it can be improved for a more natural flow by removing redundant words like 'show me' and 'can you'.",
            "Accurate and concise. Encompasses the SQL intent perfectly and in a natural way."
        ],
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "original_utterance": "What is the money rank of the poker player with the highest earnings?"
    },
    {
        "init": [
            "List the orchestras that do not have any performances.",
            "Which orchestras have not performed?",
            "Show me all orchestras that are not listed in any performances."
        ],
        "final": [
            "List the orchestras that do not have any performances.",
            "Which orchestras have not yet performed?",
            "Show me all orchestras that have not been part of any performances."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intention of finding orchestras without performances.",
            "Good phrasing but could be slightly more precise by specifying 'yet' to imply no past performances.",
            "Clear and accurate. It would be better to avoid the word 'listed' as it could sound more technical."
        ],
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "original_utterance": "List the names of orchestras that have no performance."
    },
    {
        "init": [
            "Show me the stadiums that hosted concerts in both 2014 and 2015.",
            "Which stadiums had concerts in both the years 2014 and 2015?",
            "Find the stadium names and locations that held concerts in the years 2014 and 2015."
        ],
        "final": [
            "Show me the stadiums and their locations that hosted concerts in both 2014 and 2015.",
            "Which stadiums and their locations had concerts in both the years 2014 and 2015?",
            "Find the stadium names and locations that held concerts in the years 2014 and 2015."
        ],
        "feedback": [
            "This variation is clear and accurately represents the SQL query's intent. No SQL-specific terms were used, making it accessible to non-technical users.",
            "The phrasing 'Which stadiums had concerts' is good, but mentioning the locations explicitly would align better with the query, as 'stadium' often implies a name but can be more comprehensive.",
            "This variation accurately reflects the SQL query's focus on fetching both names and locations, maintaining clarity and directness while avoiding technical terms."
        ],
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "original_utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."
    },
    {
        "init": [
            "How many flights operated by United Airlines are heading to ASY airport?",
            "Can you count the number of United Airlines flights that have ASY as their destination?",
            "Find the total number of flights from United Airlines arriving at the ASY airport."
        ],
        "final": [
            "How many flights operated by United Airlines are heading to the ASY airport?",
            "How many United Airlines flights have ASY as their destination?",
            "Find the total number of United Airlines flights arriving at the ASY airport."
        ],
        "feedback": [
            "This variation is clear but should specify 'flights heading to ASY' for better precision. Mentioning 'operated' is a good practice as it gives context to United Airlines' role.",
            "A well-phrased variation, but 'count the number of' can be simplified to just 'how many'. Also, be more explicit about the destination airport by mentioning the full name if known.",
            "Good variation; it's concise and to the point. However, the phrase 'arriving at' is more precise than 'heading to' and better aligns with the concept of a destination airport."
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "original_utterance": "How many 'United Airlines' flights go to Airport 'ASY'?"
    },
    {
        "init": [
            "Which semester has the highest number of student enrollments?",
            "Can you show me the semester with the most enrollments?",
            "Find the semester that has the maximum number of students enrolled."
        ],
        "final": [
            "Which semester has the highest number of student enrollments?",
            "Can you show me the semester with the most student enrollments?",
            "Find the semester that has the maximum number of students enrolled."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the query's intent. It avoids technical jargon and converts the SQL logic into a natural language query well.",
            "This variation is clear but could benefit from specifying 'student' for more precision. It accurately avoids SQL-specific terminology.",
            "The variation is precise yet could be more conversational. Avoids any direct SQL terms and captures the query intent correctly."
        ],
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the semester which most student registered in? Show both the name and the id."
    },
    {
        "init": [
            "Show me the total population for each type of government form where the average life expectancy is greater than 72.",
            "Can you list the government types along with their total population for those with an average life expectancy above 72?",
            "Find the sum of the population for each government type where the average life expectancy exceeds 72."
        ],
        "final": [
            "Show me the sum of the population for each government form where the average life expectancy is greater than 72.",
            "Can you list the government types along with their total population for those with an average life expectancy above 72?",
            "Find the sum of the population for each government type where the average life expectancy exceeds 72."
        ],
        "feedback": [
            "This variation is clear and detailed, but 'total population' might be more accurately conveyed as 'sum of the population' for specificity. Mentioning 'type of government form' can be simplified.",
            "Good phrasing. Including 'for those with an average life expectancy above 72' correctly conveys the SQL conditions. No major issues found.",
            "The phrasing is concise and clear, but utilizing 'sum of the population' would better reflect the SQL function used. No changes needed for technical jargon."
        ],
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "original_utterance": "Find the government form name and total population for each government form whose average life expectancy is longer than 72."
    },
    {
        "init": [
            "Find the IDs of TV channels that are not listed in the cartoons directed by Ben Jones.",
            "Which TV channel IDs do not appear in the cartoons directed by Ben Jones?",
            "List the TV channel IDs excluding those from cartoons directed by Ben Jones."
        ],
        "final": [
            "Find the IDs of TV channels that are not listed in the cartoons directed by Ben Jones.",
            "Which TV channel IDs do not appear in the cartoons directed by Ben Jones?",
            "List the TV channel IDs excluding those from cartoons directed by Ben Jones."
        ],
        "feedback": [
            "The phrase 'that are not listed in' is clear but could be made more concise. Consider specifying 'ids of TV channels not in cartoons by Ben Jones' for brevity.",
            "Very clear and concise. It correctly specifies the exclusion criteria without using SQL jargon.",
            "Clear, but the term 'excluding those from cartoons' could be misleading. Rephrasing it as 'excluding channels from cartoons directed by Ben Jones' would improve clarity."
        ],
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "original_utterance": "find the id of tv channels that do not play any cartoon directed by Ben Jones."
    },
    {
        "init": [
            "How many paragraphs are there in each document?",
            "Show me the count of paragraphs grouped by document.",
            "Get the number of paragraphs for each document and sort them by document ID."
        ],
        "final": [
            "How many paragraphs are there in each document?",
            "Show me the count of paragraphs for each document.",
            "Get the number of paragraphs for each document and sort them by their document identifiers."
        ],
        "feedback": [
            "This variation is clear and provides a straightforward query. It keeps the non-technical user in mind by avoiding any SQL-specific terms.",
            "This is a bit technical with the use of 'grouped by'. It could be made simpler by rephrasing to more natural language, avoiding direct SQL references.",
            "This phrasing is clear and concise, but it includes the technical term 'document ID', which might be confusing for non-technical users. Rephrasing to make it more user-friendly is recommended."
        ],
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "original_utterance": "Show all document ids and the number of paragraphs in each document. Order by document id."
    },
    {
        "init": [
            "Find the owner and their zip code who has spent the most on dog treatments.",
            "Who is the top spender on dog treatments, and what is their zip code?",
            "Show the owner with the highest total cost of dog treatments along with their zip code."
        ],
        "final": [
            "Find the owner and their zip code who has spent the most in total on dog treatments.",
            "Who is the top spender on dog treatments, and what is their zip code?",
            "Show the owner with the highest overall cost of dog treatments along with their zip code."
        ],
        "feedback": [
            "This variation is accurate but could add 'in total' to clarify it\u2019s about cumulative spending.",
            "Clear and concise. Good use of 'top spender' which resonates well with the SQL logic.",
            "Very accurate but could be slightly less formal. Adding 'overall' would also enhance clarity."
        ],
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "original_utterance": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code."
    },
    {
        "init": [
            "How many flights are there to either Aberdeen or Abilene?",
            "Can you count the total number of flights arriving in Aberdeen or Abilene?",
            "What is the number of flights that have Aberdeen or Abilene as their destination?"
        ],
        "final": [
            "How many flights are there to either Aberdeen or Abilene?",
            "Can you count the number of flights arriving in Aberdeen or Abilene?",
            "What is the number of flights that have Aberdeen or Abilene as their destination?"
        ],
        "feedback": [
            "This variation is clear and properly conveys the query's intent. It avoids technical SQL terminology.",
            "Good phrasing, but specifying 'total' is unnecessary as 'count' implies it. Removing 'total' would make it more concise.",
            "This variation is accurate and concise. It avoids SQL-specific terms effectively."
        ],
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "original_utterance": "Find the number of flights landing in the city of Aberdeen or Abilene."
    },
    {
        "init": [
            "How many flights have Aberdeen as their destination?",
            "Count the number of flights landing at airports in Aberdeen.",
            "What is the total number of flights that arrive in Aberdeen?"
        ],
        "final": [
            "How many flights have the city of Aberdeen as their destination?",
            "Count the number of flights in Aberdeen.",
            "What is the total number of flights with Aberdeen as the destination city?"
        ],
        "feedback": [
            "Clear and accurate, but it could subtly clarify what kind of count it is by mentioning 'city of Aberdeen' for more context.",
            "Accurate and clear. The phrasing 'landing at airports in Aberdeen' directly matches the SQL requirement but could avoid redundancy by saying 'in Aberdeen'.",
            "Good phrasing, but the word 'arrive' may confuse users if not specifically thinking about flights. It might be good to mention 'destination city Aberdeen' for clarity."
        ],
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_utterance": "How many flights arriving in Aberdeen city?"
    },
    {
        "init": [
            "List the African countries with populations lower than the most populous country in Asia.",
            "Which countries in Africa have a smaller population than the country with the largest population in Asia?",
            "Show the names of African countries whose populations are below the maximum population of an Asian country."
        ],
        "final": [
            "Which African countries have populations smaller than the most populous country in Asia?",
            "Which countries in Africa have a smaller population than the country with the largest population in Asia?",
            "Show the names of African countries with populations lower than the most populous country in Asia."
        ],
        "feedback": [
            "The variation is clear but could be more concise by avoiding repetition of the continent names.",
            "The phrasing 'the country with the largest population in Asia' is clear and specifies the reference point, making it easy to understand.",
            "This variation is accurate but could be clearer if we rephrase 'maximum population of an Asian country' to 'the most populous country in Asia'."
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "original_utterance": "What are the African countries that have a  population less than any country in Asia?"
    },
    {
        "init": [
            "Show me the first names of people who are either professionals or owners but are not dogs.",
            "Can you provide the first names of individuals from both the Professionals and Owners lists, excluding any dogs?",
            "Find the first names of people listed as professionals or owners, ensuring no dogs' names are included."
        ],
        "final": [
            "Show me the first names of professionals or owners who are not dogs.",
            "Can you provide the first names of people from the Professionals or Owners lists, excluding any dogs?",
            "Find the first names of people listed as professionals or owners, ensuring no dogs' names are included."
        ],
        "feedback": [
            "This variation is clear but could use more natural phrasing and include specific listings to avoid ambiguity.",
            "Good phrasing but avoid the redundancy of saying 'individuals from both lists.' It is implied in a union query.",
            "Clear and precise; uses the term 'ensuring' which makes it actionable while being non-technical."
        ],
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "original_utterance": "Which first names are used for professionals or owners but are not used as dog names?"
    },
    {
        "init": [
            "Which car makers had models that were produced in the year 1970?",
            "Can you list the car manufacturers that released their car models in 1970?",
            "Show me the distinct car makers with models manufactured in 1970."
        ],
        "final": [
            "Which car makers had models that were produced in the year 1970?",
            "Can you list the car manufacturers with models produced in 1970?",
            "Show me the distinct car makers with models manufactured in 1970."
        ],
        "feedback": [
            "Clear and accurate. No SQL-specific jargon used. It effectively conveys the intent of the query.",
            "The term 'released' might imply the release year rather than the production year, which could lead to ambiguity. Consider rephrasing for clarity.",
            "Accurate and concise. The use of 'distinct' aligns well with the SQL query. No changes needed."
        ],
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "original_utterance": "Find the name of the makers that produced some cars in the year of 1970?"
    },
    {
        "init": [
            "List the IDs of TV channels that do not have cartoons directed by Ben Jones.",
            "Which TV channel IDs are not associated with any cartoons directed by Ben Jones?",
            "Find the IDs of TV channels except those showing cartoons directed by Ben Jones."
        ],
        "final": [
            "List the TV channel IDs that do not feature cartoons directed by Ben Jones.",
            "Which TV channel IDs don't have cartoons directed by Ben Jones?",
            "Find TV channel IDs excluding those with cartoons directed by Ben Jones."
        ],
        "feedback": [
            "This variation is accurate and clearly states the intent. However, it can be further simplified to improve readability.",
            "The phrase 'not associated with any cartoons directed by Ben Jones' is clear and maintains the original query's intent. It might benefit from being more direct.",
            "This variation accurately captures the SQL query's intent. It avoids SQL technical terms which is good practice. Slight rephrasing can improve the flow."
        ],
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "original_utterance": "find the id of tv channels that do not play any cartoon directed by Ben Jones."
    },
    {
        "init": [
            "Show me the names of shops that have more products than the average number of products.",
            "Which shops have a higher number of products than the average across all shops?",
            "List the names of businesses where the product count exceeds the average."
        ],
        "final": [
            "Show me the names of shops that have more products than the average number of products.",
            "Which shops have a higher number of products than the average?",
            "List the names of shops where the product count exceeds the average."
        ],
        "feedback": [
            "This variation is clear and maintains the original query's intent. No changes needed.",
            "Good phrasing but consider removing 'across all shops' to avoid redundancy since the comparison to the average implies this.",
            "Accurate and concise. However, 'businesses' might be less specific compared to 'shops,' which aligns more with the original query."
        ],
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "original_utterance": "Find the names of stores whose number products is more than the average number of products."
    },
    {
        "init": [
            "Which city has the highest number of departing flights?",
            "Show me the city with the most flight departures.",
            "Find the city with the greatest number of flights taking off."
        ],
        "final": [
            "Which city has the highest number of departing flights?",
            "Show me the city with the most departing flights.",
            "Find the city with the greatest number of departing flights."
        ],
        "feedback": [
            "This variation captures the intent accurately. The phrasing is clear and avoids any specific SQL jargon, making it accessible to non-technical users.",
            "This is a clear and accurate version. It aligns well with the original query without dependency on specific SQL terms, but specifying 'departing' would make it more precise.",
            "The term 'taking off' is conversational but might be a bit informal. A slight adjustment to use 'departing flights' could enhance clarity and formality while maintaining natural language flow."
        ],
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which city has most number of departing flights?"
    },
    {
        "init": [
            "Show me countries where English or Dutch is an official language.",
            "Find all the countries that have either English or Dutch as an official language.",
            "Which countries have English or Dutch listed as an official language?"
        ],
        "final": [
            "Show me countries where either English or Dutch is an official language.",
            "Find all the countries that have either English or Dutch as an official language.",
            "Which countries list English or Dutch as their official language?"
        ],
        "feedback": [
            "This variation is clear and captures the intent. However, the inclusion of 'or Dutch' should be emphasized more explicitly to avoid ambiguity.",
            "This is a precise and accurate variation. The phrase 'either English or Dutch' helps convey the query's logic effectively.",
            "This variation is concise and to the point. It accurately covers the intent of the query without adding unnecessary complexity."
        ],
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "original_utterance": "What are the countries where either English or Dutch is the official language?"
    },
    {
        "init": [
            "Show me the names of countries in Asia with a population greater than the smallest population in Africa.",
            "Which countries in Asia have a population higher than the minimum population of countries in Africa?",
            "List the countries in Asia whose population exceeds the smallest population of any country in Africa."
        ],
        "final": [
            "Name the countries in Asia with a population larger than the smallest population in Africa.",
            "Which Asian countries have a population higher than the smallest population in Africa?",
            "List the Asian countries whose population is larger than the smallest population of any African country."
        ],
        "feedback": [
            "Clear and accurate, but rephrase for a more natural language flow. The phrasing can be slightly simplified.",
            "Very clear and precise; it could be slightly shorter.",
            "Good structure but can be more concise. Consider reshaping the sentence to make it sound more natural."
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "original_utterance": "What are the Asian countries which have a population larger than that of any country in Africa?"
    },
    {
        "init": [
            "Which country in Asia has the lowest life expectancy?",
            "Can you provide the name of the country in Asia with the shortest life expectancy?",
            "Find the Asian country with the minimum life expectancy."
        ],
        "final": [
            "Which country in Asia has the lowest life expectancy?",
            "Can you tell me the country in Asia with the shortest life expectancy?",
            "Find the Asian country with the lowest life expectancy."
        ],
        "feedback": [
            "This variation is accurate and clear. It substitively queries for the country with the lowest life expectancy and maintains the intent of the original SQL query without using technical jargon.",
            "This phrasing is clear, but 'provide the name' introduces unnecessary complexity. Simpler phrasing can enhance clarity and conciseness. Also, specifying 'shortest life expectancy' is precise and aligns with the intent.",
            "This variation is concise and to the point, but it uses the term 'minimum,' which might be less intuitive for general users than 'lowest' or 'shortest.'"
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "original_utterance": "What is the name of country that has the shortest life expectancy in Asia?"
    },
    {
        "init": [
            "Who is the top-earning poker player based on their money rank?",
            "Show me the money rank of the poker player with the highest earnings.",
            "Which poker player has the highest earnings and what is their money rank?"
        ],
        "final": [
            "What is the money rank of the poker player with the highest earnings?",
            "Show me the money rank of the poker player with the highest earnings.",
            "Find out the money rank of the top-earning poker player."
        ],
        "feedback": [
            "Clear in mentioning the top-earning poker player and money rank, but it's better to make it explicit that only the rank is being requested.",
            "This variation accurately reflects the SQL query's intent, focusing on the money rank of the top earner. It is clear and concise.",
            "Slightly misleading as it suggests retrieving both player information and their money rank. Simplify to focus just on the money rank."
        ],
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "original_utterance": "What is the money rank of the poker player with the highest earnings?"
    },
    {
        "init": [
            "Which template IDs are not used in any documents?",
            "Show me all template IDs that are available but not utilized in documents.",
            "List the template IDs that haven't been included in any documents."
        ],
        "final": [
            "Which template IDs are currently not used in any documents?",
            "Show me all template IDs that are not currently utilized in documents.",
            "List the template IDs that are not included in any documents."
        ],
        "feedback": [
            "Clear and concise, but it might be helpful to specify 'currently' not used, enhancing the temporal aspect.",
            "Accurate, but the term 'available' could be ambiguous. Use 'currently unused' to enhance precision.",
            "Good phrasing, but 'haven't been included' may sound too formal. Consider simplifying to 'not included'."
        ],
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "original_utterance": "Show ids for all templates not used by any document."
    },
    {
        "init": [
            "What is the average age of dogs that have received treatments?",
            "Can you find the average age of all dogs listed in the Treatments table?",
            "Show me the average age of dogs that have undergone treatment."
        ],
        "final": [
            "What is the average age of dogs that have received treatments?",
            "Can you find the average age of all dogs that have received treatments?",
            "Show me the average age of dogs that have undergone treatment."
        ],
        "feedback": [
            "Good phrasing and clear intent. Explicit mention of treatment adds clarity.",
            "This variation is accurate but may cause confusion by directly referencing the 'Treatments table'. Simplify it for better clarity.",
            "Precise and clear. Avoids technical jargon. No changes needed."
        ],
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "original_utterance": "What is the average age of the dogs who have gone through any treatments?"
    },
    {
        "init": [
            "Which semesters do not have any students enrolled?",
            "Can you list the semesters that have no student enrolments?",
            "Show me the semesters that don't have any students enrolled."
        ],
        "final": [
            "Which semesters have no students enrolled?",
            "Can you list the semesters that have no student enrolments?",
            "Show me the semesters that don't have any students enrolled."
        ],
        "feedback": [
            "This variation is clear and effectively captures the SQL query's intent. However, specifying 'do not have any students enrolled' could be more naturally phrased as 'no students enrolled.'",
            "Very clear and direct. The use of 'student enrolments' aligns well with the SQL query. Ensuring the plural form 'enrolments' is maintained is important.",
            "This is concise and avoids technical jargon. It's precise and directly reflects the SQL query. No major adjustments needed."
        ],
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "original_utterance": "Which semesters do not have any student enrolled? List the semester name."
    },
    {
        "init": [
            "What is the average age of students who don't have a pet?",
            "Can you calculate the average age of students who do not own any pets?",
            "Find the mean age of students without any pets."
        ],
        "final": [
            "What is the average age of students who don't have a pet?",
            "Can you calculate the average age of students who do not have any pets?",
            "Find the mean age of students without any pets."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent of the original query. No changes needed.",
            "Good phrasing, but the word 'own' could be omitted for simplicity. The term 'students who do not have pets' might be clearer.",
            "Concise and accurate. No changes needed, but ensure 'mean' and 'average' are understood equivalently by all users."
        ],
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "original_utterance": "Find the average age of students who do not have any pet."
    },
    {
        "init": [
            "Which countries have TV channels airing cartoons written by Todd Casey?",
            "Show me the countries where TV channels broadcast cartoons written by Todd Casey.",
            "Find the countries with TV channels that feature cartoons authored by Todd Casey."
        ],
        "final": [
            "Which countries have TV channels airing cartoons written by Todd Casey?",
            "Show me the countries where TV channels air cartoons written by Todd Casey.",
            "Find the countries with TV channels that feature cartoons authored by Todd Casey."
        ],
        "feedback": [
            "This variation is clear and directly relates to the query. However, 'airing' specifically implies broadcasting, which is accurate in this context.",
            "Solid phrasing, but 'broadcast' might be interpreted narrowly compared to 'air' or 'feature,' limiting the flexibility.",
            "Good and concise. 'Feature' is a nice choice for natural language avoiding direct SQL terminology."
        ],
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "original_utterance": "which countries' tv channels are playing some cartoon written by Todd Casey?"
    },
    {
        "init": [
            "Which countries have both English and French as spoken languages?",
            "Can you list the countries where both English and French are spoken?",
            "Find all the countries that have both English and French as official languages."
        ],
        "final": [
            "Which countries have both English and French as official languages?",
            "Can you list the countries where both English and French are spoken?",
            "Find all the countries that have both English and French as spoken languages."
        ],
        "feedback": [
            "This variation clearly captures the intent, but 'spoken languages' could be replaced with 'official languages' to avoid ambiguity.",
            "Well-phrased and clear. Mentioning 'spoken' makes it clear it's not about only official languages.",
            "Accurate and clear, but 'official languages' might imply governmental status which might not be the intent. Specify 'spoken languages' instead for broader coverage."
        ],
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "original_utterance": "What are the names of nations speak both English and French?"
    },
    {
        "init": [
            "Which country codes have more than 50 players?",
            "List the country codes that have a player count greater than 50.",
            "Find all country codes where the number of players exceeds 50."
        ],
        "final": [
            "Which country codes have a player count of more than 50?",
            "List the country codes that have over 50 players.",
            "Find all country codes where the number of players exceeds 50."
        ],
        "feedback": [
            "Clear and concise; however, you can clarify that it\u2019s related to the player count meeting a threshold.",
            "The phrase 'player count' is good, but 'greater than' could be simplified to 'over' for more natural language.",
            "Explicit and precise. It avoids SQL-specific terms like 'HAVING' while maintaining clarity."
        ],
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "original_utterance": "Find the codes of countries that have more than 50 players."
    },
    {
        "init": [
            "Show me the battles and their results excluding those with ships lost in the English Channel.",
            "List all battles and outcomes except those where any ships were reported lost in the English Channel.",
            "Can you provide details of battles and their commanders, excluding those involving ships lost in the English Channel?"
        ],
        "final": [
            "Show me the battles, results, and commanders excluding those with ships lost in the English Channel.",
            "List all battles, their outcomes, and commanders except those where any ships were reported lost in the English Channel.",
            "Can you provide details of battles, their results, and commanders, excluding those involving ships lost in the English Channel?"
        ],
        "feedback": [
            "Clear and accurate, but could explicitly mention providing the commander's name.",
            "Accurate and straightforward, but specifying the column 'commander' would add more precision.",
            "Good clarity and precision. No significant changes needed."
        ],
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "original_utterance": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'."
    },
    {
        "init": [
            "What are the minimum and maximum number of products in the shop?",
            "Can you tell me the least and most number products available in the shop?",
            "Find the lowest and highest product counts in the shop."
        ],
        "final": [
            "What are the minimum and maximum number of products in the shop?",
            "Can you tell me the least and most number of products available in the shop?",
            "Find the lowest and highest product counts in the shop."
        ],
        "feedback": [
            "This variation is clear and accurately represents the SQL query. It is appropriately specific without being too technical.",
            "Good phrasing, but the term 'number products' seems awkward. It would be more natural to say 'number of products available.'",
            "Accurate and succinct. It effectively conveys the query's intent without any unnecessary complexity. No changes needed."
        ],
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "original_utterance": "find the minimum and maximum number of products of all stores."
    },
    {
        "init": [
            "Which dog breed has the highest number of dogs?",
            "Identify the dog breed with the largest population.",
            "What is the most common dog breed based on the number of dogs?"
        ],
        "final": [
            "Which dog breed has the highest number of dogs?",
            "Identify the dog breed with the largest number of dogs.",
            "What is the most common dog breed in the dataset based on the number of dogs?"
        ],
        "feedback": [
            "This variation is clear and directly addresses the query's intent. No changes needed.",
            "This variation is accurate but could use simpler language to be more user-friendly. Consider avoiding terms like 'population' which might imply a broader context.",
            "Accurate and concise. However, it should explicitly mention 'in the dataset' to clarify that it's based on available data."
        ],
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the name of the breed with the most dogs?"
    },
    {
        "init": [
            "List the names of students who have both a cat and a dog as pets.",
            "Can you show me the students who own both cats and dogs?",
            "Which students have both a cat and a dog?"
        ],
        "final": [
            "List the names of students who have both cats and dogs as pets.",
            "Can you show me the students who own both a cat and a dog?",
            "Which students have both a cat and a dog?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the SQL query. Ensure 'names' and 'students' are both in plural form to align with the query.",
            "The phrasing is good but can be made clearer by avoiding the term 'students' repetitively. There's no need for 'cats and dogs' as one can infer the plurality of each type of pet.",
            "This is concise and to the point. No major issues found but ensure it is understood that 'students' refers to individuals owning pets."
        ],
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "original_utterance": "Find the name of students who have both cat and dog pets."
    },
    {
        "init": [
            "Can you provide the names and membership levels of visitors who have a membership level higher than 4, sorted by age in descending order?",
            "Show me the names and membership levels of visitors with a membership level greater than 4, ordered by their age from oldest to youngest.",
            "List the visitors with a membership level above 4, including their names and membership levels, sorted by age from highest to lowest."
        ],
        "final": [
            "Show the names and membership levels of visitors who have a membership level higher than 4, sorted by age in descending order.",
            "Show me the names and membership levels of visitors with a membership level greater than 4, ordered by their age from oldest to youngest.",
            "List the visitors with a membership level above 4, including their names and membership levels, sorted by age from highest to lowest."
        ],
        "feedback": [
            "This variation is accurate but a bit wordy. 'Provide' sounds formal; 'show' might be more natural.",
            "Clear and concise. The phrasing 'ordered by their age from oldest to youngest' is intuitive. No changes needed.",
            "Accurate and clear. The phrase 'highest to lowest' can be interpreted as age-based sorting correctly."
        ],
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "original_utterance": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young."
    },
    {
        "init": [
            "List the names and IDs of students who are enrolled in exactly two courses.",
            "Show the first name, middle name, last name, and student ID for students with exactly two enrollments.",
            "Find the students who are enrolled in two courses, providing their first name, middle name, last name, and student ID."
        ],
        "final": [
            "List the names and IDs of students who are enrolled in exactly two courses.",
            "Show the first name, middle name, last name, and student ID for students who are enrolled in exactly two courses.",
            "Find the students enrolled in two courses and provide their first, middle, and last names, along with their student IDs."
        ],
        "feedback": [
            "Clear and accurate. Explicitly mentions the key information and encapsulates the HAVING clause without SQL jargon.",
            "Good detailing and direct mapping to SQL fields, but avoid using 'enrollments' which can imply different meanings. Use 'courses' to enhance clarity regarding the context.",
            "Accurate and maintains context. However, consider rephrasing to avoid redundancy and enhance readability."
        ],
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "original_utterance": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id."
    },
    {
        "init": [
            "Show me the names of dog owners and their dogs who live in Virginia.",
            "Who are the dog owners and their dogs located in Virginia?",
            "List the first names of dog owners and their dogs' names from Virginia."
        ],
        "final": [
            "Show me the names of dog owners and their dogs who live in Virginia.",
            "Who are the dog owners and their dogs in Virginia?",
            "List the first names of dog owners and their dogs from Virginia."
        ],
        "feedback": [
            "Clear and aligns with the query. It captures both dog owners and their dogs. No changes needed.",
            "Good variation, but 'located in Virginia' can be replaced with 'in Virginia' to make it more concise and natural-sounding.",
            "Accurately reflects the query, but specifying 'dog owners' twice can be simplified. It can mention 'dogs' directly after 'owners' for better readability."
        ],
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "original_utterance": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name."
    },
    {
        "init": [
            "Which record company has produced the most orchestra albums?",
            "Identify the record company with the highest number of orchestra records.",
            "Can you tell me the record company listed the most in the orchestra records?"
        ],
        "final": [
            "Which record company has produced the highest number of orchestra albums?",
            "Identify the record company with the highest number of orchestra records.",
            "Can you tell me which record company appears most frequently in the orchestra records?"
        ],
        "feedback": [
            "This variation is clear and correctly interprets the SQL query. Mentioning 'produced' adds clarity but could be more precise.",
            "This phrasing is clear and direct. It avoids any unnecessary jargon and is well-aligned with the SQL query's intent.",
            "Good interpretation, but the phrase 'listed the most' can be more explicitly linked to the number of records."
        ],
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "original_utterance": "List the record company shared by the most number of orchestras."
    },
    {
        "init": [
            "How many flights operated by United Airlines are headed to destination airport ASY?",
            "Can you provide a count of United Airlines flights going to the ASY airport?",
            "Find the total number of United Airlines flights with ASY as the destination airport."
        ],
        "final": [
            "How many flights by United Airlines are going to ASY airport?",
            "Can you provide a count of United Airlines flights to ASY?",
            "Find the total number of United Airlines flights with ASY as the destination."
        ],
        "feedback": [
            "The variation is clear but using 'headed to' might confuse some users; using 'going to' could be simpler. Also unnecessary words like 'operated by' could be simplified.",
            "This variation is clear and precise. However, specifying 'the' ASY airport is redundant; it\u2019s clear from context that it\u2019s an airport.",
            "This is clear and concise. No changes necessary, but ensure 'United Airlines' and 'ASY' are clearly referenced as airline and airport respectively."
        ],
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "original_utterance": "How many 'United Airlines' flights go to Airport 'ASY'?"
    },
    {
        "init": [
            "What is the number of cylinders for the fastest accelerating Volvo?",
            "Show the cylinder count of the Volvo car that has the quickest acceleration.",
            "Find the Volvo model with the quickest acceleration and give its number of cylinders."
        ],
        "final": [
            "What is the number of cylinders for the fastest accelerating Volvo in the car database?",
            "Show the cylinder count of the Volvo car that has the quickest acceleration in the car database.",
            "Find the Volvo model with the quickest acceleration and give its number of cylinders from the car database."
        ],
        "feedback": [
            "This variation is clear and captures the essence accurately. However, specifying that it's about the data in a car database can make it more precise.",
            "Good phrasing. It mentions 'cylinder count' which is clear. Adding that it refers to a car database can make it clearer to non-technical users.",
            "Accurate and concise. No changes needed, but adding more context about the database source could be helpful for clarity."
        ],
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_utterance": "For model volvo, how many cylinders does the car with the least accelerate have?"
    },
    {
        "init": [
            "How many friends does each high schooler have?",
            "Show the number of friends for each high school student along with their names.",
            "Can you display the name of each student along with their total friends count?"
        ],
        "final": [
            "How many friends does every high schooler have?",
            "Show the number of friends for each high school student with their names.",
            "Can you display the name of each student along with their total number of friends?"
        ],
        "feedback": [
            "This variation is clear and succinct, but 'each' should be replaced with 'every' for more formal phrasing.",
            "Good phrasing, but it could be more concise by removing redundant words like 'along'.",
            "This is clear and matches the SQL query's intent, though 'friends count' is a bit informal; 'number of friends' might be better."
        ],
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "original_utterance": "Show the names of high school students and their corresponding number of friends."
    },
    {
        "init": [
            "Which semesters have students enrolled in both the Master's and Bachelor's degree programs?",
            "Identify the semester IDs where there are enrollments in both Master's and Bachelor's programs.",
            "Find the semesters that have students registered in both Master's and Bachelor's degree programs."
        ],
        "final": [
            "Which semesters have students enrolled in both the Master's and Bachelor's degree programs?",
            "Identify the semesters where there are enrollments in both Master's and Bachelor's programs.",
            "Find the semesters that have students enrolled in both Master's and Bachelor's degree programs."
        ],
        "feedback": [
            "Clear and straightforward, capturing the essence of the SQL query. Consider adding 'students' to emphasize the enrollment in the programs.",
            "Accurate and concise. The phrase 'semester IDs' closely matches the SQL language and could be softened for a more natural feel by using 'semesters'.",
            "Clear and complete. However, the term 'registered' could be replaced with 'enrolled' for consistency with the SQL query."
        ],
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "original_utterance": "Find the semester when both Master students and Bachelor students got enrolled in."
    },
    {
        "init": [
            "Which car model has the highest miles per gallon?",
            "Show me the car model with the best fuel efficiency.",
            "Find the car model that offers the maximum mpg."
        ],
        "final": [
            "Which car model has the highest miles per gallon in current listings?",
            "Show me the car model with the best fuel efficiency.",
            "Find the car model that offers the maximum miles per gallon."
        ],
        "feedback": [
            "This variation is clear, but adding 'current listings' might reduce ambiguity related to the timing of the data.",
            "Very clear and avoids technical jargon. It effectively conveys the intent of finding the car model with the best mpg.",
            "Clear and accurately reflects the SQL query intent. It uses the term 'mpg,' which might assume some understanding of the acronym, so spelling it out could enhance clarity."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "original_utterance": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon."
    },
    {
        "init": [
            "Who is the employee with the highest bonus?",
            "Find the top employee based on their bonus.",
            "Show the name of the employee who received the highest bonus."
        ],
        "final": [
            "Who is the employee with the highest bonus?",
            "Find the employee who has received the top bonus.",
            "Show the name of the employee who received the highest bonus."
        ],
        "feedback": [
            "This variation is clear and directly corresponds to the SQL query. It's simple and accurate.",
            "Good phrasing, but it could be more explicit by specifying that it is looking for an employee based on their bonus. The term 'top' is a bit ambiguous.",
            "Accurate and detailed. It clearly specifies that we are looking for the employee with the highest bonus."
        ],
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "original_utterance": "Find the name of the employee who got the highest one time bonus."
    },
    {
        "init": [
            "Show me the names of individuals who are not poker players.",
            "Which people are in the database but not listed as poker players?",
            "Find the names of all people who do not play poker."
        ],
        "final": [
            "Show me the names of individuals who are not poker players.",
            "Which people are not listed as poker players?",
            "Find the names of all people who are not listed as poker players."
        ],
        "feedback": [
            "This variation is clear and straightforward. It effectively captures the intent of filtering out poker players. No changes needed.",
            "Clear and direct, but the phrase 'in the database' is somewhat redundant. It accurately identifies people who are not poker players.",
            "Concise and on-point, but it might be helpful to specify 'listed as' which aligns better with the database context. Although, it's almost identical to 'Variation 1'."
        ],
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "original_utterance": "List the names of people that are not poker players."
    },
    {
        "init": [
            "Which country has produced the highest number of players?",
            "Show me the country code for the country with the most players.",
            "Find the country code of the country with the largest number of players collected."
        ],
        "final": [
            "Which country code has the highest number of players?",
            "Show me the country with the highest count of players.",
            "Find the country with the most players."
        ],
        "feedback": [
            "Clear and straightforward. However, it could be more precise by referring to top country code specifically.",
            "Good phrasing, but using 'country code' might be too technical; consider more natural terminology.",
            "Clear but can be simplified for clarity. Avoid SQL-like phrases like 'collected'."
        ],
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "find the code of the country where has the greatest number of players."
    },
    {
        "init": [
            "Find all distinct car models by General Motors or cars that weigh more than 3500 pounds.",
            "Show me the unique models manufactured by General Motors or cars with a weight over 3500 pounds.",
            "List all distinct models from General Motors or any car model where the weight exceeds 3500 pounds."
        ],
        "final": [
            "Find all unique car models by General Motors or cars that weigh more than 3500 pounds.",
            "Show me the unique models manufactured by General Motors or cars with a weight over 3500 pounds.",
            "List all distinct models from General Motors or cars weighing over 3500 pounds."
        ],
        "feedback": [
            "Clear and accurate, but specifying 'distinct car models' could be replaced with 'unique car models' for better flow.",
            "Concise and relevant. The usage of 'unique models' is appropriate and clear. Good variation.",
            "Accurate but can be made more concise. Instead of 'any car model where the weight exceeds,' saying 'cars weighing over' would improve clarity."
        ],
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "original_utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?"
    },
    {
        "init": [
            "Which nationalities have more than one person in the database?",
            "Show me the nationalities that have at least two individuals listed.",
            "What are the nationalities of people that appear at least twice?"
        ],
        "final": [
            "Which nationalities have more than one person in the database?",
            "Show me the nationalities that have at least two individuals.",
            "What are the nationalities of people that are listed at least twice?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the query. The phrasing is natural and specific.",
            "This phrasing accurately reflects the query but could be made more concise by removing 'listed,' since it's implied.",
            "The intent is clear, although 'appear' may be interpreted to mean visual appearance. Consider using 'listed' instead."
        ],
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "original_utterance": "What are the nationalities that are shared by at least two people?"
    },
    {
        "init": [
            "How many official languages are spoken in Afghanistan?",
            "Count the number of official languages in Afghanistan.",
            "Give me the total number of languages that are officially recognized in Afghanistan."
        ],
        "final": [
            "How many official languages are spoken in Afghanistan?",
            "What are the number of official languages in Afghanistan?",
            "Give me the total number of official languages in Afghanistan."
        ],
        "feedback": [
            "This variation is clear and accurate. It represents the query intent well without any technical jargon.",
            "Concise and accurate but could avoid the term 'count' to sound more natural in conversation.",
            "Accurate and clear but can be slightly more concise. The term 'officially recognized' is slightly redundant."
        ],
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "original_utterance": "How many official languages does Afghanistan have?"
    },
    {
        "init": [
            "List the names of dogs that have treatment costs totaling less than $1000.",
            "Find all dogs whose total cost of treatments is not over $1000.",
            "Show the names of dogs that haven't spent more than $1000 on treatments."
        ],
        "final": [
            "List the names of dogs whose overall treatment costs are less than $1000.",
            "Find all dog names whose total cost of treatments is not over $1000.",
            "Show the names of dogs whose total spending on treatments is under $1000."
        ],
        "feedback": [
            "This variation clearly describes the intent of the SQL query, but mentioning 'treatment costs' could be replaced with 'overall treatment costs' for more precision.",
            "The phrasing is good and clear. It could be improved by explicitly mentioning 'dog names' for more precision.",
            "The variation is concise and accurate but could be more specific by rephrasing 'haven't spent' to 'whose total spending' to align better with the SQL query's intentions."
        ],
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "original_utterance": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names."
    },
    {
        "init": [
            "Who is the visitor with the highest number of tickets purchased, and what is their age?",
            "Show the name and age of the visitor who bought the most tickets.",
            "Find the visitor's name and age who purchased the maximum number of tickets."
        ],
        "final": [
            "Who is the visitor who purchased the highest number of tickets, and what is their age?",
            "Show the name and age of the visitor who purchased the most tickets.",
            "Find the name and age of the visitor with the highest ticket purchases."
        ],
        "feedback": [
            "This variation is clear and covers all key elements, focusing on the visitor's identity and age related to ticket purchases. However, mentioning 'purchased' directly might be more precise.",
            "The variation is straightforward and clear. It identifies both requested attributes, but using 'visitor' instead of 'name' initially could make it more accurate.",
            "This version is accurate but could be more fluent by rephrasing 'visitor's name and age' to 'name and age of the visitor'. Avoid SQL-specific terms like 'maximum number of tickets'."
        ],
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "original_utterance": "Find the name and age of the visitor who bought the most tickets at once."
    },
    {
        "init": [
            "List all unique regions where English or Dutch is spoken.",
            "Which regions have countries that speak either English or Dutch?",
            "Show me the distinct regions of countries that have English or Dutch as a spoken language."
        ],
        "final": [
            "List all unique regions where English or Dutch is spoken.",
            "Which regions have countries where people speak either English or Dutch?",
            "Show me the regions of countries that have English or Dutch as a language."
        ],
        "feedback": [
            "This variation is clear and concise. It captures the essence of the query and avoids technical jargon.",
            "This variation is also clear but using 'unique' instead of 'distinct' might make it more natural. The phrase 'have countries that speak' could be refined for fluency.",
            "Good precision but it could be made more natural by removing 'distinct.' The phrasing 'as a spoken language' is slightly redundant since it's implied by 'speak.'"
        ],
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "original_utterance": "What are the regions that use English or Dutch?"
    },
    {
        "init": [
            "Show the top 3 unique winners sorted by age from the matches.",
            "List the distinct names and ranks of winners ordered by their age, limiting to the first 3.",
            "Can you provide the details of the top 3 winners sorted by the youngest age?"
        ],
        "final": [
            "Show the top 3 unique winners sorted by the youngest age from the matches.",
            "List the distinct names and ranks of winners ordered by the youngest age, limiting to the first 3.",
            "Can you provide the names and ranks of the top 3 winners sorted by the youngest age?"
        ],
        "feedback": [
            "The term 'unique' accurately conveys DISTINCT, but specifying 'sorted by age' could be clearer if it mentions 'youngest' rather than just age.",
            "This variation clearly conveys the requirement of distinct names and ranks, but it would be better to clarify that it\u2019s sorted by the youngest age.",
            "The phrase 'top 3 winners' is clear, but 'details' is too generic. Specify 'names and ranks' to reflect the SELECT clause accurately."
        ],
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "original_utterance": "Find the name and rank of the 3 youngest winners across all matches."
    },
    {
        "init": [
            "Show me all the professionals located in any city containing the word 'West' in its name.",
            "List the role codes and addresses of professionals in cities that have 'West' in their names.",
            "Which professionals are in cities with 'West' as part of the city name, and what are their addresses and role codes?"
        ],
        "final": [
            "Show me all professionals located in any city containing the word 'West', including their role codes, street, city, and state.",
            "List the role codes, addresses, and states of professionals in cities that have 'West' in their names.",
            "Which professionals are in cities with 'West' in the name, and what are their role codes, street addresses, and states?"
        ],
        "feedback": [
            "Clear and accurate, but specifying what information is needed (role code, street, city, state) would be beneficial.",
            "Good representation, but mention 'state' in addition to address components for clarity.",
            "Accurate but a bit verbose. The structure could be simplified for brevity."
        ],
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "original_utterance": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state."
    },
    {
        "init": [
            "Show me the notes that mention 'East' in the death records.",
            "Can you retrieve all death notes containing the word 'East'?",
            "Find all the entries in the death records where the note includes 'East'."
        ],
        "final": [
            "Show me the death notes that mention 'East'.",
            "Can you retrieve all death notes containing the word 'East'?",
            "Find all notes in the death records where the note includes 'East'."
        ],
        "feedback": [
            "This variation is clear but could be more specific by mentioning it is in the 'death notes' rather than just 'notes'.",
            "Good phrasing and accurate. It is clear and specifies the word 'East' directly, which is good.",
            "Accurate and concise. However, the term 'entries' could be more specific as 'notes in death records'."
        ],
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "original_utterance": "What are the notes of the death events which has substring 'East'?"
    },
    {
        "init": [
            "Show me the number of killed and injured from incidents caused by ships with a tonnage of 't'.",
            "Can you display the counts of those killed and injured in ship-related incidents with ships of tonnage 't'?",
            "Find the number of casualties and injuries from events caused by ships having a tonnage of 't'."
        ],
        "final": [
            "Show me the number of people killed and injured from incidents caused by ships with a tonnage of 't'.",
            "Can you display the number of people killed and injured in ship-related incidents with ships of tonnage 't'?",
            "Find the numbers of people killed and injured in events caused by ships having a tonnage of 't'."
        ],
        "feedback": [
            "This variation accurately captures the query's intent and is clear. However, the phrase 'number of killed and injured' might be more naturally phrased as 'number of people killed and injured'.",
            "Good phrasing, but 'counts' may be somewhat unclear as it implies a numeric count, which is not directly indicated in the query. Using 'number of people' would make it clearer.",
            "Accurate and concise. The term 'casualties' might be redundant since 'killed' and 'injuries' are separately specified, so simplifying could help."
        ],
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "original_utterance": "What are the death and injury situations caused by the ship with tonnage 't'?"
    },
    {
        "init": [
            "How many car makers are there per continent?",
            "Can you show the number of car manufacturers located in each continent?",
            "List the continents along with the count of car makers in each one."
        ],
        "final": [
            "How many car makers are there in each continent?",
            "Can you show the number of car manufacturers located in each continent?",
            "List the continents along with the count of car makers in each one."
        ],
        "feedback": [
            "This variation is clear and accurate but could mention that the count is grouped by continent for clarity.",
            "Well-phrased, but it might be clearer to specify that it is showing the count of car manufacturers for each continent.",
            "This version is accurate and mirrors the structure of the original query. It successfully avoids technical jargon."
        ],
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "original_utterance": "How many car makers are there in each continents? List the continent name and the count."
    },
    {
        "init": [
            "Which region does the city Kabul belong to?",
            "Can you tell me the region for the city of Kabul?",
            "Find the region in which the city Kabul is located."
        ],
        "final": [
            "Which region does the city Kabul belong to?",
            "Can you tell me the region for the city Kabul?",
            "Find the region in which the city Kabul is located."
        ],
        "feedback": [
            "This variation is clear and correctly conveys the intended query. It also avoids SQL-specific terms and is easy to understand.",
            "Good phrasing, although 'city of Kabul' could be more concise as 'city Kabul'. It's also clear and avoids direct SQL terminology.",
            "Accurate and concise. It avoids SQL-specific jargon and easily conveys the query\u2019s intent."
        ],
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "original_utterance": "Which region is the city Kabul located in?"
    },
    {
        "init": [
            "List the names of documents that use templates with the type code 'BK'.",
            "What are the document names associated with templates of type code 'BK'?",
            "Show the names of documents linked to templates that have the type code 'BK'."
        ],
        "final": [
            "List the names of documents associated with templates that have the type code 'BK'.",
            "What are the document names associated with templates of type code 'BK'?",
            "Show the names of documents connected to templates that have the type code 'BK'."
        ],
        "feedback": [
            "Clear and accurate but could be more specific by adding 'templates.' The term 'use templates' might imply usage instead of association.",
            "Well-phrased and precise. It's clear and easy to understand.",
            "Accurate but could avoid the term 'linked' to be more natural. 'Associated with' or 'connected to' might be better alternatives."
        ],
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "original_utterance": "Show all document names using templates with template type code BK."
    },
    {
        "init": [
            "Get the code of countries that do not have a republican form of government and do not speak English.",
            "Find the codes for countries that are not republics and where English is not spoken.",
            "Which countries are not republics and do not have English as a language? Provide their codes."
        ],
        "final": [
            "Get the code of countries that do not have a republican form of government and do not officially use English.",
            "Find the codes for countries that are not republics and where English is not an official language.",
            "Which countries are not republics and do not have English as an official language? Provide their codes."
        ],
        "feedback": [
            "The term 'speak' adds a conversational tone but might simplify the concept of a language attribute. Consider specifying 'officially use English' to maintain clarity.",
            "This phrasing is straightforward and accurate but could specify 'official language' for more precision. It effectively combines the intent without SQL jargon.",
            "This variation is clear and concise. It avoids SQL-specific terms and maintains the original SQL intent well."
        ],
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "original_utterance": "What are the codes of the countries that do not speak English and whose government forms are not Republic?"
    },
    {
        "init": [
            "Show me the professionals who are either based in Indiana or have performed more than two treatments.",
            "Who are the professionals located in Indiana or those who have more than two treatments recorded?",
            "List the professionals from Indiana and those with more than two total treatments."
        ],
        "final": [
            "Show me the professionals who are either based in Indiana or have performed more than two treatments.",
            "Who are the professionals located in Indiana or those who have more than two treatments recorded?",
            "List the professionals from Indiana and those with more than two recorded treatments."
        ],
        "feedback": [
            "Clear phrasing that captures the union between professionals in Indiana and those with more than two treatments. Good natural language conversion.",
            "Good specific phrasing. It clearly separates whether the professional is in Indiana or has done more than two treatments, making it easy to understand.",
            "This variation is concise and accurately reflects the UNION operation in the query. It could be slightly more detailed by specifying the treatments are recorded."
        ],
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "original_utterance": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone."
    },
    {
        "init": [
            "Which template type code appears most frequently in the Templates table?",
            "What is the most common template type code in the Templates database?",
            "Find the template type code that occurs the most in the Templates table."
        ],
        "final": [
            "Which template type code appears most frequently?",
            "What is the most common template type code in the Templates table?",
            "Find the template type code that is the most frequent in the Templates table."
        ],
        "feedback": [
            "Clear and accurate; however, it can avoid explicitly mentioning 'Templates table' to make it more general and thus more natural.",
            "Good wording, but 'Templates database' is misleading since the query is only about a table within the database. It's better to stick with 'Templates' or make it clear it's a table.",
            "This phrasing is precise, but 'occurs the most' can be changed to 'is the most frequent' for greater clarity and naturalness."
        ],
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which template type code has most number of templates?"
    },
    {
        "init": [
            "Which countries have singers older than 40 and younger than 30?",
            "Show me the countries with singers in the age groups above 40 and below 30.",
            "Find the countries that have both singers over 40 years old and under 30 years old."
        ],
        "final": [
            "Which countries have singers older than 40 and also younger than 30?",
            "Show me the countries that have singers both older than 40 and younger than 30.",
            "Find the countries that have both singers over 40 years old and under 30 years old."
        ],
        "feedback": [
            "This variation clearly captures the intent but should specify that it is identifying countries with singers in both age groups for better clarity.",
            "Good phrasing, but the age criteria 'above 40' and 'below 30' might be better stated for precision. Using 'age groups' can be ambiguous.",
            "Accurate and clear. It avoids technical SQL terms and simplifies the logic without losing the original query's intent."
        ],
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "original_utterance": "Show countries where a singer above age 40 and a singer below 30 are from."
    },
    {
        "init": [
            "Can you show me the acceleration details for the car model 'amc hornet sportabout (sw)'?",
            "What is the acceleration rate for the 'amc hornet sportabout (sw)' car?",
            "Find the acceleration information for the vehicle named 'amc hornet sportabout (sw)'."
        ],
        "final": [
            "Can you show me the acceleration history for the car model 'amc hornet sportabout (sw)'?",
            "What is the acceleration detail for the 'amc hornet sportabout (sw)' car?",
            "Find the acceleration for the vehicle named 'amc hornet sportabout (sw)'."
        ],
        "feedback": [
            "The term 'details' could be made more specific to 'acceleration history'. This variation is clear and precise but could emphasize 'specific model'.",
            "This variation is good, but 'rate' could be revised to 'detail' for clarity. Avoiding the term 'rate' makes the query more specific and natural.",
            "This variation is accurate, but 'information' might be redundant. Simply stating 'acceleration' keeps the phrase concise and clear."
        ],
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "original_utterance": "What is the accelerate of the car make amc hornet sportabout (sw)?"
    },
    {
        "init": [
            "Show me the template IDs that are in the Templates list but not in the Documents list.",
            "List the IDs of templates that do not appear in the Documents list.",
            "Which template IDs are found in Templates but not in Documents?"
        ],
        "final": [
            "Show me the template IDs that are in Templates but not in Documents.",
            "List the template IDs that do not appear in the Documents list.",
            "Which template IDs are found in Templates but not in Documents?"
        ],
        "feedback": [
            "This variation is accurate and clear but could be slightly more concise for better readability.",
            "Good phrasing, but it could specify 'template IDs' instead of just 'IDs' for more clarity.",
            "Accurate and effective. It clearly specifies 'template IDs', which aligns well with the original SQL query."
        ],
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "original_utterance": "Show ids for all templates not used by any document."
    },
    {
        "init": [
            "How many singers have performed in each concert, and what are their names and themes?",
            "Can you list the concerts with the number of singers who performed, including the concert names and themes?",
            "Show the details of each concert, including the concert name, theme, and the number of singers who performed."
        ],
        "final": [
            "How many singers have been part of each concert, and what are their names and themes?",
            "Can you provide the list of concerts along with the number of singers, concert names, and themes?",
            "Show the details of each concert, including the concert name, theme, and the number of singers who performed."
        ],
        "feedback": [
            "This variation is clear and captures the query's intent. However, the term 'performed' could be improved to make it more explicitly clear that it refers to the number of singers.",
            "Good phrasing, but 'including the concert names and themes' could be rephrased for better clarity. Mentioning 'concert details' first may help capture all required fields.",
            "Accurate and concise. Provides a thorough summary of the query without any need for changes. It avoids technical SQL terms and remains user-friendly."
        ],
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "original_utterance": "Show the name and theme for all concerts and the number of singers in each concert."
    },
    {
        "init": [
            "How many countries have both English and Dutch as languages?",
            "Can you count the countries where both English and Dutch are spoken?",
            "Find the total number of countries that have English and Dutch as official languages."
        ],
        "final": [
            "How many countries have both English and Dutch as languages?",
            "Can you count the number of countries that have both English and Dutch as languages?",
            "Find the total number of countries where both English and Dutch are present."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent of the original query. It doesn't use any SQL-specific terminology, which makes it user-friendly.",
            "This phrasing is good but could be improved for clarity by specifying that you want to 'count the countries' explicitly at the start. Avoiding terms like 'spoken' might be more suitable for inclusivity since it assumes usage over the institutional status.",
            "Clear and concise, although 'official languages' may imply a stricter definition than intended. It might be better to specify both languages 'are present' instead of 'are official languages' to avoid confusion over official status."
        ],
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "original_utterance": "How many countries speak both English and Dutch?"
    },
    {
        "init": [
            "Show me the songs by singers who are older than the average age of all singers.",
            "Which songs are performed by singers whose age is above the average age of singers?",
            "List the song names of singers who are older than the average age among all singers."
        ],
        "final": [
            "Show me the songs by singers who are older than the average age of all singers.",
            "Which songs are performed by singers older than the average age of all singers?",
            "List the song names of singers who are older than the average age among all singers."
        ],
        "feedback": [
            "This variation is clear and accurately represents the SQL query. It maintains the intent well and avoids technical jargon.",
            "Good phrasing but could be simplified slightly for clarity. Avoids SQL-specific terminology effectively.",
            "Accurate and concise. No changes needed, but it's always good to double-check for natural language flow."
        ],
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "original_utterance": "List all song names by singers above the average age."
    },
    {
        "init": [
            "List the names of conductors who have been associated with multiple orchestras.",
            "Find the conductors who are linked with more than one orchestra.",
            "Show the names of conductors who conduct more than one orchestra."
        ],
        "final": [
            "List the names of conductors who are associated with more than one orchestra.",
            "Find the names of conductors linked with more than one orchestra.",
            "Show the names of conductors who lead more than one orchestra."
        ],
        "feedback": [
            "This variation is clear but slightly verbose. The phrase 'associated with multiple orchestras' effectively communicates the intent but could be simplified.",
            "This variation is accurate and concise but could specify 'their names' to align exactly with the SQL query output.",
            "This variation is accurate and aligns well with the original SQL query's intent. No major changes needed, though 'conduct' can also be interpreted as 'lead,' maintaining natural flow."
        ],
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "original_utterance": "Show the names of conductors that have conducted more than one orchestras."
    },
    {
        "init": [
            "Which student has enrolled in the most courses, including their first name, middle name, and last name?",
            "Can you find the student with the highest number of course enrollments and provide their full name and student ID?",
            "Show me the student who has enrolled in the maximum number of courses and their details, such as first name, middle name, last name, and student ID."
        ],
        "final": [
            "Which student has enrolled in the most courses, including their full name and student ID?",
            "Can you find the student who has enrolled in the most courses and provide their full name and student ID?",
            "Who is the student with the maximum number of course enrollments and what are their details, including first name, middle name, last name, and student ID?"
        ],
        "feedback": [
            "This variation is mostly clear but can be improved for consistency in naming. 'Including their first name, middle name, and last name' could be refined to avoid repeating 'name'.",
            "This variation is accurate and clearly specifies what information is needed. However, 'highest number of course enrollments' can be more conversational as 'most courses enrolled.'",
            "This variation accurately captures all the details needed. However, 'Show me the student' could be more engaging as 'Who is the student'. It avoids technical jargon effectively."
        ],
        "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id."
    },
    {
        "init": [
            "What are the unique template type descriptions used in documents?",
            "Show me all distinct template type descriptions that are associated with templates in documents.",
            "List the different template type descriptions found across documents and templates."
        ],
        "final": [
            "What are the unique template type descriptions used in documents?",
            "Show me all distinct template type descriptions found in documents.",
            "List the different unique template type descriptions across documents and templates."
        ],
        "feedback": [
            "This variation is clear and accurately captures the query's intent. No references to SQL-specific syntax, making it user-friendly.",
            "This variation is accurate but could be made more concise by omitting 'associated with templates.' The context of documents already implies templates.",
            "This variation is correct but might benefit from specifying 'unique' or 'distinct' to align more closely with the SQL query's intent."
        ],
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "original_utterance": "What are the distinct template type descriptions for the templates ever used by any document?"
    },
    {
        "init": [
            "What is the largest country by surface area, including its name, population, and head of state?",
            "Show me the country with the most surface area along with its name, population, and head of state.",
            "Can you provide the details of the country that has the greatest surface area, including its name, population, and head of state?"
        ],
        "final": [
            "What is the largest country currently available by surface area, including its name, population, and head of state?",
            "Show me the country with the most surface area along with its name, population, and head of state.",
            "Can you provide the details of the country that has the largest surface area, including its name, population, and head of state?"
        ],
        "feedback": [
            "This variation captures the query\u2019s intent well, but it could use simpler phrasing for better clarity. Consider specifying 'currently available data' for precision.",
            "Clear and concise; it avoids technical terms well. However, ensure that 'details' is not ambiguous by explicitly stating 'name, population, and head of state'.",
            "This is clear and accurate. Consider replacing 'greatest' with 'largest' for simplicity and avoiding possible ambiguities."
        ],
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "original_utterance": "What are the population, name and leader of the country with the largest area?"
    },
    {
        "init": [
            "List the names of individuals who are poker players with earnings above 300,000.",
            "Show the names of people who have earned more than 300,000 from poker.",
            "Which poker players have earned over 300,000? Provide their names."
        ],
        "final": [
            "List the names of poker players with earnings above 300,000.",
            "Show the names of people who have earned more than 300,000 from poker.",
            "Which poker players have earned over 300,000? Provide their names."
        ],
        "feedback": [
            "This variation accurately captures the query's intent but could be simplified for better clarity.",
            "Good phrasing, but it would be clearer to specify it\u2019s earnings from poker.",
            "Clear and concise. No significant changes needed, but consider specifying that the earnings are from poker, to avoid ambiguity."
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "original_utterance": "What are the names of poker players whose earnings is higher than 300000?"
    },
    {
        "init": [
            "Find the last names of students living in North Carolina who are not enrolled in any courses.",
            "List the surnames of students whose current address is in North Carolina but are not currently enrolled in any classes.",
            "Can you provide the last names of students residing in North Carolina who aren't enrolled in any enrollment records?"
        ],
        "final": [
            "Find the last names of students residing in North Carolina who are not enrolled in any courses.",
            "List the surnames of students whose current address is in North Carolina but are not currently enrolled in any courses.",
            "Can you provide the last names of students residing in North Carolina who aren't currently enrolled in any courses?"
        ],
        "feedback": [
            "Clear and maintains the query's intent. Consider replacing 'living' with 'residing' for higher clarity.",
            "Accurate and explicit. The phrase 'current address' aligns with the SQL join, but replace 'classes' with 'courses' for consistency.",
            "Good phrasing but 'aren't enrolled in any enrollment records' is slightly redundant. Consider simplifying by removing duplication."
        ],
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "original_utterance": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program."
    },
    {
        "init": [
            "Can you find the common area codes where both Tabatha Gehling and Kelly Clauss received votes?",
            "What are the overlapping area codes for votes received by Tabatha Gehling and Kelly Clauss?",
            "List the shared area codes for states where both Tabatha Gehling and Kelly Clauss got votes."
        ],
        "final": [
            "Can you find the common area codes where both Tabatha Gehling and Kelly Clauss received votes?",
            "What are the overlapping area codes for votes received by Tabatha Gehling and Kelly Clauss?",
            "List the shared area codes for states where both Tabatha Gehling and Kelly Clauss got votes."
        ],
        "feedback": [
            "This variation is clear and accurately represents the intent of the query. The term 'common' effectively conveys the intersection condition.",
            "The phrase 'overlapping area codes' accurately captures the intersection concept. The mention of 'votes received' is precise and aligns with the query.",
            "This variation is concise and clear. The use of 'shared area codes' and specifying 'states where both received votes' accurately represents the query conditions."
        ],
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "original_utterance": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'."
    },
    {
        "init": [
            "Which districts have shops with less than 3000 products and also more than 10000 products?",
            "Can you find districts that have at least one shop with fewer than 3000 products and another with more than 10000 products?",
            "Show the districts where shops have both fewer than 3000 products and more than 10000 products."
        ],
        "final": [
            "Which districts have shops with at least one shop housing fewer than 3000 products and another with more than 10000 products?",
            "Can you find districts that have shops with fewer than 3000 products as well as more than 10000 products, but not within the same shop?",
            "Identify the districts where different shops have both fewer than 3000 products and more than 10000 products."
        ],
        "feedback": [
            "This variation is clear but could better highlight that a shop cannot simultaneously have fewer than 3000 products and more than 10000 products.",
            "Good phrasing but could emphasize that different shops within the same district need to satisfy the conditions.",
            "Concise but needs clarity on the requirement that different shops in the same district should meet the conditions separately."
        ],
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "original_utterance": "Which district has both stores with less than 3000 products and stores with more than 10000 products?"
    },
    {
        "init": [
            "Which department has the highest number of degree programs?",
            "Find the department with the most degree programs offered.",
            "Can you show me the department that has the maximum number of degree programs?"
        ],
        "final": [
            "Which department has the highest number of degree programs offered?",
            "Find the department with the most degree programs offered.",
            "Can you show me the department that has the highest number of degree programs?"
        ],
        "feedback": [
            "Clear and concise, but specifying 'offered' would make it more precise.",
            "Good phrasing, aligns well with the intent of the SQL query without technical jargon.",
            "Accurate and clear, but 'maximum number' can be replaced with 'highest number' for natural language flow."
        ],
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which department offers the most number of degrees? List department name and id."
    },
    {
        "init": [
            "Fetch the IDs, role codes, and email addresses of professionals who are not involved in any treatments.",
            "Show me the details of professionals who do not have any treatments assigned to them.",
            "List the professional IDs, role codes, and email addresses of all professionals excluding those who have administered treatments."
        ],
        "final": [
            "Fetch the professional IDs, role codes, and email addresses of professionals who are not involved in any treatments.",
            "Show me the professional IDs, role codes, and email addresses of professionals who do not have any treatments assigned to them.",
            "List the professional IDs, role codes, and email addresses of all professionals, excluding those who have administered treatments."
        ],
        "feedback": [
            "This variation is clear but could be more specific by specifying 'professionals' instead of using the general term 'IDs, role codes, and email addresses'.",
            "Well-phrased, but consider adding the exact details requested.",
            "Clear and concise, however, instead of 'excluding,' use 'excluding those' for better readability."
        ],
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "original_utterance": "Which professional did not operate any treatment on dogs? List the professional's id, role and email."
    },
    {
        "init": [
            "How many models does the American Motor Company produce?",
            "Count the total number of car models made by American Motor Company.",
            "What is the total number of car models associated with the American Motor Company?"
        ],
        "final": [
            "How many car models does the American Motor Company produce in total?",
            "Count the total number of car models made by American Motor Company.",
            "What is the total number of car models made by the American Motor Company?"
        ],
        "feedback": [
            "This variation is straightforward and clear. It accurately reflects the user's question but could emphasize the 'total number' to match the original SQL intent better.",
            "Very clear and directly translates the SQL query's intent. No significant changes needed.",
            "Clear and accurate, but 'associated' might add complexity. Using 'made by' could ensure clarity and alignment with the query's intent."
        ],
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "original_utterance": "How many car models were produced by the maker with full name American Motor Company?"
    },
    {
        "init": [
            "List all courses and their respective teachers, ordered by the teacher's names.",
            "Can you give me a list of courses along with their teachers, sorted alphabetically by teacher's name?",
            "Show the names of teachers and the courses they teach, arranged in order of the teachers' names."
        ],
        "final": [
            "List all courses and their respective teacher's names, ordered alphabetically by the teacher's names.",
            "Can you give me a list of courses along with their teachers, sorted alphabetically by the teacher's name?",
            "Show the names of teachers and the courses they teach, arranged in alphabetical order of the teacher's names."
        ],
        "feedback": [
            "Clear and straightforward, but it could specify that \u2018Name\u2019 refers to a teacher's name for better clarity.",
            "Good phrasing and naturally captures the intent. Ensure the reader understands the alphabetical sorting refers to the teacher's names.",
            "Accurate and concise. Ensure there is no ambiguity that it is the teacher's names being ordered."
        ],
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "original_utterance": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name."
    },
    {
        "init": [
            "What is the total population and the average surface area of countries in North America with a surface area greater than 3000?",
            "Can you provide the sum of the population and the average surface area for North American countries where the surface area exceeds 3000?",
            "Find the total population and the average surface area for countries in North America with surface areas larger than 3000."
        ],
        "final": [
            "What is the total population and the average surface area of countries in North America with a surface area greater than 3000?",
            "Can you provide the total population and the average surface area for North American countries with a surface area of more than 3000?",
            "Find the total population and the average surface area for countries in North America that have surface areas larger than 3000."
        ],
        "feedback": [
            "This variation is clear and directly targets the data requested in the SQL query. It maintains the original intent well.",
            "The phrase 'sum of the population' and 'surface area exceeds 3000' are accurate but can be rephrased to sound a bit more natural.",
            "This variation is concise and accurate, effectively translating the SQL logic into a natural language question without losing clarity."
        ],
        "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "original_utterance": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f"
    },
    {
        "init": [
            "How many unique series names and unique content items are there in the TV Channel database?",
            "What is the count of distinct series and distinct content in the TV Channel?",
            "Can you provide the number of unique series titles and unique content entries within the TV_Channel?"
        ],
        "final": [
            "How many unique series names and unique content items are there in the TV Channel?",
            "What is the count of distinct series titles and distinct content in the TV Channel?",
            "Can you provide the count of unique series titles and unique content entries within the TV Channel?"
        ],
        "feedback": [
            "Clear and accurate, but 'TV Channel database' could be simplified to 'TV Channel' for a smoother flow.",
            "Good phrasing, but consider using 'titles' for 'series' to make it more specific, and avoid 'channel' repetition.",
            "Accurate and detailed. Consider using simpler 'count' instead of 'number' for better alignment with the SQL query."
        ],
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "original_utterance": "List the number of different series names and contents in the TV Channel table."
    },
    {
        "init": [
            "Which language has the fewest number of TV channels?",
            "Show me the language that has the lowest count of TV channels.",
            "Find the language that appears least frequently among the TV channels."
        ],
        "final": [
            "Which language has the fewest number of TV channels?",
            "Show me the language that has the lowest count of TV channels in the current listings.",
            "Find the language that has the smallest number of TV channels."
        ],
        "feedback": [
            "This variation is clear and directly indicates the intent of finding the language with the fewest TV channels. No changes needed.",
            "Good phrasing, but it may benefit from specifying the 'current listings' to avoid any ambiguity related to time.",
            "Accurate and concise, but the term 'appears least frequently' could be simplified to 'has the smallest number' for clarity."
        ],
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "original_utterance": "List the language used least number of TV Channel. List language and number of TV Channel."
    },
    {
        "init": [
            "List the first names of individuals who are either professionals or owners but are not dogs.",
            "Show me the first names of professionals and owners, excluding any names that belong to dogs.",
            "Find all unique first names from professionals and owners, excluding those that match dog names."
        ],
        "final": [
            "List the first names of people who are either professionals or owners but are not dogs.",
            "Show me the first names of professionals and owners, excluding dog names.",
            "Find all first names from professionals and owners, excluding those that match dog names."
        ],
        "feedback": [
            "This variation is clear and captures the intent well. Consider specifying 'individuals' as 'people' for better clarity.",
            "Good formulation, but redundancies like 'professionals and owners' can be streamlined. Also, rephrasing 'excluding any names that belong to dogs' to 'excluding dog names' may be clearer.",
            "Accurate and straightforward. The term 'unique' may be extraneous since 'UNION' already implies uniqueness. Consider simplifying for clarity."
        ],
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "original_utterance": "Which first names are used for professionals or owners but are not used as dog names?"
    },
    {
        "init": [
            "Which students have a 3-year-old cat as a pet?",
            "List the last names of students who own a cat that is 3 years old.",
            "Can you provide the surnames of students with a 3-year-old cat?"
        ],
        "final": [
            "What are the last names of students who have a 3-year-old cat as a pet?",
            "List the last names of students who own a cat that is 3 years old.",
            "Can you provide the surnames of students with a 3-year-old cat?"
        ],
        "feedback": [
            "This variation is clear and naturally phrased, but it could mention 'last names' for specificity.",
            "Accurate and clear. The phrase 'last names of students who own a cat' directly aligns with the query.",
            "Concise and accurate. It avoids technical jargon and aligns well with the SQL query."
        ],
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "original_utterance": "Find the last name of the student who has a cat that is age 3."
    },
    {
        "init": [
            "What are the different major record formats used in the orchestra, sorted by the least common?",
            "Can you list the major record formats used by the orchestra in order from the least to most frequent?",
            "Provide the major record formats in the orchestra, organized by how rarely they are used."
        ],
        "final": [
            "What are the different major record formats used in the orchestra, listed from least to most common?",
            "Can you list the major record formats used by the orchestra, sorted in ascending order of frequency?",
            "Provide the major record formats in the orchestra, organized by how rarely they are used."
        ],
        "feedback": [
            "This variation captures the intent but could be clearer by specifying it is a list format. Also, 'sorted by the least common' could be rephrased to be more straightforward.",
            "Effective variation, but including a clearer reference like 'sorted in ascending order of frequency' would improve the phrasing.",
            "Good phrasing and concise. The term 'organized' is more user-friendly and avoids technical jargon. No significant changes needed."
        ],
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "original_utterance": "Please show the record formats of orchestras in ascending order of count."
    },
    {
        "init": [
            "Which museums have not been visited?",
            "Show me the museums that have no visit records.",
            "List the names of museums that haven't had any visitors."
        ],
        "final": [
            "Which museums have not been visited?",
            "Show me the names of museums that have no visit records.",
            "List the names of museums that haven't had any visitors."
        ],
        "feedback": [
            "Clear and concise. No major changes needed but it could also specify that it's showing the names of the museums.",
            "Good phrasing. Ensure the intent of retrieving the names is explicit. The term 'visit records' is understandable for non-technical users.",
            "Accurate and clear. The word 'visitors' is a good substitute for 'visit records' but ensure to keep the focus on museum names."
        ],
        "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "original_utterance": "What is the name of the museum that had no visitor yet?"
    },
    {
        "init": [
            "Show me the IDs, names, and ages of visitors who have visited more than once.",
            "Can you list the details of visitors who have made multiple visits, including their ID, name, and age?",
            "Provide the IDs, names, and ages of visitors who have visited more than one time."
        ],
        "final": [
            "Show me the IDs, names, and ages of visitors who have visited more than once.",
            "Can you list the details of visitors who have made multiple visits, including their ID, name, and age?",
            "Provide the IDs, names, and ages of visitors who have visited more than one time."
        ],
        "feedback": [
            "This variation is clear and accurately represents the intent of the SQL query. No changes needed.",
            "This variation is precise and covers all the important details. The wording is slightly formal but acceptable.",
            "This variation is concise and effectively communicates the query's intent. No changes required."
        ],
        "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "original_utterance": "find the id, name and age for visitors who visited some museums more than once."
    },
    {
        "init": [
            "What is the total population of countries grouped by their government form, where the average life expectancy is greater than 72?",
            "Can you provide the total population by government type for countries with an average life expectancy exceeding 72 years?",
            "Find the sum of the population for each government form category where the average life expectancy is more than 72."
        ],
        "final": [
            "What is the total population in these countries grouped by their government form, where the average life expectancy is greater than 72?",
            "Can you provide the total population by each government form for countries with an average life expectancy exceeding 72 years?",
            "Find the sum of the population by government form where the average life expectancy is more than 72."
        ],
        "feedback": [
            "This variation is clear but could use a more natural flow by rearranging the order of information. Adding 'in these countries' might add clarity.",
            "Good phrasing, but 'government type' might be unclear. Consider using 'government form' for consistency. Adding 'each' before 'government type' could also improve clarity.",
            "Accurate and concise, yet it should use 'by government form' instead of 'for each government form category' to stay true to the query's simplicity. Avoid the word 'category' to reduce ambiguity."
        ],
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "original_utterance": "Find the government form name and total population for each government form whose average life expectancy is longer than 72."
    },
    {
        "init": [
            "Show me the names of visitors who have a membership level higher than 4, sorted by their membership levels in descending order.",
            "Can you list the visitors with a membership level above 4, ordered by the highest membership level first?",
            "Find the names of all visitors who have a membership level greater than 4 and sort them by their membership levels in descending order."
        ],
        "final": [
            "Show me the names of visitors with a membership level higher than 4, sorted from highest to lowest.",
            "Can you list the visitors who have a membership level above 4, starting with the highest membership level?",
            "Find the names of all visitors with a membership level greater than 4, ordered from highest to lowest level."
        ],
        "feedback": [
            "Good clarity and precise. However, the phrase 'sorted by their membership levels in descending order' is slightly technical. Consider simplifying.",
            "Clear phrasing but mentioning 'ordered by the highest membership level first' might still sound technical. Simplifying further can improve natural language flow.",
            "Accurate and thorough but lengthy. The phrase 'sort them by their membership levels in descending order' can be made simpler for better readability."
        ],
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "original_utterance": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low."
    },
    {
        "init": [
            "Show me the airline with the least number of flights and provide its abbreviation and country.",
            "Which airline has the fewest flights, and what are its abbreviation and country?",
            "Find the airline with the smallest number of flights and display its abbreviation and country."
        ],
        "final": [
            "Show me the airline with the least number of flights and provide its abbreviation and country.",
            "Which airline has the least number of flights, and what are its abbreviation and country?",
            "Find the airline with the fewest flights and display its abbreviation and country."
        ],
        "feedback": [
            "This variation is clear and captures the intent of finding the airline with the least flights. It is slightly verbose but accurately describes the query.",
            "Good phrasing and concise. Instead of 'fewest,' consider 'least number of' for simplicity and clarity. It well matches the input query.",
            "Accurate and fluent. The term 'smallest number of flights' might be replaced with 'fewest flights' to enhance natural language flow."
        ],
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_utterance": "Find the abbreviation and country of the airline that has fewest number of flights?"
    },
    {
        "init": [
            "Which battles resulted in more than 10 deaths caused by ships that were lost in those battles?",
            "Identify the battles where the total number of deaths caused by ships lost in the battle exceeds 10.",
            "Find battles with a total death count greater than 10, where deaths were caused by ships lost in those battles."
        ],
        "final": [
            "Which battles had a total death count of over 10, caused by ships that were lost in those battles?",
            "Identify the battles where the sum of deaths caused by ships lost in the battle is more than 10.",
            "Find battles with deaths totaling more than 10, as a result of ships that were lost in those battles."
        ],
        "feedback": [
            "This variation is clear and aligns with the query, but it could be more explicit in mentioning the need to sum the deaths.",
            "Good specificity about the death total exceeding 10. It aligns well with the query's logic and intent.",
            "This variation is accurate, but the phrasing could be simplified for clarity. The concept of a 'death count' was introduced, which is relevant to the original query."
        ],
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "original_utterance": "What are the ids and names of the battles that led to more than 10 people killed in total."
    },
    {
        "init": [
            "What is the average and maximum age of each type of pet?",
            "Can you provide the average and the oldest age for each pet type?",
            "I need the average age and the maximum age for pets, categorized by their type."
        ],
        "final": [
            "What is the average and maximum age of each pet type?",
            "Can you provide the average and maximum age for each pet type?",
            "I need the average age and the maximum age for pets, categorized by pet type."
        ],
        "feedback": [
            "This variation is clear and accurate but could use 'each pet type' for enhanced clarity.",
            "Good phrasing, but 'oldest age' can be misinterpreted. Consider using 'maximum age' for better alignment with the query.",
            "Accurate and concise, but it could benefit from specifying 'for each pet type' to avoid ambiguity."
        ],
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "original_utterance": "Find the average and maximum age for each type of pet."
    },
    {
        "init": [
            "Which countries have more than three car makers or a car model named 'fiat'?",
            "Show the country IDs and names of countries that either have more than three car manufacturers or produce a car model called 'fiat'.",
            "Find all countries with more than three car manufacturers, as well as those that produce a car model named 'fiat'."
        ],
        "final": [
            "Which countries have more than three car makers or a car model named 'fiat'?",
            "Show the country IDs and names of countries that either have more than three car manufacturers or have a car model called 'fiat'.",
            "Find all countries with more than three car manufacturers, as well as those that either have a car model named 'fiat'."
        ],
        "feedback": [
            "This variation is clear and correctly captures the query's intent. However, it can be slightly more explicit by indicating it is checking for multiple car makers.",
            "Good phrasing, but consider replacing 'produce' with 'have' as 'produce' might imply direct manufacturing rather than affiliation.",
            "Accurate and clear. No changes needed, but adding 'either' can make it clearer that it's querying two separate conditions."
        ],
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "original_utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?"
    },
    {
        "init": [
            "List the ID and cell number of professionals who have conducted at least two treatments.",
            "Can you provide the professional ID and cell phone number for those who have handled two or more treatments?",
            "Fetch the IDs and contact details of professionals with a minimum of two treatments conducted."
        ],
        "final": [
            "List the ID and cell number of professionals who have conducted at least two treatments.",
            "Can you provide the professional ID and cell number for those who have conducted two or more treatments?",
            "Fetch the IDs and cell phone numbers of professionals with a minimum of two treatments conducted."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the query. It avoids technical jargon and SQL terms.",
            "This variation is also clear. However, using 'handle' could be vague; try to specify the context of 'conduct' to maintain consistency.",
            "This variation is concise and correctly interprets the SQL intent. Using 'contact details' might be overly general; specifying 'cell number' is better."
        ],
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_utterance": "Which professionals have done at least two types of treatments? List the professional id and cell phone."
    },
    {
        "init": [
            "Which document IDs have between one and two paragraphs?",
            "Show me the document IDs that contain either one or two paragraphs.",
            "Find document IDs where the number of paragraphs is between one and two."
        ],
        "final": [
            "Which document IDs have between one and two paragraphs?",
            "Show me the document IDs that contain either one or two paragraphs.",
            "Find document IDs that have between one and two paragraphs."
        ],
        "feedback": [
            "This variation clearly conveys the intent of the SQL query without any technical jargon. It accurately reflects the constraint of having between one and two paragraphs.",
            "This phrasing is also accurate and clear. The terms 'contain either one or two' emphasize the range constraint effectively.",
            "The term 'where the number of paragraphs is between one and two' is clear and specific, though 'where' could potentially confuse someone who is not familiar with SQL."
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "original_utterance": "What is the document id with 1 to 2 paragraphs?"
    },
    {
        "init": [
            "Which hometown does the youngest teacher come from?",
            "What is the hometown of the youngest teacher?",
            "Can you find the hometown of the teacher who is the youngest?"
        ],
        "final": [
            "Which hometown does the youngest teacher come from?",
            "What is the hometown of the youngest teacher?",
            "Can you find the hometown of the youngest teacher?"
        ],
        "feedback": [
            "This variation is clear and accurate. It captures the query's intent without using technical SQL terms. No changes needed.",
            "Good phrasing and clear intent, but it could be more precise by explicitly mentioning 'the teacher.'",
            "Accurate and understandable. However, 'who is the youngest' could be simplified to 'the youngest.'"
        ],
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "original_utterance": "What is the hometown of the youngest teacher?"
    },
    {
        "init": [
            "How many female students own a dog?",
            "Count the number of female students who have a pet dog.",
            "What is the number of female students that have dogs as their pets?"
        ],
        "final": [
            "How many female students own a dog?",
            "Count the number of female students who have a dog.",
            "What is the number of female students who have dogs as their pets?"
        ],
        "feedback": [
            "Clear and accurate. No major issues, but you may want to specify 'own' to avoid any potential ambiguity.",
            "Well phrased, but consider removing 'pet' for brevity, as 'dog' already implies it is a pet.",
            "Precise and conveys the intent well. No changes needed, although 'that have' might be rephrased for clarity."
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "original_utterance": "Find the number of dog pets that are raised by female students (with sex F)."
    },
    {
        "init": [
            "Show me the makes and their IDs of cars that have more horsepower than the minimum in the dataset and have 3 or fewer cylinders.",
            "Find the make IDs and names of cars with horsepower greater than the minimum recorded and with no more than 3 cylinders.",
            "Can you list the make IDs and makes of cars which have higher horsepower than the minimum value in the dataset and have less or equal to 3 cylinders?"
        ],
        "final": [
            "Show me the make IDs and their names of cars that have more horsepower than the minimum in the dataset and have 3 or fewer cylinders.",
            "Find the make IDs and names of cars with horsepower greater than the minimum recorded and with 3 or fewer cylinders.",
            "Can you list the make IDs and makes of cars which have higher horsepower than the minimum value in the dataset and have less or equal to 3 cylinders?"
        ],
        "feedback": [
            "This variation is clear, but 'makes and their IDs' can be more fluently phrased as 'make IDs and their names.'",
            "Good phrasing, but 'no more than 3 cylinders' might be clearer as '3 or fewer cylinders.'",
            "This is clear and retains the original query's intent well. No changes needed."
        ],
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "original_utterance": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name."
    },
    {
        "init": [
            "What is the most recent transcript date?",
            "Can you show me the latest date in the Transcripts?",
            "Find the latest transcript date available."
        ],
        "final": [
            "What is the most recent transcript date?",
            "Can you show me the latest transcript date?",
            "Find the latest transcript date."
        ],
        "feedback": [
            "This variation is clear and precise. However, using 'transcript date' is specific and direct, which is good.",
            "Using 'latest date' might be a bit ambiguous. Mentioning 'transcripts' directly would make it clearer.",
            "This is a good variation. It avoids jargon and is straightforward, though 'available' is somewhat redundant."
        ],
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "original_utterance": "What is the last transcript release date?"
    },
    {
        "init": [
            "Show the transcript dates and IDs of transcripts that have two or more contents.",
            "Can you list the dates and IDs of transcripts where the number of contents is at least two?",
            "Find the transcript dates and IDs for transcripts with two or more associated contents."
        ],
        "final": [
            "Show the transcript dates and IDs of transcripts that have two or more contents.",
            "Can you list the dates and IDs of transcripts with at least two contents?",
            "Find the transcript dates and IDs for transcripts with two or more associated contents."
        ],
        "feedback": [
            "This variation is clear and focuses on the number of contents, which aligns well with the SQL query. No changes needed.",
            "This variation is precise but can be simplified for better natural language flow. The phrase 'number of contents is at least two' can be made more natural.",
            "Good phrasing and clarity. No significant changes are needed, but it\u2019s important to ensure the term 'associated contents' is understood in context."
        ],
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "original_utterance": "Show the date and id of the transcript with at least 2 course results."
    },
    {
        "init": [
            "Which students are both friends with someone and liked by someone?",
            "Show the student IDs that appear in both the Friend and Likes tables.",
            "Find the students who are listed as friends and are also liked by someone."
        ],
        "final": [
            "Which students are both friends with someone and liked by someone?",
            "Show the student IDs who are both friends and liked by someone.",
            "Find the students who are both friends and liked by someone."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent of the query. It avoids technical terminology and presents the query in a very user-friendly manner.",
            "While this phrasing is accurate, it directly references the tables ('Friend' and 'Likes'). It would be better to phrase it in a more natural and less technical way.",
            "This variation is clear and effectively interprets the SQL query. It's well-phrased and avoids technical jargon, but can be slightly shortened for brevity."
        ],
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "original_utterance": "Show the ids of high schoolers who have friends and are also liked by someone else."
    },
    {
        "init": [
            "Can you provide the email addresses of professionals located in either Hawaii or Wisconsin?",
            "Show me the email addresses of professionals who are based in Hawaii or Wisconsin.",
            "Fetch the email addresses of professionals in the states of Hawaii and Wisconsin."
        ],
        "final": [
            "Can you provide the email addresses of professionals from either Hawaii or Wisconsin?",
            "Show me the email addresses of professionals who are based in Hawaii or Wisconsin.",
            "Fetch the email addresses of professionals from Hawaii and Wisconsin."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the query. However, using 'either' might suggest exclusivity. Clarifying with 'in either' is good, but 'located in' could be changed to 'from' for more common phrasing.",
            "This is a clear and precise variation. No changes are necessary; it directly addresses professionals based in the specified states.",
            "The phrase 'fetch the email addresses' is clear, but 'the states of' might be redundant. Simplifying it to 'from Hawaii and Wisconsin' would be clearer."
        ],
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "original_utterance": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin."
    },
    {
        "init": [
            "Which semesters have no student enrollments?",
            "Show me the names of semesters that do not have any students enrolled.",
            "Can you list the semesters without any students enrolled in them?"
        ],
        "final": [
            "Which semester names have no student enrollments?",
            "Show me the names of semesters that do not have any students enrolled.",
            "Can you list the names of semesters without any students enrolled in them?"
        ],
        "feedback": [
            "The variation is clear and accurately reflects the SQL query. Adding specificity such as 'names' of semesters can enhance clarity.",
            "This is a good variation. It's precise and does not include technical jargon. It captures the original query intent well.",
            "This variation is also accurate. Consider specifying 'names' for better alignment with the original SQL query. Otherwise, it's clear and effective."
        ],
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "original_utterance": "Which semesters do not have any student enrolled? List the semester name."
    },
    {
        "init": [
            "What is the average life expectancy of countries where English is not an official language?",
            "Can you provide the average life expectancy for countries that do not have English as an official language?",
            "Find the average life expectancy of countries that do not officially recognize English as a language."
        ],
        "final": [
            "What is the average life expectancy of countries where English is not an official language?",
            "Can you show the average life expectancy for countries that do not have English as an official language?",
            "Find the average life expectancy of countries that do not officially recognize English as a language."
        ],
        "feedback": [
            "This variation is accurate and clearly conveys the SQL query's intent. It encapsulates both the 'average life expectancy' and the exclusion of countries with English as an official language.",
            "This query captures the main idea well but could be slightly revised for better clarity. The term 'provide' could be switched to something more specific like 'show.' Consider clarifying the negation aspect ('not have English as an official language').",
            "This variation is precise and avoids SQL-specific terminology. The phrase 'do not officially recognize English as a language' effectively translates the subquery's logic. No significant changes needed."
        ],
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "original_utterance": "What is average life expectancy in the countries where English is not the official language?"
    },
    {
        "init": [
            "Which airlines operate flights from CVO but not from APG?",
            "List the airlines that have flights originating from CVO and do not have flights from APG.",
            "Can you provide the names of airlines that depart from CVO but do not depart from APG?"
        ],
        "final": [
            "Which airlines fly from CVO but not from APG?",
            "List the airlines that fly from CVO but not from APG.",
            "Can you provide the names of airlines that fly from CVO but do not fly from APG?"
        ],
        "feedback": [
            "This variation is clear, but specifying 'operate flights' might be a bit technical. Instead, 'fly from' might be more natural.",
            "Good phrasing but a bit long. Simplify by removing redundant elements such as 'originating from'.",
            "Accurate and concise, though 'depart' might sound technical; consider using 'fly from' for better accessibility."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "original_utterance": "Find all airlines that have flights from airport 'CVO' but not from 'APG'."
    },
    {
        "init": [
            "Which TV channel airs the episode titled 'A Love of a Lifetime'?",
            "Find the TV channel that broadcast the episode called 'A Love of a Lifetime'.",
            "Can you tell me which channel has the series that includes the episode 'A Love of a Lifetime'?"
        ],
        "final": [
            "Which TV channel has the series that aired the episode titled 'A Love of a Lifetime'?",
            "Find the TV channel that has the series with the episode called 'A Love of a Lifetime'.",
            "Can you tell me which channel's series includes the episode 'A Love of a Lifetime'?"
        ],
        "feedback": [
            "This variation is clear and straightforward. It directly asks for the channel airing the specified episode but could clarify that it\u2019s looking for the series name.",
            "The wording is understandable, but it gives the impression that the episode is being broadcast now. It should specify it is about identifying the series associated with the episode.",
            "This is accurate but a bit verbose. The phrase 'has the series that includes the episode' could be simplified to improve clarity and conciseness."
        ],
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "original_utterance": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name."
    },
    {
        "init": [
            "Who is the youngest player and their country code?",
            "Identify the player with the earliest birth date, including their first name and country code.",
            "Show me the first name and country code of the player born earliest."
        ],
        "final": [
            "Who is the youngest player and what is their country code?",
            "Identify the player with the earliest birth date, showing their first name and country code.",
            "Show me the first name and country code of the player born earliest in the records."
        ],
        "feedback": [
            "This variation is mostly clear but does not explicitly mention the format for returning the country code. It also could specify that the search is within the 'players' table.",
            "This variation is accurate and detailed. It could be slightly more concise, but it captures the SQL query's intent well.",
            "This variation is clear and informative but might benefit from specifying that the 'earliest birth date' refers to the players' records. It's mostly fine but clarity could be improved for non-technical users."
        ],
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "original_utterance": "Find the first name and country code of the oldest player."
    },
    {
        "init": [
            "Which teachers are assigned to teach two or more courses?",
            "Can you list the names of teachers who are teaching at least two courses?",
            "Find the teachers who have been assigned to multiple courses."
        ],
        "final": [
            "Which teachers are assigned to teach two or more courses?",
            "Can you list the names of teachers who are teaching two or more courses?",
            "Find the teachers who have been assigned to teach two or more courses."
        ],
        "feedback": [
            "Clear and precise. It accurately captures the SQL query's intent without technical jargon. No changes needed.",
            "Effective phrasing, but 'at least two courses' could be simplified to 'two or more courses' for better natural language flow.",
            "Good phrasing, but 'multiple courses' could be more specific to 'two or more courses' to precisely match the query's intent."
        ],
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "original_utterance": "Show names of teachers that teach at least two courses."
    },
    {
        "init": [
            "What is the average and maximum number of tickets from the visit data?",
            "Show me the average number of tickets and the highest number recorded from the visits.",
            "Can you find the average ticket count and the maximum number of tickets in the visit records?"
        ],
        "final": [
            "What is the average and maximum number of tickets from the visit data?",
            "Show me the average and highest number of tickets from the visits.",
            "Can you find the average ticket count and the maximum number of tickets in the visit records?"
        ],
        "feedback": [
            "This variation is clear and accurate. It mentions 'visit data,' which aligns well with the SQL query targeting the 'visit' table.",
            "Good phrasing but could be more concise. The word 'recorded' may be unnecessary and could be shortened for better clarity.",
            "Accurate and clear. The term 'visit records' is a good natural language replacement for referencing the table schema. No major changes needed."
        ],
        "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "original_utterance": "What are the average and maximum number of tickets bought in all visits?"
    },
    {
        "init": [
            "Show me the distinct IDs and names of battles where the ship type was a Brig.",
            "List the unique battle IDs and names that involved ships of type Brig.",
            "Can you provide the distinct IDs and names of battles where Brig-type ships were lost?"
        ],
        "final": [
            "Show me the distinct IDs and names of battles that included Brig-type ships.",
            "List the distinct battle IDs and names where Brig-type ships were involved.",
            "Can you provide the distinct IDs and names of battles involving Brig-type ships?"
        ],
        "feedback": [
            "This variation is clear in specifying that it's looking for battles involving Brig-type ships. The use of 'distinct' is appropriate here.",
            "This variation is accurate but could benefit from more natural phrasing. The term 'unique' could be made simpler with 'distinct'.",
            "This variation is precise and includes the key SQL elements without overuse of technical jargon. It mentions 'Brig-type ships were lost,' which aligns well with the JOIN condition."
        ],
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "original_utterance": "What are the different ids and names of the battles that lost any 'Brig' type shipes?"
    },
    {
        "init": [
            "What is the name and release year of the song by the youngest singer?",
            "Can you tell me the name and release year of the song from the youngest artist?",
            "Find the song and its release year by the youngest singer available."
        ],
        "final": [
            "What is the name and release year of the song by the youngest singer?",
            "Can you tell me the name and release year of the song from the youngest singer?",
            "Find the song and its release year by the youngest singer."
        ],
        "feedback": [
            "Clear and accurate. Mentioning 'the youngest singer' aligns well with sorting by age.",
            "Good phrasing but avoid the vague term 'artist'. Specify 'singer' to align with the table name for clear context.",
            "Concise and precise. Remove the phrase 'available,' as it adds unnecessary complexity to the query."
        ],
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "original_utterance": "Show the name and the release year of the song by the youngest singer."
    },
    {
        "init": [
            "Find the name of the country in Europe with a population of 80,000.",
            "Which country in Europe has exactly an 80,000 population?",
            "Show me the country located in Europe with a population size of 80,000."
        ],
        "final": [
            "Find the name of the country in Europe with a population of 80,000.",
            "Which country in Europe has exactly an 80,000 population?",
            "Show me the country in Europe with a population size of 80,000."
        ],
        "feedback": [
            "Clear and accurately captures the intent. The phrasing is natural and doesn't include technical SQL jargon. No changes needed.",
            "This phrasing is accurate and clear. The word 'exactly' helps to emphasize the specific population. No changes needed.",
            "The phrasing is accurate but could be more concise. The term 'show me' is good, but 'located in' can be shortened to 'in' for brevity."
        ],
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "original_utterance": "What are the names of the countries that are in the continent of Europe and have a population of 80000?"
    },
    {
        "init": [
            "Which singers have performed more than one song?",
            "List all singers who have more than one song.",
            "Show the names of singers who have sung multiple songs."
        ],
        "final": [
            "Which singers have performed more than one distinct song?",
            "List all singers who have performed more than one distinct song.",
            "Show the names of singers who have performed multiple songs."
        ],
        "feedback": [
            "Clear and straightforward, but could be enhanced by specifying the performance of more than one distinct song.",
            "Good phrasing, but it can be improved by specifying that the singer must have performed more than one distinct song.",
            "Accurate and concise. No major changes needed, but 'sung' could be replaced with 'performed' for consistency."
        ],
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "original_utterance": "Show the names of singers that have more than one song."
    },
    {
        "init": [
            "Show me the description of departments that have 'computer' in their name.",
            "What are the descriptions of the departments with 'computer' in their names?",
            "Can I get the department descriptions for all departments that include 'computer' in their names?"
        ],
        "final": [
            "Show me the description of departments that have 'computer' in their name.",
            "What are the descriptions of the departments with 'computer' in their name?",
            "Can I get the department descriptions of the departments that include 'computer' in their names?"
        ],
        "feedback": [
            "This variation is clear and accurately conveys the intent of the SQL query. No changes needed.",
            "This variation is accurate; however, the phrasing can be slightly refined to avoid redundancy by rephrasing 'in their names.'",
            "Good phrasing, but it could be more concise. Instead of 'descriptions for all departments,' you could directly say 'descriptions of departments.'"
        ],
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "original_utterance": "What is the description of the department whose name has the substring the computer?"
    },
    {
        "init": [
            "What is the horsepower of the car with the fastest acceleration?",
            "Can you provide the horsepower of the car that has the highest acceleration?",
            "Find the horsepower for the car with the quickest acceleration?"
        ],
        "final": [
            "What is the horsepower of the car with the fastest acceleration?",
            "Can you provide the horsepower of the car with the fastest acceleration?",
            "Find the horsepower for the car with the fastest acceleration."
        ],
        "feedback": [
            "This variation is clear and accurately conveys the original query's intent. No improvements needed.",
            "This is accurate, but the phrase 'highest acceleration' might be slightly confusing. 'Fastest acceleration' might be clearer.",
            "This conveys the meaning well, but changing 'quickest' to 'fastest' might make it more consistent with common terminology."
        ],
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "original_utterance": "What is the horsepower of the car with the largest accelerate?"
    },
    {
        "init": [
            "What are the average, minimum, and maximum ages of singers from France?",
            "Can you provide the average, youngest, and oldest ages of singers who are from France?",
            "Show the average, lowest, and highest ages of singers originating from France."
        ],
        "final": [
            "What are the average, youngest, and oldest ages of singers from France?",
            "Can you share the average, youngest, and oldest ages of singers who are from France?",
            "Show the average, youngest, and oldest ages of singers originating from France."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query. However, consider specifying 'age' more conversationally, such as 'ages of singers'.",
            "Good phrasing, but 'youngest' and 'oldest' can be more natural than controlling for technicality. Also, 'provide' can be replaced with a more conversational verb.",
            "The variation is accurate. 'Lowest' and 'highest' can be rephrased to 'youngest' and 'oldest' for a more natural flow."
        ],
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "original_utterance": "What is the average, minimum, and maximum age of all singers from France?"
    },
    {
        "init": [
            "Show all unique car models either made by General Motors or with a weight over 3500.",
            "List distinct car models produced by General Motors or cars that weigh more than 3500 pounds.",
            "Which car models are unique to General Motors or have a weight exceeding 3500 pounds?"
        ],
        "final": [
            "List all distinct car models made by General Motors or that have a weight over 3500 pounds.",
            "Show distinct car models either produced by General Motors or those that weigh more than 3500 pounds.",
            "What distinct car models are made by General Motors or have a weight exceeding 3500 pounds?"
        ],
        "feedback": [
            "This variation is generally clear, but the phrase 'unique car models' might better be 'distinct car models' to mirror the SQL terminology while still remaining natural.",
            "Good clarity, but explicitly mentioning that it is about 'distinct' models might improve accuracy. Also, specifying 'produced' adds clarity, although 'by General Motors' is already clear.",
            "This variation is clear and concise but can be improved by avoiding overly technical phrasing like 'unique to General Motors,' which might imply exclusivity beyond production."
        ],
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "original_utterance": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?"
    },
    {
        "init": [
            "How many friends does the high schooler named Kyle have?",
            "Count the number of friends for the student named Kyle.",
            "What is the total number of friends associated with the high school student Kyle?"
        ],
        "final": [
            "How many friends does the high schooler named Kyle have?",
            "How many friends does the high school student named Kyle have?",
            "What is the total number of friends of the high school student Kyle?"
        ],
        "feedback": [
            "This variation is clear and accurately captures the query's intent. It is concise and natural.",
            "Good phrasing, but 'count the number of friends' could be slightly rephrased to sound more natural. Also, specifying 'student' is fine but could be made more specific to 'high schooler'.",
            "Accurate and detailed, although 'associated with' could be replaced with 'of' for brevity and improved natural language flow."
        ],
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_utterance": "How many friends does the high school student Kyle have?"
    },
    {
        "init": [
            "Which countries do not have any car makers?",
            "List the countries that are not associated with any car manufacturers.",
            "Can you provide the names of countries without car manufacturing companies?"
        ],
        "final": [
            "Which countries do not have any car manufacturers?",
            "List the countries that do not have any car manufacturers.",
            "Can you provide the names of countries without car manufacturers?"
        ],
        "feedback": [
            "This variation is clear but could specify 'car manufacturers' instead of 'car makers' for more precision and clarity.",
            "Accurate and clear. The word 'associated' fits well but can be simplified for better flow.",
            "Clear and accurate but could be shortened slightly. The phrase 'car manufacturing companies' can be simplified to 'car manufacturers' for brevity."
        ],
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "original_utterance": "What are the name of the countries where there is not a single car maker?"
    },
    {
        "init": [
            "Find the IDs of high schoolers who do not have any friends.",
            "Can you list the high school students whose IDs are not found in the Friend table?",
            "Show me the student IDs from the Highschooler table that are not present in the Friend table."
        ],
        "final": [
            "Find the IDs of high schoolers whose IDs are not listed as friends.",
            "Can you list the high school students whose IDs are not included as friends?",
            "Show me the student IDs not recorded as friends."
        ],
        "feedback": [
            "The phrasing is natural and clear. However, it could be interpreted as searching for students who have no friends at all rather than those with IDs not in the Friend table.",
            "This phrasing is precise but may be too technical by mentioning 'Friend table.' Consider simplifying to maintain natural language flow.",
            "Accurate but mentions 'table,' which introduces unnecessary technical jargon. It is otherwise clear and concise."
        ],
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "original_utterance": "Show ids of all students who do not have any friends."
    },
    {
        "init": [
            "Which cities have more than one employee who is younger than 30?",
            "Can you list the cities that have more than one employee aged under 30?",
            "Find the cities where the count of employees under 30 is greater than one."
        ],
        "final": [
            "Which cities have more than one employee who is younger than 30?",
            "Can you list the cities that have more than one employee under 30 years old?",
            "Find the cities where there are more than one employees under the age of 30."
        ],
        "feedback": [
            "This variation is clear and to the point. It accurately captures the criteria of the query. No changes needed.",
            "Good phrasing but specifying 'aged under 30' could be simplified to 'under 30 years old' for better fluency. The term 'list' is appropriate here.",
            "This variation accurately translates the query into natural language. It might benefit from removing the technical phrase 'count of' to make it more conversational."
        ],
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_utterance": "Which cities do more than one employee under age 30 come from?"
    },
    {
        "init": [
            "How many students over the age of 20 have pets?",
            "Can you count the number of students older than 20 who own pets?",
            "Find the total number of students above the age of 20 that have pets."
        ],
        "final": [
            "How many students over the age of 20 own pets?",
            "Can you count the number of students older than 20 who own pets?",
            "Find the total number of students above the age of 20 who own pets."
        ],
        "feedback": [
            "Clear and concise, accurately reflects the intent of the query. However, it might be good to specify owning pets instead of having pets for clarity.",
            "Accurate, but it would be better to mention 'own pets' rather than 'have pets' to avoid ambiguity.",
            "Good phrasing but could be more concise. The term 'own pets' is preferable to 'have pets' for clarity."
        ],
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "original_utterance": "Find number of pets owned by students who are older than 20."
    },
    {
        "init": [
            "Who is the player with the most match victories, and what are their rank points?",
            "Show me the player with the highest number of wins along with their ranking points.",
            "Which player has won the most matches, and what is their rank points?"
        ],
        "final": [
            "Who is the player with the most match victories, and what are their rank points?",
            "Show me the player with the highest number of match wins along with their rank points.",
            "Which player has won the most matches, and what are their ranking points?"
        ],
        "feedback": [
            "This variation is accurate but could benefit from a little more clarity by explicitly mentioning the 'matches' database context.",
            "Good clarity and conciseness. The term 'wins' is more natural and less technical compared to the direct SQL language.",
            "The phrasing 'what is their rank points' is slightly awkward. Consider rephrasing for better fluency and naturalness."
        ],
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Find the name and rank points of the winner who won the most times."
    },
    {
        "init": [
            "Who is the most liked high schooler?",
            "Can you show me the high schooler who received the most likes?",
            "Find the high schooler with the highest number of likes."
        ],
        "final": [
            "Who is the most liked high schooler?",
            "Can you show me the high schooler with the most total likes?",
            "Find the high schooler with the highest number of likes."
        ],
        "feedback": [
            "This variation is very clear and accurately captures the query's intent. No SQL-specific jargon is used, making it easy to understand for non-technical users.",
            "This variation is also clear, but the phrase 'received the most likes' might imply active reception, whereas the SQL query is more about the aggregate number of likes. Consider refining for precision.",
            "This variation is precise and aligns well with the query's logic. It also avoids technical SQL terms, making it appropriate for natural language understanding."
        ],
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What is the name of the high schooler who has the greatest number of likes?"
    },
    {
        "init": [
            "What are the feature type names for features called 'AirCon'?",
            "Can you list the feature type names categorized under 'AirCon'?",
            "Find the feature type names that are associated with 'AirCon'."
        ],
        "final": [
            "What are the types of features called 'AirCon'?",
            "Can you list the feature types associated with 'AirCon'?",
            "Find the feature types that are related to 'AirCon'."
        ],
        "feedback": [
            "This variation is clear and directly conveys the action of retrieving feature type names. However, the terminology 'feature type names' might need to be simplified for better understanding.",
            "Good phrasing but the word 'categorized' introduces ambiguity. 'Associated' or 'related to' might be clearer and avoid confusion.",
            "Accurate and concise. However, adding 'available' can enhance clarity, indicating it is about available features."
        ],
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "original_utterance": "What is the feature type name of feature AirCon?"
    },
    {
        "init": [
            "What is the date and ID of the transcript with the fewest entries in the transcript contents?",
            "Show me the transcript date and ID that has the least number of entries.",
            "Find the transcript with the earliest date and ID that has the fewest related contents."
        ],
        "final": [
            "What is the date and ID of the transcript with the fewest records in the transcript contents?",
            "Show me the transcript date and ID that has the least number of entries.",
            "Find the transcript date and ID with the lowest number of associated contents."
        ],
        "feedback": [
            "This variation accurately describes the query, but the word 'entries' could be replaced with 'records' to avoid ambiguity.",
            "Clear and concise. It avoids any SQL-specific terminology and is easily understood by non-technical users.",
            "While it's mostly accurate, mentioning 'earliest date' could potentially confuse the order of results since it's not part of the original SQL query condition."
        ],
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "original_utterance": "Show the date of the transcript which shows the least number of results, also list the id."
    },
    {
        "init": [
            "Which airlines have flights that land at AHD airport?",
            "Show me the airlines with flights arriving at AHD.",
            "List the airlines that operate flights to AHD airport."
        ],
        "final": [
            "Which airlines have flights that land at AHD airport?",
            "Can you list the airlines with flights arriving at AHD?",
            "List the airlines that operate flights to AHD airport."
        ],
        "feedback": [
            "This variation is clear and captures the intent well. No changes are needed.",
            "Good phrasing and clear. 'Show me' could be perceived as a command; consider rephrasing to make it more like a query to improve the natural language flow slightly.",
            "This variation is accurate and concise, and avoids technical jargon. No changes needed."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "original_utterance": "What are airlines that have flights arriving at airport 'AHD'?"
    },
    {
        "init": [
            "How many car models are made by manufacturers from the USA?",
            "Can you count the total number of car models from American manufacturers?",
            "Show me the number of car models produced by US-based car makers."
        ],
        "final": [
            "How many car models are produced by manufacturers from the USA?",
            "Can you count the total number of car models from American manufacturers?",
            "Show me the number of car models produced by manufacturers based in the USA."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the intent of the SQL query. However, it could be more specific by indicating the context of the count.",
            "This variation is very precise and accurately captures the query's intent. No major changes needed.",
            "The variation is clear and accurate. The use of 'US-based car makers' can be interpreted in different ways; specifying 'manufacturers' might add to clarity."
        ],
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "original_utterance": "How many car models are produced in the usa?"
    },
    {
        "init": [
            "Display the names of highschoolers who have two or more likes.",
            "Can you list the names of students who are liked by at least two people?",
            "Find the names of students who have received at least two likes."
        ],
        "final": [
            "Display the names of highschoolers who have two or more likes.",
            "Can you list the names of students who have received at least two likes?",
            "Find the names of students who have received at least two likes."
        ],
        "feedback": [
            "This variation is clear and correctly translates the SQL query. Specifying 'highschoolers' aligns well with the context.",
            "This variation introduces a small ambiguity by implying multiple people like the students. Clarifying that it's the number of likes, not distinct likers, can improve it.",
            "Accurate and clear. It correctly conveys the requirement without introducing any technical jargon."
        ],
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_utterance": "Show the names of students who have at least 2 likes."
    },
    {
        "init": [
            "Which airlines operate flights departing from AHD airport?",
            "Can you list the airlines that have flights leaving from AHD?",
            "What are the names of the airlines that fly out of AHD airport?"
        ],
        "final": [
            "Which airlines operate flights departing from AHD airport?",
            "Can you list the airlines that have flights departing from AHD airport?",
            "What are the names of the airlines that fly out of AHD airport?"
        ],
        "feedback": [
            "Clear and accurate. It covers the query's intent without unnecessary technical detail.",
            "Clear and concise. The term 'leaving' aligns well with 'departing,' but it might be clearer to replace 'leaving' with a more formal term.",
            "This variation is accurate and well-phrased. It uses a natural language approach without SQL-specific terminology."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "original_utterance": "What are airlines that have some flight departing from airport 'AHD'?"
    },
    {
        "init": [
            "How many high school students are in either 9th or 10th grade?",
            "Can you provide the total number of students who are in the 9th or 10th grade?",
            "Find the count of high schoolers who are in 9th grade or 10th grade."
        ],
        "final": [
            "How many high school students are in either 9th or 10th grade?",
            "Can you provide the count of students who are in 9th or 10th grade?",
            "Find the number of students who are in 9th or 10th grade."
        ],
        "feedback": [
            "This variation is clear and directly asks for the count of students in the specified grades. No changes needed.",
            "Good phrasing, but it can be more concise by removing 'the total number of' and directly asking for the count.",
            "Accurate but slightly redundant with the phrase 'high schoolers who are in.' Simplifying it will improve readability."
        ],
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "original_utterance": "How many high schoolers are there in grade 9 or 10?"
    },
    {
        "init": [
            "Who are the people who have made it to the final table in poker?",
            "List the names of people ordered by their final table appearances in poker.",
            "Can you provide the names of individuals based on their final table standings in poker?"
        ],
        "final": [
            "Who are the people who have made it to the final table in poker, ordered by their appearances?",
            "List the names of people who have appeared in the final table in poker, ordered by the number of times they made it.",
            "Can you provide the names of people based on their appearances in the final table of poker, sorted accordingly?"
        ],
        "feedback": [
            "This is clear and concise, but could specify that the list is ordered by the final table appearances.",
            "Good phrasing but could specify that it involves a join between people and poker players.",
            "Accurate but could be more explicit about the ordering based on 'Final_Table_Made.' Also, avoid the term 'individuals' which might be less direct."
        ],
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "original_utterance": "List the names of poker players ordered by the final tables made in ascending order."
    },
    {
        "init": [
            "What is the date of the most recent transcript?",
            "Can you provide the date of the latest transcript?",
            "Show me the date for the latest transcript record."
        ],
        "final": [
            "What is the date of the most recent transcript?",
            "Can you provide the date of the most recently created transcript?",
            "Show me the date for the latest transcript."
        ],
        "feedback": [
            "This variation is clear and correctly conveys the intent of finding the most recent transcript date. No significant issues with natural language flow.",
            "Good phrasing, but 'latest transcript' might be slightly ambiguous as to whether it refers to the creation date or another date. Adding 'date of the most recently created transcript' could improve clarity.",
            "While accurate, 'transcript record' might introduce ambiguity. Simplifying it to 'latest transcript date' would maintain clarity and brevity."
        ],
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "original_utterance": "What is the last transcript release date?"
    },
    {
        "init": [
            "Show me the production code and channel of the earliest aired cartoon.",
            "What is the production code and channel of the first cartoon that aired?",
            "Find the production code and channel for the very first cartoon in the schedule."
        ],
        "final": [
            "Show me the production code and channel of the first aired cartoon.",
            "What is the production code and channel of the first cartoon that aired?",
            "Find the production code and channel for the earliest aired cartoon."
        ],
        "feedback": [
            "This variation is clear, but the mention of 'earliest aired' could be simplified to 'first aired' for conciseness. The term 'schedule' could be confusing if misinterpreted as a future airing rather than historical data.",
            "This is concise and clear. It specifies 'first cartoon that aired,' which accurately aligns with the query\u2019s ordering by the original air date. Nothing needs changing.",
            "This is clear but could be mistaken for future scheduling. Rephrase to emphasize historical airing. Also, it doesn't directly mention the data being pulled from historical context."
        ],
        "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "original_utterance": "Find the production code and channel of the most recently aired cartoon."
    },
    {
        "init": [
            "Show me all template type codes from the Templates table that do not have a corresponding entry in the Documents table.",
            "Find the template type codes in the Templates table that are not linked to any entries in the Documents table.",
            "Which template type codes are present in the Templates table but missing in the Documents table?"
        ],
        "final": [
            "Show me all template type codes in Templates that are not associated with any Documents.",
            "Find the template type codes from the Templates table that do not appear in the Documents table.",
            "Which template type codes are in the Templates table but have no corresponding entries in the Documents table?"
        ],
        "feedback": [
            "This variation is clear and precise but could be simplified for better readability. The term 'corresponding entry' could be replaced with simpler language.",
            "Good phrasing, but 'linked to any entries' might be too technical; simpler language could be used to improve naturalness.",
            "Concise and clear, but could be improved by avoiding the direct SQL terminology 'present' and 'missing,' which might imply operation."
        ],
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "original_utterance": "Show all template type codes that are not used by any document."
    },
    {
        "init": [
            "Which airlines have flights departing from AHD airport?",
            "Can you list the airlines that operate flights from AHD airport?",
            "Show me which airlines have departures from AHD."
        ],
        "final": [
            "Which airlines have flights departing from AHD airport?",
            "Can you list the airlines that have flights from AHD airport?",
            "Show me which airlines have departures from AHD airport."
        ],
        "feedback": [
            "Clear and concise. No changes needed.",
            "Good phrasing but could be slightly more concise. The word 'operate' is accurate but can be dropped for brevity.",
            "Clear and concise. Could specify 'airport' after 'AHD' to be more explicit."
        ],
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "original_utterance": "What are airlines that have some flight departing from airport 'AHD'?"
    },
    {
        "init": [
            "Which stadium has the highest average capacity?",
            "Show me the stadium with the highest average capacity.",
            "Find the stadium that ranks highest in terms of average capacity."
        ],
        "final": [
            "Which stadium has the highest average rating?",
            "Show me the stadium with the highest average score.",
            "Find the stadium that ranks highest in terms of its average rating."
        ],
        "feedback": [
            "The term 'capacity' here is ambiguous. The original query is actually selecting from 'average DESC', not 'capacity DESC'. Clarify that it's about the highest average value, not capacity.",
            "This variation continues to misinterpret the query slightly by referring to 'capacity' instead of 'average'. It should emphasize the 'average' value.",
            "This phrasing is clear but needs a slight adjustment to specify it's the highest average and not average capacity."
        ],
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "original_utterance": "What is the name and capacity for the stadium with highest average attendance?"
    },
    {
        "init": [
            "Which countries in Africa have a population smaller than the country with the smallest population in Asia?",
            "Can you list the African countries with a population less than the least populated country in Asia?",
            "Find countries in Africa whose population is lower than the minimum population of any country in Asia."
        ],
        "final": [
            "Which countries in Africa have a population smaller than the country with the smallest population in Asia?",
            "Can you list the African countries with a population smaller than the least populated country in Asia?",
            "Find countries in Africa whose population is lower than the minimum population in Asia."
        ],
        "feedback": [
            "This variation is clear and correctly captures the query's intent. The phrasing is natural and easily understandable.",
            "The phrase 'with a population less than the least populated country in Asia' is accurate but could be slightly more concise. Consider rephrasing to enhance clarity.",
            "Accurate, but the phrase 'minimum population of any country in Asia' is a bit wordy. Refining it to 'minimum population in Asia' would make it clearer."
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "original_utterance": "Which African countries have a smaller population than that of any country in Asia?"
    },
    {
        "init": [
            "How many dogs have not received any treatments?",
            "Get the number of dogs that haven't been treated.",
            "Count the dogs that are not listed in the Treatments table."
        ],
        "final": [
            "How many dogs have not received any treatments?",
            "Can you tell me how many dogs haven't been treated?",
            "Count the dogs that have not undergone any treatments."
        ],
        "feedback": [
            "This variation is clear and accurate. It directly asks for the count of dogs without treatments and avoids SQL jargon.",
            "Good phrasing and precise. However, it could be more natural by avoiding 'Get the number' in favor of more conversational phrasing like 'Can you tell me how many'.",
            "This variation is also accurate but mentions 'Treatments table,' which introduces a bit of SQL jargon that could be avoided for a smoother natural language request."
        ],
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "original_utterance": "How many dogs have not gone through any treatment?"
    },
    {
        "init": [
            "Which employees have not undergone evaluation?",
            "Show me the names of employees who haven't been evaluated.",
            "List the employees who did not receive an evaluation."
        ],
        "final": [
            "Which employees have not undergone evaluation?",
            "Which employees haven\u2019t been evaluated?",
            "List the employees who haven\u2019t received an evaluation."
        ],
        "feedback": [
            "This variation is clear and accurately represents the SQL query. No changes are necessary.",
            "This phrasing is good but could be slightly simplified for brevity. 'Who haven\u2019t been evaluated' is sufficient without 'show me the names of.'",
            "This variation is accurate and concise, but 'did not receive' might be slightly more formal than necessary. Consider 'haven\u2019t received' for a more natural flow."
        ],
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "original_utterance": "Find the names of employees who never won any award in the evaluation."
    },
    {
        "init": [
            "What is the degree program with the highest number of enrollments?",
            "Can you show me the most popular degree program based on student enrollment numbers?",
            "Find the degree program that has the most students enrolled."
        ],
        "final": [
            "What is the degree program with the highest number of enrollments, including the program ID and summary name?",
            "Can you show me the most popular degree program based on student enrollment numbers, along with its ID and summary name?",
            "Find the degree program that has the most students enrolled, displaying its ID and summary name."
        ],
        "feedback": [
            "This variation is clear but could mention the type of information being returned, such as program summary name.",
            "Good phrasing, but it could specify that the result will include both the degree program ID and the degree summary name.",
            "Accurate and concise. Adding what information is being retrieved would enhance clarity."
        ],
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Find the program which most number of students are enrolled in. List both the id and the summary."
    },
    {
        "init": [
            "How many professionals have not administered any treatments?",
            "Can you provide the number of professionals who have no treatment records?",
            "Find out the count of professionals that are not associated with any treatments."
        ],
        "final": [
            "How many professionals have not administered any treatments?",
            "Can you provide the number of professionals who have not administered any treatments?",
            "Find out the count of professionals that have not administered any treatments."
        ],
        "feedback": [
            "The phrasing is clear but could be improved by adding 'any' for a more natural feel. No SQL jargon is present, which is good.",
            "This variation is clear and concise but could avoid 'records' since it might imply database jargon. Simply stating 'have not administered any treatments' might be better.",
            "The use of 'associated with' is accurate yet more formal; 'have not administered' might sound more natural. It could be rephrased for better readability."
        ],
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "original_utterance": "How many professionals did not operate any treatment on dogs?"
    },
    {
        "init": [
            "How many countries are there in each continent?",
            "Can you provide the number of countries in every continent?",
            "Find the total count of countries for each continent."
        ],
        "final": [
            "How many countries are there in each continent, including the continent's name and ID?",
            "Can you provide the number of countries in every continent along with the continent's name and ID?",
            "Find the total count of countries for each continent, including their names and IDs."
        ],
        "feedback": [
            "This variation is clear and directly aligns with the query's intent. No major changes needed, but a slight rephrasing can improve natural language flow.",
            "Clear and concise, but it could specify that the result includes the continent's name and ID for completeness.",
            "Accurate and concise. Explicitly mentioning that the continent ID and name are returned would add clarity."
        ],
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "original_utterance": "How many countries does each continent have? List the continent id, continent name and the number of countries."
    },
    {
        "init": [
            "List each document's ID and name along with the total number of paragraphs it contains.",
            "How many paragraphs are there in each document? Provide the document ID and name.",
            "Show the document IDs, names, and the count of paragraphs for each document."
        ],
        "final": [
            "List each document's ID and name, along with the total number of paragraphs it contains.",
            "How many paragraphs are there in each document? Provide the document ID and name.",
            "Show the document IDs, names, and the number of paragraphs in each document."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the SQL query. However, adding 'for' after 'ID' would improve readability.",
            "This phrasing is good and clear. It avoids SQL jargon and directly asks for the necessary information.",
            "The variation is accurate but could be simplified by avoiding the word 'for each document' at the end to improve brevity."
        ],
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "original_utterance": "Show all document ids, names and the number of paragraphs in each document."
    },
    {
        "init": [
            "Which countries have TV channels airing cartoons written by Todd Casey?",
            "Find the countries associated with TV channels broadcasting cartoons authored by Todd Casey.",
            "List the countries of TV channels that feature cartoons written by Todd Casey."
        ],
        "final": [
            "Which countries have TV channels showing cartoons written by Todd Casey?",
            "Find the countries associated with TV channels that broadcast cartoons authored by Todd Casey.",
            "List the countries of TV channels featuring cartoons written by Todd Casey."
        ],
        "feedback": [
            "This variation accurately captures the intent of the query but could be slightly rephrased for better clarity, such as focusing on 'cartoons that were' instead of 'airing cartoons'.",
            "The term 'broadcasting' might introduce ambiguity; consider simplifying it to 'showing' or 'airing' to align more closely with typical TV terminology.",
            "Clear and precise, however, avoid redundancy and ensure mentioning 'TV channels' succinctly."
        ],
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "original_utterance": "which countries' tv channels are playing some cartoon written by Todd Casey?"
    },
    {
        "init": [
            "What is the total amount spent by visitors with a level 1 membership?",
            "Can you show the sum of all spending by members who are at level 1?",
            "Find the total expenditure of all visitors who have a level 1 membership."
        ],
        "final": [
            "What is the total amount spent by visitors with a level 1 membership?",
            "Can you show the total amount spent by members who are at level 1?",
            "Find the total amount spent by all visitors who have a level 1 membership."
        ],
        "feedback": [
            "This variation is clear and accurately represents the query's intent. No changes are needed.",
            "The phrasing is good, but consider using 'total amount spent' for more natural language instead of 'sum of all spending'.",
            "Clear and concise, but you may replace 'expenditure' with 'amount spent' to match common usage more closely."
        ],
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "original_utterance": "What is the total ticket expense of the visitors whose membership level is 1?"
    },
    {
        "init": [
            "Show the first and last names of players who are left-handed, sorted by their birth dates.",
            "Can you list the left-handed players along with their first and last names, arranged by birth date?",
            "Find the names of players who throw left-handed and order them by their birth dates."
        ],
        "final": [
            "Provide the first and last names of players who are left-handed, sorted by their birth dates.",
            "Can you list the left-handed players along with their first and last names, sorted by birth date?",
            "Find the names of players who are left-handed and order them by their birth dates."
        ],
        "feedback": [
            "This variation is clear and directly corresponds to the SQL query. No significant improvements needed, though 'Show' could be more conversational.",
            "Good phrasing, but 'arranged' sounds slightly formal. 'Sorted' is more conversational and understandable. Clear request.",
            "The term 'throw left-handed' could be confusing if 'hand' doesn\u2019t directly refer to throwing. Otherwise, it\u2019s clear and concise."
        ],
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "original_utterance": "List the first and last name of all players who are left / L hand in the order of birth date."
    },
    {
        "init": [
            "Show me the paragraphs and their IDs from the document titled 'Welcome to NY'.",
            "What are the paragraph IDs and texts from the document named 'Welcome to NY'?",
            "Can you list the paragraphs along with their IDs in the 'Welcome to NY' document?"
        ],
        "final": [
            "Show me the paragraph IDs and texts from the document titled 'Welcome to NY'.",
            "What are the paragraph IDs and paragraph texts from the document named 'Welcome to NY'?",
            "Can you list the paragraph texts along with their IDs in the 'Welcome to NY' document?"
        ],
        "feedback": [
            "This variation is clear and precise, but adding the term 'paragraph texts' after 'paragraphs' might make it more explicit.",
            "The phrasing is accurate, but the term 'text' is used instead of 'paragraph texts,' which might help with clarity.",
            "This is a good variation. It captures the SQL query's intent and is naturally phrased, but adding 'paragraph texts' could improve it slightly."
        ],
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "original_utterance": "Show all paragraph ids and texts for the document with name 'Welcome to NY'."
    },
    {
        "init": [
            "What is the total sum of ranking points for each player based on their first name?",
            "Can you provide the total ranking points grouped by players' first names?",
            "Show the sum of ranking points for each player, grouped by their first name."
        ],
        "final": [
            "What is the sum of ranking points for each player based on their first name?",
            "Can you provide the total ranking points for each player sorted by their first name?",
            "Show the sum of ranking points for each player, categorized by their first name."
        ],
        "feedback": [
            "This variation clearly states the query intent but uses a slightly verbose phrasing. 'Total sum' may be redundant; 'sum' would suffice.",
            "Clear and concise. However, the term 'grouped by' might be perceived as technical for some users. Consider rephrasing for natural language flow.",
            "Accurate and concise but may benefit from dropping the phrase 'grouped by.' Simplifying the expression could enhance clarity."
        ],
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_utterance": "Find the total ranking points for each player and their first name."
    },
    {
        "init": [
            "Show me the countries in Asia with a population greater than the most populous country in Africa.",
            "Which countries in Asia have a population larger than the largest population of any country in Africa?",
            "Find the names of countries in Asia where the population exceeds that of the most populated country in Africa."
        ],
        "final": [
            "List the countries in Asia that are more populous than the most populous country in Africa.",
            "Which countries in Asia have a population larger than the most populous country in Africa?",
            "Find the names of countries in Asia with a population higher than the most populous country in Africa."
        ],
        "feedback": [
            "This variation is clear but could replace 'show me' with 'list' for a more specific action. Additionally, avoid 'greater than the most populous country in Africa' to prevent confusion; using 'more populous than' adds clarity.",
            "This variation is accurate but slightly verbose. Consider removing 'of any country' to enhance brevity without losing meaning. Also, replace 'largest population of' with 'most populous' for better flow.",
            "This variation is clear and concise but could be more fluid. Replace 'where the population exceeds that of' with 'with a population higher than.' This makes the sentence less formal and easier to understand."
        ],
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "original_utterance": "Which Asian countries have a population that is larger than any country in Africa?"
    },
    {
        "init": [
            "Show me the names of Asian cities where Chinese is an official language.",
            "Which cities in Asia have Chinese as an official language?",
            "List the cities in Asian countries where Chinese is the official language."
        ],
        "final": [
            "Can you provide the names of Asian cities where Chinese is an official language?",
            "Which cities in Asia have Chinese as an official language?",
            "What are the cities in Asian countries where Chinese is officially spoken?"
        ],
        "feedback": [
            "This variation is accurate and well-phrased. It clearly specifies the filter conditions but could use a more natural phrase than 'Show me' to improve conversational flow.",
            "This variation is concise and natural. It accurately captures the SQL query's intent.",
            "This variation is clear and accurate. Removing the specific SQL term 'List' would make it even more conversational."
        ],
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "original_utterance": "Whic`h unique cities are in  Asian countries where Chinese is the official language?"
    },
    {
        "init": [
            "List the names of visitors with a membership level higher than 4, sorted by membership level in descending order.",
            "Can you show the names of visitors who have a membership level above 4, ordered from the highest membership level down?",
            "Which visitors have a membership level greater than 4, and can you sort them by membership level from highest to lowest?"
        ],
        "final": [
            "List the names of visitors with a membership level higher than 4, sorted by membership level from highest to lowest.",
            "Can you show the names of visitors who have a membership level above 4, starting from the highest level?",
            "Which visitors have a membership level greater than 4, and can you sort them by membership level in decreasing order?"
        ],
        "feedback": [
            "This variation is clear and accurate but could be made more natural by removing the technical term 'descending order'.",
            "Good phrasing, but it could be shortened for brevity. The term 'ordered from the highest membership level down' can be simplified.",
            "This version is concise and avoids excessive technical terms, though 'highest to lowest' can be replaced with simpler language like 'in decreasing order'."
        ],
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "original_utterance": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low."
    },
    {
        "init": [
            "What is the average ranking of each player, grouped by their first names?",
            "Can you provide the average ranking for players, categorized by their first names?",
            "Find the average ranking for each player by their first names."
        ],
        "final": [
            "What is the average ranking of each player, grouped by their first names?",
            "Can you provide the average ranking for players, grouped by their first names?",
            "Find the average ranking for players by their first names."
        ],
        "feedback": [
            "This variation is accurate but can be a bit more explicit in stating it's about players' first names specifically.",
            "Good phrasing but the term 'categorized' might be a bit technical. Using 'grouped' could be more natural.",
            "Concise and clear, but it could be improved by specifying it refers to players' first names."
        ],
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_utterance": "Find the average ranking for each player and their first name."
    },
    {
        "init": [
            "What is the average grade of students who have friends?",
            "Find the average grade for students that are listed as friends of other students.",
            "Can you show the average grade of all students who have at least one friend?"
        ],
        "final": [
            "What is the average grade of students who have friends in the high school?",
            "Find the average grade for high school students who are listed as friends of other high school students.",
            "Can you show the average grade of all high school students who have at least one friend?"
        ],
        "feedback": [
            "This variation is accurate and clear but could include a hint that we are looking within a specific context of students with friends.",
            "This variation is good and precise but could be more specific by indicating that both entities involved are from the 'Highschooler' group.",
            "This variation is also clear and accurate but could emphasize that the calculation of the average grade is specifically for students listed as friends."
        ],
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "original_utterance": "Find the average grade of all students who have some friends."
    },
    {
        "init": [
            "How many likes has Kyle received?",
            "Can you count the number of likes for the student named Kyle?",
            "Show me the total number of likes that Kyle has."
        ],
        "final": [
            "How many likes has Kyle received?",
            "Can you count how many likes Kyle has?",
            "Show me the total number of likes that Kyle has."
        ],
        "feedback": [
            "The phrase 'has received' is conversational but it implies that Kyle is active in receiving likes, which aligns well with the SQL query.",
            "This variation is clear and specific. However, the phrase 'for the student named Kyle' is a bit formal. The term 'count' accurately translates the SQL function count(*).",
            "This version maintains brevity and clarity. The word 'total' emphasizes the count without needing SQL-specific jargon."
        ],
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_utterance": "How many likes does Kyle have?"
    },
    {
        "init": [
            "Which stadiums have not hosted a concert?",
            "Can you list the stadiums where no concerts have taken place?",
            "Please find the names of stadiums that have never had a concert."
        ],
        "final": [
            "Which stadiums have not hosted a concert?",
            "Can you list the names of stadiums where no concerts have taken place?",
            "Please find the names of stadiums that have never had a concert."
        ],
        "feedback": [
            "This variation is accurate and clear. It directly asks for stadiums that have not hosted concerts, matching the intent of the SQL query.",
            "Good phrasing, but 'list the stadiums' can be more precise if it mentions 'names of stadiums'. This avoids any ambiguity regarding what information is being requested.",
            "The variation is clear and concise, accurately requesting the names of stadiums, ensuring clarity without any technical jargon."
        ],
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "original_utterance": "Show the stadium names without any concert."
    },
    {
        "init": [
            "Which citizenship is most common among the singers?",
            "Can you identify the most frequently occurring citizenship among the singers?",
            "What is the most represented citizenship among the singers in the database?"
        ],
        "final": [
            "Which citizenship is most common among the singers in the database?",
            "Can you identify the top citizenship among the singers?",
            "What is the most represented citizenship among the singers in the database?"
        ],
        "feedback": [
            "Clear and concise. It effectively captures the original query's intent. However, adding 'in the database' can provide better context.",
            "Good phrasing, but it's slightly verbose. The term 'most frequently occurring' could be simplified for better clarity.",
            "Accurate and to the point. No changes needed, as it avoids any SQL-specific terms and maintains clarity."
        ],
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "original_utterance": "Please show the most common citizenship of singers."
    },
    {
        "init": [
            "Show me the money rank of the tallest poker player.",
            "What is the money rank for the tallest person who is also a poker player?",
            "Find the money rank of the tallest individual who plays poker."
        ],
        "final": [
            "Show me the money rank of the currently tallest poker player.",
            "What is the money rank for the currently tallest person who is also a poker player?",
            "Find the money rank of the currently tallest individual who plays poker."
        ],
        "feedback": [
            "This variation is clear but could specify that it is for the current tallest poker player, using 'currently tallest' could make it more precise.",
            "Good phrasing with emphasis on 'tallest person who is also a poker player,' but it can avoid redundancy. It\u2019s better to use 'currently' for clarification.",
            "Accurate and concise but could mention 'currently' to denote the tallest individual as of now. It supports the context without having technical SQL terms."
        ],
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "original_utterance": "What is the money rank of the tallest poker player?"
    },
    {
        "init": [
            "Which degree program has the highest number of enrollments?",
            "Can you tell me the most popular degree program based on student enrollments?",
            "Show me the degree program with the maximum number of students enrolled."
        ],
        "final": [
            "Which degree program has the highest number of enrollments?",
            "Can you tell me the most popular degree program based on student enrollments?",
            "Show me the degree program with the maximum number of students enrolled."
        ],
        "feedback": [
            "This variation is clear and accurately reflects the query intent. It is concise and avoids technical jargon.",
            "Good phrasing and slightly more conversational. It accurately conveys the query's intent without using SQL-specific language.",
            "Clear and concise. It aligns well with the query's intent without including unnecessary technical details."
        ],
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Find the kind of program which most number of students are enrolled in?"
    },
    {
        "init": [
            "Which student has the highest number of enrollments, and what are their details?",
            "Show me the details of the student with the most course enrollments.",
            "Find the student with the most enrollments and provide their ID and names."
        ],
        "final": [
            "Which student has the highest number of enrollments, and what are their ID and names?",
            "Show me the details and enrollment count of the student with the most course enrollments.",
            "Find the student with the most enrollments and provide their ID, names, and the count of courses they\u2019re enrolled in."
        ],
        "feedback": [
            "Clear and accurate. It covers all necessary details and asks for the student's enrollments count, but is long and slightly verbose.",
            "Concise and to the point, but it could specify that it needs an exact count and names following the SQL query's INTENT.",
            "Accurate and specific, but it might be improved by adding more detail on which information is required beyond IDs and names (such as the count of enrollments)."
        ],
        "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id."
    },
    {
        "init": [
            "What is the weight of the youngest pet?",
            "Can you tell me the weight of the pet with the least age?",
            "Find the weight of the pet that is youngest in age."
        ],
        "final": [
            "What is the weight of the youngest pet?",
            "Can you tell me the weight of the youngest pet?",
            "Find the weight of the youngest pet."
        ],
        "feedback": [
            "This variation is clear and correctly conveys the intent. No changes needed.",
            "This is accurate but 'least age' can be simplified to 'youngest.'",
            "This variation is accurate and clear. However, the phrase 'youngest in age' could be made more concise."
        ],
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_utterance": "Find the weight of the youngest dog."
    },
    {
        "init": [
            "List the last names of students living in North Carolina who are not enrolled in any courses.",
            "Show me the last names of students residing in North Carolina who have not enrolled in any classes.",
            "Give me the last names of students who live in North Carolina and are not currently enrolled."
        ],
        "final": [
            "List the last names of students living in North Carolina who are not enrolled in any courses.",
            "Show me the last names of students living in North Carolina who have not enrolled in any classes.",
            "Give me the last names of students who live in North Carolina and are not currently enrolled."
        ],
        "feedback": [
            "This variation is clear and captures the intent correctly. No mention of SQL-specific terms, making it understandable for non-technical users.",
            "This phrasing avoids SQL jargon and is easy to understand, but consider replacing 'residing' with 'living' for a more natural flow.",
            "Accurate interpretation but could be improved by specifying 'students' instead of just 'who live in' for added clarity."
        ],
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "original_utterance": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program."
    },
    {
        "init": [
            "Who were the winner and loser of the longest match?",
            "Show me the winner and the loser of the match that took the most time.",
            "Which match had the longest duration, and who were the winner and the loser?"
        ],
        "final": [
            "Who were the winner and loser of the longest match?",
            "Show me the winner and loser of the longest match.",
            "Which match lasted the longest, and who were the winner and loser?"
        ],
        "feedback": [
            "This variation is clear and precise. It's natural and doesn't include any SQL-specific terms.",
            "This phrasing is good, but it could be more concise. The term 'took the most time' is slightly awkward compared to alternatives.",
            "Accurate and clear. The term 'duration' might be a bit formal, but it's still understandable and avoids technical jargon."
        ],
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "original_utterance": "find the names of loser and winner who played in the match with greatest number of minutes."
    },
    {
        "init": [
            "List all unique car models produced after 1980.",
            "Show me the distinct car models that were manufactured after the year 1980.",
            "Can you provide a list of unique car models made after 1980?"
        ],
        "final": [
            "List all unique car models manufactured after 1980.",
            "Show me the distinct car models that were manufactured after the year 1980.",
            "Can you provide a list of unique car models made after 1980?"
        ],
        "feedback": [
            "The variation is accurate and clear, but 'produced' could be more specific by using 'manufactured'. The term 'unique' is appropriate for DISTINCT.",
            "Good phrasing, very clear and accurate. No SQL-specific terms are directly referenced, making it user-friendly.",
            "The phrasing is clear. The term 'provide a list of' is helpful in making the query more conversational and understandable."
        ],
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "original_utterance": "Which distinct car models are the produced after 1980?"
    },
    {
        "init": [
            "Which grade has the most students in high school?",
            "What is the most common grade level among high schoolers?",
            "Can you tell me the grade level with the highest number of students in the high school?"
        ],
        "final": [
            "Which grade level has the most students among high schoolers?",
            "What is the most common grade level among high schoolers?",
            "What grade level has the highest number of students in the high school?"
        ],
        "feedback": [
            "Clear and accurate but could be improved for naturalness. The term 'high school' can be changed to 'high schoolers' for better fluency.",
            "Very clear and concise. This variation avoids SQL-specific jargon effectively and is user-friendly.",
            "Accurate and descriptive, but it could be shortened for brevity. 'Can you tell me' could be substituted with a more direct question format."
        ],
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which grade has the most high schoolers?"
    },
    {
        "init": [
            "Show me the first names of owners and names of their dogs who are in Virginia.",
            "Can you list the dog names and their owners\u2019 first names for owners located in Virginia?",
            "Display the first names of owners and the names of their dogs for those living in Virginia."
        ],
        "final": [
            "Show me the first names of owners and their dogs\u2019 names in Virginia.",
            "Can you list the dog names and their owners\u2019 first names for those located in Virginia?",
            "Display the first names of owners and the names of their dogs for those living in Virginia."
        ],
        "feedback": [
            "This variation is clear but could be enhanced by specifying 'owners' instead of just 'people'. Avoiding redundancy by omitting 'who are' could also improve the phrasing. Consider clarifying the relationship between owners and dogs.",
            "Good phrasing, but it could be made more fluid. The word 'list' works well here. Including 'located in' provides clarity about geolocation.",
            "Accurate and clear. The relationship between owners and dogs is well conveyed. The mention of 'living in' aligns well with the SQL condition on state."
        ],
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "original_utterance": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name."
    },
    {
        "init": [
            "Which course has the highest number of student enrollments?",
            "Show me the course that the most students are enrolled in.",
            "What is the most popular course based on student enrollments?"
        ],
        "final": [
            "Which course has the highest number of student enrollments?",
            "Show me the course that the most students are enrolled for.",
            "What is the most popular course by student enrollments?"
        ],
        "feedback": [
            "This variation is clear and directly represents the query\u2019s intent. It avoids SQL-specific terminology, making it approachable.",
            "The phrasing is good, but it might be even clearer by changing 'enrolled in' to 'enrolled for.' The current phrasing is already quite natural.",
            "Clear and concise. No improvements needed, although substituting 'based on' with 'by' could slightly improve the flow."
        ],
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "What's the name of the course with most number of enrollments?"
    },
    {
        "init": [
            "List all European cities in countries where English is not an official language.",
            "Show me names of cities in Europe located in countries that do not have English as an official language.",
            "Find European cities in countries where the official language is not English."
        ],
        "final": [
            "List all European cities in countries where English is not an official language.",
            "Show me names of cities in Europe located in countries that do not have English as an official language.",
            "Find names of European cities in countries where the official language is not English."
        ],
        "feedback": [
            "This variation accurately captures the query's intent but could be slightly more specific by mentioning 'all' European cities for clarity.",
            "Clear and precise. It effectively communicates the query's requirements without jargon or ambiguity.",
            "The variation is concise, but it could explicitly state that it is looking for 'cities' for additional clarity."
        ],
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "original_utterance": "Which cities are in European countries where English is not the official language?"
    },
    {
        "init": [
            "Who are the friends of the high school student named Kyle?",
            "List the names of Kyle's friends from his high school.",
            "Can you show me the friends of the high schooler called Kyle?"
        ],
        "final": [
            "Who are the friends of the high school student named Kyle?",
            "Can you tell me who Kyle's high school friends are?",
            "Can you show me the friends of the high schooler named Kyle?"
        ],
        "feedback": [
            "Clear and accurate but could specify it's referring to a high school student.",
            "This variation is precise and straightforward but it may benefit from more natural language instead of 'List the names.'",
            "Good phrasing but might be more fluid without the term 'called' and instead using 'named'."
        ],
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "original_utterance": "Show the names of all of the high schooler Kyle's friends."
    },
    {
        "init": [
            "Which European countries have three or more car manufacturers?",
            "List the European countries that have at least three car manufacturers.",
            "Can you provide the names of European countries that have three or more car makers?"
        ],
        "final": [
            "Which European countries have at least three car manufacturers?",
            "List the European countries that have at least three car manufacturers.",
            "Can you provide the names of European countries that have three or more carmakers?"
        ],
        "feedback": [
            "This variation is accurate and clear, but the word 'manufacturers' should be explicitly tied to cars to eliminate ambiguity.",
            "This phrasing is very clear and aligns well with the SQL query, but using 'at least' is more natural than the phrase '>= 3'.",
            "Good phrasing, but 'car makers' can be combined into one word 'carmakers' for precision and economy of words."
        ],
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_utterance": "Which countries in europe have at least 3 car manufacturers?"
    },
    {
        "init": [
            "How many visitors have not visited a museum that opened after 2010?",
            "Count the number of visitors who haven't visited any museums established after 2010.",
            "Show the total number of visitors who did not visit museums that opened in 2011 or later."
        ],
        "final": [
            "How many visitors have not visited a museum that opened after 2010?",
            "Count the number of visitors who haven't visited any museums opened after 2010.",
            "Show the total number of visitors who did not visit museums that opened after 2010."
        ],
        "feedback": [
            "This variation is clear and correctly captures the intent of the SQL query. It is straightforward and does not include any technical jargon.",
            "Accurate and clearly worded. The use of 'established' instead of 'opened' could be perplexing for some, but it maintains the original intent.",
            "The phrasing 'opened in 2011 or later' is accurate but could be simplified to align more closely with everyday language. Otherwise, it captures the SQL logic accurately."
        ],
        "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "original_utterance": "Find the number of visitors who did not visit any museum opened after 2010."
    },
    {
        "init": [
            "How many owners do not have any dogs?",
            "Can you count the number of owners that don't own any dogs?",
            "Find the total number of owners without dogs."
        ],
        "final": [
            "How many owners do not have any dogs?",
            "Can you count the number of owners that currently don\u2019t own any dogs?",
            "Find the total number of owners without dogs."
        ],
        "feedback": [
            "Clear and accurate. This variation correctly conveys the SQL query's intent. No need for significant changes.",
            "The use of 'count' and 'don't own' is accurate and natural. For clarity, it could specify 'currently' to define the context better.",
            "This variation is precise and easy to understand. The phrase 'total number' is a good substitute for 'count.'"
        ],
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "original_utterance": "How many owners temporarily do not have any dogs?"
    },
    {
        "init": [
            "What is the production code and channel of the earliest aired cartoon?",
            "Can you provide the production code and channel of the first cartoon based on the original air date?",
            "Show me the production code and channel of the cartoon that was aired first."
        ],
        "final": [
            "What is the production code and channel of the cartoon that aired the earliest?",
            "Can you provide the production code and channel of the first aired cartoon?",
            "Show me the production code and channel of the cartoon that was aired first."
        ],
        "feedback": [
            "The variation is clear and accurate. However, 'earliest aired cartoon' could be phrased more naturally as 'cartoon that aired the earliest.'",
            "Good phrasing, although 'first cartoon based on the original air date' is a bit wordy. Simplifying it to 'first aired cartoon' would improve clarity.",
            "Concise and accurate. It avoids technical jargon well and clearly represents the query's intent."
        ],
        "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "original_utterance": "Find the production code and channel of the most recently aired cartoon."
    },
    {
        "init": [
            "Find the nationalities of singers born before 1945 and after 1955.",
            "Show me the citizenships of singers born before 1945 and after 1955.",
            "Get the countries of origin for singers who were born either before 1945 or after 1955."
        ],
        "final": [
            "Find the nationalities of singers born before 1945 and after 1955.",
            "Show me the citizenships of singers born before 1945 and after 1955.",
            "Retrieve the citizenships of singers who were born before 1945 and after 1955."
        ],
        "feedback": [
            "Accurate and straightforward. This variation clearly conveys the intent of intersecting birth years for singers.",
            "Precise and maintains the clarity of the query. The term 'citizenships' is correctly used to convey 'Citizenship' as in the original query.",
            "The variation slightly changes the meaning. It should emphasize that singers must be born both before 1945 and after 1955, rather than 'either.'"
        ],
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "original_utterance": "Show the citizenship shared by singers with birth year before 1945 and after 1955."
    },
    {
        "init": [
            "How many distinct continents have countries where Chinese is spoken?",
            "Can you count the number of different continents with countries that speak Chinese?",
            "Find the total number of unique continents that have countries where Chinese is the language spoken."
        ],
        "final": [
            "How many distinct continents have countries where Chinese is an official language?",
            "Can you count the number of different continents with countries that natively speak Chinese?",
            "Find the total number of unique continents that have countries where Chinese is the official language."
        ],
        "feedback": [
            "This variation is clear and concise but could specify that it's not just spoken but is an official language.",
            "Good phrasing, but it can be made slightly clearer by mentioning it's the official language or spoken natively in those regions.",
            "Accurate and detailed, but the phrase 'language spoken' might be interpreted broadly. Could be improved by specifying that it refers to official or native language."
        ],
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "original_utterance": "What is the number of distinct continents where Chinese is spoken?"
    },
    {
        "init": [
            "Show me the total population and the average life expectancy for each continent where the average life expectancy is less than 72 years.",
            "Can you find the sum of the population and average life expectancy for continents with an average life expectancy under 72?",
            "List the total population and average life expectancy of continents that have an average life expectancy below 72 years."
        ],
        "final": [
            "Show me the total population and the average life expectancy for each continent where the average life expectancy is less than 72 years.",
            "Can you find the sum of the population and average life expectancy for each continent with an average life expectancy under 72?",
            "List the total population and average life expectancy of continents that have an average life expectancy below 72 years."
        ],
        "feedback": [
            "This variation is clear and accurately captures the intent. It specifies both total population and average life expectancy values and the condition for life expectancy being less than 72.",
            "This variation is also accurate but could be more precise by mentioning that the values should be grouped by continent.",
            "This phrasing is similar to Variation 1 and correctly covers the same points. It is clear and specifies the condition for life expectancy."
        ],
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "original_utterance": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?"
    },
    {
        "init": [
            "Can you give me the names and email addresses of all owners living in states with 'North' in their name?",
            "Show me the first and last names, along with the email addresses, of owners residing in any state that includes 'North'.",
            "Retrieve the names and email addresses of owners from states containing the word 'North'."
        ],
        "final": [
            "Can you give me the names and email addresses of owners residing in states with 'North' in their name?",
            "Show me the first and last names and email addresses of owners in any state that includes 'North'.",
            "Show the names and email addresses of owners from states containing the word 'North'."
        ],
        "feedback": [
            "This variation is clear but could be more concise. Additionally, consider changing 'living' to 'residing' to match the context better.",
            "The phrasing 'residing in any state that includes' is accurate but slightly lengthy. Simplify it to improve readability.",
            "This is clear and concise. However, make sure 'Retrieve' is appropriate for user queries, which often prefer 'Show' or 'Give me'."
        ],
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "original_utterance": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email."
    },
    {
        "init": [
            "What document has the least number of paragraphs?",
            "Show me the document with the fewest paragraphs.",
            "Which document has the minimum number of paragraphs?"
        ],
        "final": [
            "Which document has the least number of paragraphs?",
            "Show me the document with the fewest paragraphs.",
            "What document has the fewest paragraphs?"
        ],
        "feedback": [
            "This variation is clear and accurately represents the query. However, it can be slightly simplified.",
            "This is well-phrased and gets straight to the point without any unnecessary detail. It's clear and concise.",
            "Good variation, but 'minimum' might be perceived as more technical. 'Fewest' could feel more natural in everyday language."
        ],
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "original_utterance": "What is the document id with least number of paragraphs?"
    },
    {
        "init": [
            "Who is the owner with the most treatments for their dogs?",
            "Find the owner who has received the highest number of treatments for their dogs.",
            "Which owner has their dogs treated the most times?"
        ],
        "final": [
            "Who is the owner with the most treatments given to their dogs?",
            "Find the owner who has provided the highest number of treatments for their dogs.",
            "Which owner has had their dogs treated the most times?"
        ],
        "feedback": [
            "This variation is clear and directly reflects the SQL query's purpose. No significant improvements needed, but it can mention 'dogs' in the context explicitly to avoid ambiguity.",
            "Good phrasing but could be more concise. The term 'received' might be unclear; 'provided' or 'given' treatments may improve clarity.",
            "Accurate and concise. No changes needed, but it's important to avoid making it sound too technical. The term 'treated' is very direct and clear."
        ],
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_utterance": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name."
    },
    {
        "init": [
            "How many matches were played in the years 2013 or 2016?",
            "Can you tell me the total number of matches held in 2013 or 2016?",
            "Find the count of matches that took place in either 2013 or 2016."
        ],
        "final": [
            "How many matches were played in the years 2013 or 2016?",
            "Can you tell me the total number of matches that were held in 2013 or 2016?",
            "Find the count of matches that took place in either 2013 or 2016."
        ],
        "feedback": [
            "This variation is clear and accurately captures the essence of the query. The use of 'were played' is appropriate and user-friendly.",
            "The phrase 'held in' is slightly less specific than 'played in' but still correct. Consider mentioning 'total number' more explicitly.",
            "Accurate and concise. The use of 'either 2013 or 2016' is a good way to express the 'OR' condition naturally."
        ],
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "original_utterance": "List the number of all matches who played in years of 2013 or 2016."
    },
    {
        "init": [
            "List the countries that have TV Channels but no cartoons written by Todd Casey.",
            "Which countries have TV Channels without any cartoons authored by Todd Casey?",
            "Find the countries with TV Channels that do not air any cartoons scripted by Todd Casey."
        ],
        "final": [
            "List the countries that have TV Channels but no cartoons written by Todd Casey.",
            "Which countries have TV Channels without any cartoons written by Todd Casey?",
            "Find the countries with TV Channels that do not air any cartoons written by Todd Casey."
        ],
        "feedback": [
            "This variation is clear and captures the intent accurately. It avoids technical jargon and is easy to understand.",
            "The variation is good but 'authored by Todd Casey' might be clearer as 'written by Todd Casey' to match the SQL query's terminology directly.",
            "Accurate and succinct. However, the term 'scripted by' slightly deviates from the SQL query's term 'written by'."
        ],
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "original_utterance": "which countries' tv channels are not playing any cartoon written by Todd Casey?"
    },
    {
        "init": [
            "What is the name and release year of the song by the youngest singer?",
            "Show me the name and release year of the song from the youngest artist.",
            "Find the song title and release year sung by the youngest singer."
        ],
        "final": [
            "What is the name and release year of the song by the youngest singer?",
            "Show me the name and release year of the song from the youngest artist.",
            "Tell me the song title and release year sung by the youngest singer."
        ],
        "feedback": [
            "This variation is clean and directly captures the SQL intent without any ambiguities. However, adding 'the' before 'name' could improve the sentence structure.",
            "This variation is precise and avoids any technical SQL terms while being clear about what information is needed. No major changes are needed.",
            "Accurate and concise. However, 'Find' could be replaced with a more conversational phrase like 'Tell me' to ensure a more natural flow."
        ],
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "original_utterance": "Show the name and the release year of the song by the youngest singer."
    },
    {
        "init": [
            "List the names of students who have a pet that is either a cat or a dog.",
            "Which students have a cat or a dog as a pet?",
            "Show me the distinct names of students who own either a cat or a dog."
        ],
        "final": [
            "List the names of students who have a pet that is either a cat or a dog.",
            "Which students have a cat or a dog as a pet?",
            "Show me the distinct names of students who own either a cat or a dog."
        ],
        "feedback": [
            "This is clear and covers the intent well. It also handles the OR condition effectively.",
            "Good, but consider specifying 'distinct' to match the query's DISTINCT keyword, ensuring the response aligns with the expected result set.",
            "Accurate and covers all necessary elements of the query. No changes needed."
        ],
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "original_utterance": "Find the first name of students who have cat or dog pet."
    },
    {
        "init": [
            "Which states have both owners and professionals?",
            "Can you list the states that are common to both owners and professionals?",
            "Show me the states that appear in both the owners and professionals lists."
        ],
        "final": [
            "Which states are present in both owners and professionals?",
            "Can you list the states that are common to both owners and professionals?",
            "Show me the states that appear in both the owners and professionals lists."
        ],
        "feedback": [
            "This variation is concise and clears without SQL-specific terminology. The word 'have' may be a bit ambiguous. Consider 'are present in both' for clarity.",
            "This variation is clear and aligns well with the original query. The phrase 'common to both' effectively conveys the 'INTERSECT' logic.",
            "This variation accurately represents the intent. The phrase 'appear in both' is a clear substitute for 'INTERSECT'. Overall well phrased."
        ],
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "original_utterance": "Which states have both owners and professionals living there?"
    },
    {
        "init": [
            "List the distinct first names of professionals and their treatment type descriptions.",
            "Show unique first names of professionals along with descriptions of the treatment types they provide.",
            "Provide a list of distinct professionals' first names and the descriptions of their treatment types."
        ],
        "final": [
            "List the unique first names of professionals and their treatment type descriptions.",
            "Show unique first names of professionals along with descriptions of the treatment types they provide.",
            "Show a list of distinct professionals' first names and the descriptions of their treatment types."
        ],
        "feedback": [
            "Clear and correctly captures the intent, but 'distinct' could be replaced with 'unique' for better fluency.",
            "Accurately captures the query intent. Well-written and clear. No changes needed.",
            "Concise and clear. However, consider changing 'list' to 'show' to align better with common phrasing in requests."
        ],
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "original_utterance": "List the first name of all the professionals along with the description of the treatment they have done."
    },
    {
        "init": [
            "Which teachers are assigned to teach the Math course?",
            "Can you list the names of teachers who currently teach Math?",
            "Show me the teachers responsible for teaching Math."
        ],
        "final": [
            "Who are the teachers currently assigned to teach the Math course?",
            "Can you list the names of teachers who currently teach Math?",
            "Show me the teachers responsible for teaching Math."
        ],
        "feedback": [
            "This variation is clear and concise, but it might benefit from specifying 'currently teach' for present relevance.",
            "Good phrasing, but the addition of 'currently' makes it more precise. It successfully avoids SQL-specific terminology.",
            "Accurate and to the point. No changes needed, aligns well with the SQL query intent."
        ],
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "original_utterance": "Show the name of the teacher for the math course."
    },
    {
        "init": [
            "Count the number of car makers on each continent.",
            "How many car manufacturers are there per continent?",
            "Show the number of car makers grouped by continent."
        ],
        "final": [
            "Count the number of car manufacturers on each continent.",
            "How many car manufacturers are there per continent?",
            "Show the number of car makers grouped by each continent."
        ],
        "feedback": [
            "Clear and accurate but lacks a bit of specificity in terms of 'joining' different tables. Also, the term 'on each continent' could be clearer by specifying it involves counting car manufacturers.",
            "This is a good phrasing, very clear and concise. No adjustments necessary in terms of content.",
            "Good and clear but could include 'each' to emphasize individuality in each continent's grouping."
        ],
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "original_utterance": "How many car makers are there in each continents? List the continent name and the count."
    },
    {
        "init": [
            "Show me the names of professionals and their treatment types provided.",
            "Can you list all the professionals along with the types of treatments they offer?",
            "Find the first names of professionals along with the descriptions of their treatment types."
        ],
        "final": [
            "Show me the names of professionals and the descriptions of the treatments they provide.",
            "Can you list all the professionals along with the descriptions of the treatments they offer?",
            "Find the distinct first names of professionals along with the descriptions of their treatment types."
        ],
        "feedback": [
            "This variation is clear but doesn't explicitly mention that 'treatment types' refers to descriptions, which would align more closely with the SQL query.",
            "Good phrasing but could benefit from specifying 'descriptions of treatments' rather than just 'types of treatments' to match the SQL query's intent.",
            "Accurately describes the query's output. No changes needed but could mention 'unique' or 'distinct' professionals to closely reflect the DISTINCT clause."
        ],
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "original_utterance": "List the first name of all the professionals along with the description of the treatment they have done."
    },
    {
        "init": [
            "Show me the battles and their results along with Bulgarian commanders except those that were fought in the English Channel and resulted in lost ships.",
            "Find all battles and their outcomes, as well as the Bulgarian commanders, excluding the battles where ships were lost in the English Channel.",
            "Give me a list of all battles, their results, and the Bulgarian commanders, excluding those that had ships lost in the English Channel."
        ],
        "final": [
            "Show me the battles and their results along with Bulgarian commanders except those fought in the English Channel where ships were lost.",
            "Find all battles and their outcomes, as well as the Bulgarian commanders, except those where ships were lost in the English Channel.",
            "Give me a list of all battles, their results, and the Bulgarian commanders, excluding those that involved ship losses in the English Channel."
        ],
        "feedback": [
            "This variation is detailed and clear, but the phrasing 'resulted in lost ships' might be slightly confusing. Consider rephrasing to maintain clarity on the context surrounding the loss.",
            "Accurate and clear, but could be more concise. Consider removing redundant phrasing while keeping key information.",
            "Effective and concise, but the term 'lost' might be misinterpreted. Ensure that 'lost ships' clearly indicates ships were lost in those battles."
        ],
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "original_utterance": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'."
    },
    {
        "init": [
            "Which students are both friends and liked by others?",
            "Find the students who are listed as friends and also liked by someone.",
            "Show the students who appear in both the friends list and the liked list."
        ],
        "final": [
            "Which students are both friends and liked by others?",
            "Find the students who are both friends and liked.",
            "Show the students who are present in both the friends and liked records."
        ],
        "feedback": [
            "This variation is clear and captures the intent well. No specific improvements needed.",
            "The phrase 'liked by someone' is a bit vague. 'Listed' could be omitted for natural clarity.",
            "This phrasing is accurate, but 'friends list' and 'liked list' are somewhat informal. Consider specifying it slightly clearer."
        ],
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "original_utterance": "Show the ids of high schoolers who have friends and are also liked by someone else."
    },
    {
        "init": [
            "How many documents use a template with the code 'PPT'?",
            "Count the number of documents that are associated with PPT templates.",
            "How many documents are there for templates marked with the type code 'PPT'?"
        ],
        "final": [
            "How many documents use a template with the code 'PPT'?",
            "Count the number of documents that use PPT templates.",
            "How many documents are there for templates marked with 'PPT'?"
        ],
        "feedback": [
            "This variation is clear and to the point. It correctly references the template code and aligns with the intent of the original SQL query.",
            "This is also accurate and maintains the meaning of the query. However, it may be slightly more clear if 'associated' is replaced with 'that use' for better readability.",
            "This is a good variation but slightly longer. Using 'marked with' might be more natural compared to 'marked with the type code'."
        ],
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "original_utterance": "How many documents are using the template with type code 'PPT'?"
    },
    {
        "init": [
            "What is the model of the car with 4 cylinders that has the highest horsepower?",
            "Can you show me the car model with 4 cylinders and the most horsepower?",
            "Find the car model with 4 cylinders that has the top horsepower."
        ],
        "final": [
            "What is the model of the car with 4 cylinders that has the highest horsepower among all?",
            "Can you tell me the car model with 4 cylinders that has the highest horsepower?",
            "Find the model of the car with 4 cylinders that has the top horsepower."
        ],
        "feedback": [
            "Good clarity, but it could be more precise by specifying we are looking for only one model.",
            "Clear and retains the intent, but mentioning 'highest' can improve the accuracy. Avoid 'show me,' which is more conversational.",
            "Concise, but it can be improved by specifying a single top model. The term 'top' is a good replacement for 'DESC'."
        ],
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_utterance": "For the cars with 4 cylinders, which model has the largest horsepower?"
    },
    {
        "init": [
            "How many unique official languages were spoken in countries that gained independence before 1930?",
            "Find the count of distinct official languages in countries that became independent before the year 1930.",
            "What is the number of different languages that were officially recognized in countries independent before 1930?"
        ],
        "final": [
            "How many unique official languages existed in countries that gained independence before 1930?",
            "Find the count of distinct official languages in countries that became independent before the year 1930.",
            "What is the number of different official languages in countries independent before 1930?"
        ],
        "feedback": [
            "This variation is clear but slightly verbose. It could be more concise by removing redundant terms such as 'were spoken.'",
            "This is an accurate and concise variation. It directly maps to the SQL query and avoids any unnecessary terms.",
            "This variation is also clear, but the phrase 'officially recognized in countries independent before 1930' could be rephrased for better clarity and smoothness."
        ],
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "original_utterance": "What is the total number of unique official languages spoken in the countries that are founded before 1930?"
    }
]